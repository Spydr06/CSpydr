  .data
  .type .L.str.0, @object
  .size .L.str.0, 5
  .align 8
.L.str.0:
  .ascii "%i\n\0"
  .globl .L.str.1
  .data
  .type .L.str.1, @object
  .size .L.str.1, 4
  .align 8
.L.str.1:
  .ascii "nil\0"
  .globl std.Errno.NONE
  .data
  .type std.Errno.NONE, @object
  .size std.Errno.NONE, 4
  .align 4
std.Errno.NONE:
  .byte 0
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.IO
  .data
  .type std.Errno.IO, @object
  .size std.Errno.IO, 4
  .align 4
std.Errno.IO:
  .byte 5
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.BADF
  .data
  .type std.Errno.BADF, @object
  .size std.Errno.BADF, 4
  .align 4
std.Errno.BADF:
  .byte 9
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.CHILD
  .data
  .type std.Errno.CHILD, @object
  .size std.Errno.CHILD, 4
  .align 4
std.Errno.CHILD:
  .byte 10
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.NOTDIR
  .data
  .type std.Errno.NOTDIR, @object
  .size std.Errno.NOTDIR, 4
  .align 4
std.Errno.NOTDIR:
  .byte 20
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.INVAL
  .data
  .type std.Errno.INVAL, @object
  .size std.Errno.INVAL, 4
  .align 4
std.Errno.INVAL:
  .byte 22
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.NILPTR
  .data
  .type std.Errno.NILPTR, @object
  .size std.Errno.NILPTR, 4
  .align 4
std.Errno.NILPTR:
  .byte 134
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.INDEXOUTOFBOUNDS
  .data
  .type std.Errno.INDEXOUTOFBOUNDS, @object
  .size std.Errno.INDEXOUTOFBOUNDS, 4
  .align 4
std.Errno.INDEXOUTOFBOUNDS:
  .byte 135
  .byte 0
  .byte 0
  .byte 0
  .globl std.Errno.ASSERT
  .data
  .type std.Errno.ASSERT, @object
  .size std.Errno.ASSERT, 4
  .align 4
std.Errno.ASSERT:
  .byte 136
  .byte 0
  .byte 0
  .byte 0
  .globl std.error.__static.__error
  .bss
  .align 16
std.error.__static.__error:
  .zero 16
  .globl std.hashmap.HASHMAP_INIT_SIZE
  .data
  .type std.hashmap.HASHMAP_INIT_SIZE, @object
  .size std.hashmap.HASHMAP_INIT_SIZE, 4
  .align 4
std.hashmap.HASHMAP_INIT_SIZE:
  .byte 32
  .byte 0
  .byte 0
  .byte 0
  .globl std.hashmap.HASHMAP_MULTIPLIER
  .data
  .type std.hashmap.HASHMAP_MULTIPLIER, @object
  .size std.hashmap.HASHMAP_MULTIPLIER, 4
  .align 4
std.hashmap.HASHMAP_MULTIPLIER:
  .byte 2
  .byte 0
  .byte 0
  .byte 0
  .globl std.stdout
  .data
  .type std.stdout, @object
  .size std.stdout, 4
  .align 4
std.stdout:
  .byte 1
  .byte 0
  .byte 0
  .byte 0
  .globl std.Prot.READ
  .data
  .type std.Prot.READ, @object
  .size std.Prot.READ, 4
  .align 4
std.Prot.READ:
  .byte 1
  .byte 0
  .byte 0
  .byte 0
  .globl std.Prot.WRITE
  .data
  .type std.Prot.WRITE, @object
  .size std.Prot.WRITE, 4
  .align 4
std.Prot.WRITE:
  .byte 2
  .byte 0
  .byte 0
  .byte 0
  .globl std.MMap.PRIVATE
  .data
  .type std.MMap.PRIVATE, @object
  .size std.MMap.PRIVATE, 4
  .align 4
std.MMap.PRIVATE:
  .byte 2
  .byte 0
  .byte 0
  .byte 0
  .globl std.MMap.ANONYMOUS
  .data
  .type std.MMap.ANONYMOUS, @object
  .size std.MMap.ANONYMOUS, 4
  .align 4
std.MMap.ANONYMOUS:
  .byte 32
  .byte 0
  .byte 0
  .byte 0
  .globl std.mem.unfreed_allocs
  .data
  .type std.mem.unfreed_allocs, @object
  .size std.mem.unfreed_allocs, 8
  .align 8
std.mem.unfreed_allocs:
  .byte 0
  .byte 0
  .byte 0
  .byte 0
  .byte 0
  .byte 0
  .byte 0
  .byte 0
  .globl std.mem.MMAP_FAILED
  .data
  .type std.mem.MMAP_FAILED, @object
  .size std.mem.MMAP_FAILED, 8
  .align 8
std.mem.MMAP_FAILED:
  .byte 255
  .byte 255
  .byte 255
  .byte 255
  .byte 0
  .byte 0
  .byte 0
  .byte 0
  .globl std.Syscall.WRITE
  .data
  .type std.Syscall.WRITE, @object
  .size std.Syscall.WRITE, 4
  .align 4
std.Syscall.WRITE:
  .byte 1
  .byte 0
  .byte 0
  .byte 0
  .globl std.Syscall.MMAP
  .data
  .type std.Syscall.MMAP, @object
  .size std.Syscall.MMAP, 4
  .align 4
std.Syscall.MMAP:
  .byte 9
  .byte 0
  .byte 0
  .byte 0
  .globl std.Syscall.MUNMAP
  .data
  .type std.Syscall.MUNMAP, @object
  .size std.Syscall.MUNMAP, 4
  .align 4
std.Syscall.MUNMAP:
  .byte 11
  .byte 0
  .byte 0
  .byte 0
  .globl .L.str.12
  .data
  .type .L.str.12, @object
  .size .L.str.12, 5
  .align 8
.L.str.12:
  .ascii "none\0"
  .globl .L.str.13
  .data
  .type .L.str.13, @object
  .size .L.str.13, 8
  .align 8
.L.str.13:
  .ascii "invalid\0"
  .globl .L.str.14
  .data
  .type .L.str.14, @object
  .size .L.str.14, 13
  .align 8
.L.str.14:
  .ascii "input/output\0"
  .globl .L.str.15
  .data
  .type .L.str.15, @object
  .size .L.str.15, 12
  .align 8
.L.str.15:
  .ascii "nil pointer\0"
  .globl .L.str.16
  .data
  .type .L.str.16, @object
  .size .L.str.16, 20
  .align 16
.L.str.16:
  .ascii "bad file descriptor\0"
  .globl .L.str.17
  .data
  .type .L.str.17, @object
  .size .L.str.17, 16
  .align 16
.L.str.17:
  .ascii "not a directory\0"
  .globl .L.str.18
  .data
  .type .L.str.18, @object
  .size .L.str.18, 20
  .align 16
.L.str.18:
  .ascii "index out of bounds\0"
  .globl .L.str.19
  .data
  .type .L.str.19, @object
  .size .L.str.19, 17
  .align 16
.L.str.19:
  .ascii "failed assertion\0"
  .globl .L.str.20
  .data
  .type .L.str.20, @object
  .size .L.str.20, 6
  .align 8
.L.str.20:
  .ascii "child\0"
  .globl .L.str.21
  .data
  .type .L.str.21, @object
  .size .L.str.21, 10
  .align 8
.L.str.21:
  .ascii "<unknown>\0"
  .globl .L.str.56
  .data
  .type .L.str.56, @object
  .size .L.str.56, 13
  .align 8
.L.str.56:
  .ascii "`fmt` is nil\0"
  .globl .L.str.57
  .data
  .type .L.str.57, @object
  .size .L.str.57, 4
  .align 8
.L.str.57:
  .ascii "\\a\0"
  .globl .L.str.58
  .data
  .type .L.str.58, @object
  .size .L.str.58, 4
  .align 8
.L.str.58:
  .ascii "\\b\0"
  .globl .L.str.59
  .data
  .type .L.str.59, @object
  .size .L.str.59, 4
  .align 8
.L.str.59:
  .ascii "\\t\0"
  .globl .L.str.60
  .data
  .type .L.str.60, @object
  .size .L.str.60, 4
  .align 8
.L.str.60:
  .ascii "\\v\0"
  .globl .L.str.61
  .data
  .type .L.str.61, @object
  .size .L.str.61, 4
  .align 8
.L.str.61:
  .ascii "\\n\0"
  .globl .L.str.62
  .data
  .type .L.str.62, @object
  .size .L.str.62, 4
  .align 8
.L.str.62:
  .ascii "\\r\0"
  .globl .L.str.63
  .data
  .type .L.str.63, @object
  .size .L.str.63, 4
  .align 8
.L.str.63:
  .ascii "\\f\0"
  .globl .L.str.64
  .data
  .type .L.str.64, @object
  .size .L.str.64, 4
  .align 8
.L.str.64:
  .ascii "\\'\0"
  .globl .L.str.65
  .data
  .type .L.str.65, @object
  .size .L.str.65, 3
  .align 8
.L.str.65:
  .ascii "\\\0"
  .globl .L.str.66
  .data
  .type .L.str.66, @object
  .size .L.str.66, 5
  .align 8
.L.str.66:
  .ascii "\\\\\0"
  .globl .L.str.67
  .data
  .type .L.str.67, @object
  .size .L.str.67, 4
  .align 8
.L.str.67:
  .ascii "\\0\0"
  .globl .L.str.68
  .data
  .type .L.str.68, @object
  .size .L.str.68, 3
  .align 8
.L.str.68:
  .ascii "0x\0"
  .globl .L.str.69
  .data
  .type .L.str.69, @object
  .size .L.str.69, 6
  .align 8
.L.str.69:
  .ascii "(nil)\0"
  .globl .L.str.70
  .data
  .type .L.str.70, @object
  .size .L.str.70, 6
  .align 8
.L.str.70:
  .ascii "(nil)\0"
  .globl .L.str.71
  .data
  .type .L.str.71, @object
  .size .L.str.71, 3
  .align 8
.L.str.71:
  .ascii "\0\0"
  .globl .L.str.72
  .data
  .type .L.str.72, @object
  .size .L.str.72, 3
  .align 8
.L.str.72:
  .ascii ": \0"
  .globl .L.str.73
  .data
  .type .L.str.73, @object
  .size .L.str.73, 3
  .align 8
.L.str.73:
  .ascii ": \0"
  .globl .L.str.74
  .data
  .type .L.str.74, @object
  .size .L.str.74, 12
  .align 8
.L.str.74:
  .ascii "index: %l\n\0"
  .globl .L.str.75
  .data
  .type .L.str.75, @object
  .size .L.str.75, 19
  .align 16
.L.str.75:
  .ascii "key: %i, val: %i\n\0"
  .globl .L.str.76
  .data
  .type .L.str.76, @object
  .size .L.str.76, 3
  .align 8
.L.str.76:
  .ascii "\n\0"
  .globl _start
  .text
_start:
  call .main
  movq %rax, %rdi
  movq $60, %rax
  syscall
  .globl .main
  .text
  .type .main, @function
.main:
  push %rbp
  mov %rsp, %rbp
  sub $96, %rsp
  mov %rsp, -8(%rbp)
  mov $36, %rcx
  lea -64(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -72(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $4, %rax
  push %rax
  mov $4, %rax
  push %rax
  lea -64(%rbp), %rax
  push %rax
  lea std.hashmap.init(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -80(%rbp), %rax
  push %rax
  push %rax
  mov $1, %rax
  pop %rdi
  mov %eax, (%rdi)
  mov %rdi, %rax
  add $4, %rax
  push %rax
  mov $69, %rax
  pop %rdi
  mov %eax, (%rdi)
  mov %rdi, %rax
  add $4, %rax
  pop %rax
  push %rax
  lea -64(%rbp), %rax
  push %rax
  lea std.hashmap.put(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -88(%rbp), %rax
  push %rax
  push %rax
  mov $2, %rax
  pop %rdi
  mov %eax, (%rdi)
  mov %rdi, %rax
  add $4, %rax
  push %rax
  mov $420, %rax
  pop %rdi
  mov %eax, (%rdi)
  mov %rdi, %rax
  add $4, %rax
  pop %rax
  push %rax
  lea -64(%rbp), %rax
  push %rax
  lea std.hashmap.put(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -72(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -92(%rbp), %rax
  push %rax
  push %rax
  mov $1, %rax
  pop %rdi
  mov %eax, (%rdi)
  mov %rdi, %rax
  add $4, %rax
  pop %rax
  push %rax
  lea -64(%rbp), %rax
  push %rax
  lea std.hashmap.get(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -72(%rbp), %rax
  mov (%rax), %rax
  cmp $0, %rax
  je  .L.else.0
  lea -72(%rbp), %rax
  mov (%rax), %rax
  movsxd (%rax), %rax
  push %rax
  lea .L.str.0(%rip), %rax
  push %rax
  lea std.io.printf(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.0
.L.else.0:
  lea .L.str.1(%rip), %rax
  push %rax
  lea std.io.puts(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.0:
  lea -64(%rbp), %rax
  push %rax
  lea std.hashmap.free(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  mov $0, %rax
  jmp .L.return..main
.L.return..main:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.algorithm.hash_bytes
  .text
  .type std.algorithm.hash_bytes, @function
std.algorithm.hash_bytes:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov $8, %rcx
  lea -32(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -32(%rbp), %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -40(%rbp), %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.begin.1:
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setb %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.break.1
  lea -32(%rbp), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  movzbl (%rax), %eax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  mov $8, %rax
  push %rax
  mov $1, %rax
  pop %rdi
  imul %edi, %eax
  push %rax
  lea -16(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  mov $1, %rax
  pop %rdi
  imul %edi, %eax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  lea -32(%rbp), %rax
  push %rax
  mov $10, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rdi, %rcx
  shl %cl, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  mov $6, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rdi, %rcx
  shr %cl, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  xor %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.continue.1:
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  jmp .L.begin.1
.L.break.1:
  lea -32(%rbp), %rax
  push %rax
  mov $3, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rdi, %rcx
  shl %cl, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  mov $11, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rdi, %rcx
  shr %cl, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  xor %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  mov $15, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rdi, %rcx
  shl %cl, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  xor %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.algorithm.hash_bytes
.L.return.std.algorithm.hash_bytes:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.c_str.strlen
  .text
  .type std.c_str.strlen, @function
std.c_str.strlen:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  mov %rax, %rdi
  mov $-1, %rcx
  xor %eax, %eax
  cld
  repne scasb
  xor $-1, %rcx
  dec %rcx
  mov %rcx, %rax
  jmp .L.return.std.c_str.strlen
.L.return.std.c_str.strlen:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.c_str.copy
  .text
  .type std.c_str.copy, @function
std.c_str.copy:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.strlen(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.move(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.return.std.c_str.copy:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.c_str.reverse
  .text
  .type std.c_str.reverse, @function
std.c_str.reverse:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov $8, %rcx
  lea -24(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -24(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.strlen(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.begin.2:
  mov $2, %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cqo
  idiv %rdi
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setb %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.break.2
  mov $1, %rcx
  lea -33(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -33(%rbp), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  movsbl (%rax), %eax
  pop %rdi
  mov %al, (%rdi)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  movsbl (%rax), %eax
  pop %rdi
  mov %al, (%rdi)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  lea -33(%rbp), %rax
  movsbl (%rax), %eax
  pop %rdi
  mov %al, (%rdi)
.L.continue.2:
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  jmp .L.begin.2
.L.break.2:
  lea -16(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.c_str.reverse
.L.return.std.c_str.reverse:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.c_str.from_int
  .text
  .type std.c_str.from_int, @function
std.c_str.from_int:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov %edx, -28(%rbp)
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $1, %rcx
  lea -41(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -40(%rbp), %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -41(%rbp), %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %al, (%rdi)
  mov $0, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.3
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $48, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.c_str.from_int
  jmp .L.end.3
.L.else.3:
.L.end.3:
  mov $0, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.false.5
  mov $10, %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.false.5
  mov $1, %rax
  jmp .L.end.5
.L.false.5:
  xor %rax, %rax
.L.end.5:
  cmp $0, %eax
  je  .L.else.4
  lea -41(%rbp), %rax
  push %rax
  mov $1, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -16(%rbp), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  neg %rax
  pop %rdi
  mov %rax, (%rdi)
  jmp .L.end.4
.L.else.4:
.L.end.4:
.L.begin.6:
  mov $0, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setne %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.break.6
  mov $8, %rcx
  lea -56(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -56(%rbp), %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cqo
  idiv %rdi
  mov %rdx, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -56(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $9, %rax
  pop %rdi
  cmp %rdi, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.7
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $97, %rax
  push %rax
  mov $10, %rax
  push %rax
  lea -56(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %al, (%rdi)
  jmp .L.end.7
.L.else.7:
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $48, %rax
  push %rax
  lea -56(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %al, (%rdi)
.L.end.7:
  lea -16(%rbp), %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cqo
  idiv %rdi
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.continue.6:
  jmp .L.begin.6
.L.break.6:
  lea -41(%rbp), %rax
  movsbl (%rax), %eax
  cmp $0, %eax
  je  .L.else.8
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $45, %rax
  pop %rdi
  mov %al, (%rdi)
  jmp .L.end.8
.L.else.8:
.L.end.8:
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.reverse(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -24(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.c_str.from_int
.L.return.std.c_str.from_int:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.c_str.from_uint
  .text
  .type std.c_str.from_uint, @function
std.c_str.from_uint:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov %edx, -28(%rbp)
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -40(%rbp), %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  mov $0, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.9
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $48, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.c_str.from_uint
  jmp .L.end.9
.L.else.9:
.L.end.9:
.L.begin.10:
  mov $0, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setne %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.break.10
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -48(%rbp), %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  xor %rdx, %rdx
  div %rdi
  mov %rdx, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $9, %rax
  pop %rdi
  cmp %rdi, %rax
  setb %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.11
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $97, %rax
  push %rax
  mov $10, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %al, (%rdi)
  jmp .L.end.11
.L.else.11:
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $48, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %al, (%rdi)
.L.end.11:
  lea -16(%rbp), %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cqo
  idiv %rdi
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.continue.10:
  jmp .L.begin.10
.L.break.10:
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.reverse(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -24(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.c_str.from_uint
.L.return.std.c_str.from_uint:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.error.new
  .text
  .type std.error.new, @function
std.error.new:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %edi, -12(%rbp)
  mov %rsi, -24(%rbp)
  lea std.error.__static.__error(%rip), %rax
  add $0, %rax
  push %rax
  lea -12(%rbp), %rax
  movsxd (%rax), %rax
  pop %rdi
  mov %eax, (%rdi)
  lea std.error.__static.__error(%rip), %rax
  add $8, %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea std.error.__static.__error(%rip), %rax
  mov %rax, %rdi
  xor %rax, %rax
  shl $8, %rax
  mov 7(%rdi), %al
  shl $8, %rax
  mov 6(%rdi), %al
  shl $8, %rax
  mov 5(%rdi), %al
  shl $8, %rax
  mov 4(%rdi), %al
  shl $8, %rax
  mov 3(%rdi), %al
  shl $8, %rax
  mov 2(%rdi), %al
  shl $8, %rax
  mov 1(%rdi), %al
  shl $8, %rax
  mov 0(%rdi), %al
 xor %rdx, %rdx
  shl $8, %rdx
  mov 15(%rdi), %dl
  shl $8, %rdx
  mov 14(%rdi), %dl
  shl $8, %rdx
  mov 13(%rdi), %dl
  shl $8, %rdx
  mov 12(%rdi), %dl
  shl $8, %rdx
  mov 11(%rdi), %dl
  shl $8, %rdx
  mov 10(%rdi), %dl
  shl $8, %rdx
  mov 9(%rdi), %dl
  shl $8, %rdx
  mov 8(%rdi), %dl
  jmp .L.return.std.error.new
.L.return.std.error.new:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.error.none
  .text
  .type std.error.none, @function
std.error.none:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  lea std.error.__static.__error(%rip), %rax
  add $0, %rax
  push %rax
  lea std.Errno.NONE(%rip), %rax
  movsxd (%rax), %rax
  movsxd %eax, %rax
  pop %rdi
  mov %eax, (%rdi)
  lea std.error.__static.__error(%rip), %rax
  add $8, %rax
  push %rax
  xor %rax, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea std.error.__static.__error(%rip), %rax
  mov %rax, %rdi
  xor %rax, %rax
  shl $8, %rax
  mov 7(%rdi), %al
  shl $8, %rax
  mov 6(%rdi), %al
  shl $8, %rax
  mov 5(%rdi), %al
  shl $8, %rax
  mov 4(%rdi), %al
  shl $8, %rax
  mov 3(%rdi), %al
  shl $8, %rax
  mov 2(%rdi), %al
  shl $8, %rax
  mov 1(%rdi), %al
  shl $8, %rax
  mov 0(%rdi), %al
 xor %rdx, %rdx
  shl $8, %rdx
  mov 15(%rdi), %dl
  shl $8, %rdx
  mov 14(%rdi), %dl
  shl $8, %rdx
  mov 13(%rdi), %dl
  shl $8, %rdx
  mov 12(%rdi), %dl
  shl $8, %rdx
  mov 11(%rdi), %dl
  shl $8, %rdx
  mov 10(%rdi), %dl
  shl $8, %rdx
  mov 9(%rdi), %dl
  shl $8, %rdx
  mov 8(%rdi), %dl
  jmp .L.return.std.error.none
.L.return.std.error.none:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.error.current
  .text
  .type std.error.current, @function
std.error.current:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  lea std.error.__static.__error(%rip), %rax
  cmp $0, %rax
  jne .L.skip_unless.12
  lea std.error.__static.__error(%rip), %rax
  push %rax
  sub $8, %rsp
  lea std.error.none(%rip), %rax
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  mov %al, -32(%rbp)
  shr $8, %rax
  mov %al, -31(%rbp)
  shr $8, %rax
  mov %al, -30(%rbp)
  shr $8, %rax
  mov %al, -29(%rbp)
  shr $8, %rax
  mov %al, -28(%rbp)
  shr $8, %rax
  mov %al, -27(%rbp)
  shr $8, %rax
  mov %al, -26(%rbp)
  shr $8, %rax
  mov %al, -25(%rbp)
  shr $8, %rax
  mov %dl, -24(%rbp)
  shr $8, %rdx
  mov %dl, -23(%rbp)
  shr $8, %rdx
  mov %dl, -22(%rbp)
  shr $8, %rdx
  mov %dl, -21(%rbp)
  shr $8, %rdx
  mov %dl, -20(%rbp)
  shr $8, %rdx
  mov %dl, -19(%rbp)
  shr $8, %rdx
  mov %dl, -18(%rbp)
  shr $8, %rdx
  mov %dl, -17(%rbp)
  shr $8, %rdx
  lea -32(%rbp), %rax
  pop %rdi
  mov 0(%rax), %r8
  mov %r8, 0(%rdi)
  mov 8(%rax), %r8
  mov %r8, 8(%rdi)
.L.skip_unless.12:
  lea std.error.__static.__error(%rip), %rax
  mov %rax, %rdi
  xor %rax, %rax
  shl $8, %rax
  mov 7(%rdi), %al
  shl $8, %rax
  mov 6(%rdi), %al
  shl $8, %rax
  mov 5(%rdi), %al
  shl $8, %rax
  mov 4(%rdi), %al
  shl $8, %rax
  mov 3(%rdi), %al
  shl $8, %rax
  mov 2(%rdi), %al
  shl $8, %rax
  mov 1(%rdi), %al
  shl $8, %rax
  mov 0(%rdi), %al
 xor %rdx, %rdx
  shl $8, %rdx
  mov 15(%rdi), %dl
  shl $8, %rdx
  mov 14(%rdi), %dl
  shl $8, %rdx
  mov 13(%rdi), %dl
  shl $8, %rdx
  mov 12(%rdi), %dl
  shl $8, %rdx
  mov 11(%rdi), %dl
  shl $8, %rdx
  mov 10(%rdi), %dl
  shl $8, %rdx
  mov 9(%rdi), %dl
  shl $8, %rdx
  mov 8(%rdi), %dl
  jmp .L.return.std.error.current
.L.return.std.error.current:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.error.str
  .text
  .type std.error.str, @function
std.error.str:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  mov %edi, -12(%rbp)
  mov $0, %rax
  push %rax
  lea -12(%rbp), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.13
  lea -12(%rbp), %rax
  push %rax
  lea -12(%rbp), %rax
  movsxd (%rax), %rax
  neg %rax
  pop %rdi
  mov %eax, (%rdi)
  jmp .L.end.13
.L.else.13:
.L.end.13:
  lea -12(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  push %rax
  lea std.Errno.NONE(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.0.14
  push %rax
  push %rax
  lea std.Errno.INVAL(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.1.14
  push %rax
  push %rax
  lea std.Errno.IO(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.2.14
  push %rax
  push %rax
  lea std.Errno.NILPTR(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.3.14
  push %rax
  push %rax
  lea std.Errno.BADF(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.4.14
  push %rax
  push %rax
  lea std.Errno.NOTDIR(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.5.14
  push %rax
  push %rax
  lea std.Errno.INDEXOUTOFBOUNDS(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.6.14
  push %rax
  push %rax
  lea std.Errno.ASSERT(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.7.14
  push %rax
  push %rax
  lea std.Errno.CHILD(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.8.14
  jmp .L.case.9.14
.L.case.0.14:
  lea .L.str.12(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.1.14:
  lea .L.str.13(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.2.14:
  lea .L.str.14(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.3.14:
  lea .L.str.15(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.4.14:
  lea .L.str.16(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.5.14:
  lea .L.str.17(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.6.14:
  lea .L.str.18(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.7.14:
  lea .L.str.19(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.8.14:
  lea .L.str.20(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.case.9.14:
  lea .L.str.21(%rip), %rax
  jmp .L.return.std.error.str
  jmp .L.break.14
.L.break.14:
.L.return.std.error.str:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.fmt.va_format
  .text
  .type std.fmt.va_format, @function
std.fmt.va_format:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -32(%rbp)
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -40(%rbp), %rax
  push %rax
  sub $8, %rsp
  xor %rax, %rax
  push %rax
  lea std.string.init(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  cmp $0, %rax
  jne .L.skip_unless.15
  lea .L.str.56(%rip), %rax
  push %rax
  lea std.Errno.NILPTR(%rip), %rax
  movsxd (%rax), %rax
  movsxd %eax, %rax
  push %rax
  lea std.error.new(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  mov %al, -64(%rbp)
  shr $8, %rax
  mov %al, -63(%rbp)
  shr $8, %rax
  mov %al, -62(%rbp)
  shr $8, %rax
  mov %al, -61(%rbp)
  shr $8, %rax
  mov %al, -60(%rbp)
  shr $8, %rax
  mov %al, -59(%rbp)
  shr $8, %rax
  mov %al, -58(%rbp)
  shr $8, %rax
  mov %al, -57(%rbp)
  shr $8, %rax
  mov %dl, -56(%rbp)
  shr $8, %rdx
  mov %dl, -55(%rbp)
  shr $8, %rdx
  mov %dl, -54(%rbp)
  shr $8, %rdx
  mov %dl, -53(%rbp)
  shr $8, %rdx
  mov %dl, -52(%rbp)
  shr $8, %rdx
  mov %dl, -51(%rbp)
  shr $8, %rdx
  mov %dl, -50(%rbp)
  shr $8, %rdx
  mov %dl, -49(%rbp)
  shr $8, %rdx
  lea -64(%rbp), %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.fmt.va_format
.L.skip_unless.15:
.L.begin.16:
  mov $0, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  movsbl (%rax), %eax
  pop %rdi
  cmp %edi, %eax
  setne %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.break.16
  mov $37, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  movsbl (%rax), %eax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.17
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rax
  push %rax
  mov $1, %rax
  pop %rdi
  imul %edi, %eax
  push %rax
  lea -16(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  mov $1, %rax
  pop %rdi
  imul %edi, %eax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  lea -48(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.fmt.__internal.fmt(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -48(%rbp), %rax
  mov (%rax), %rax
  cmp $0, %rax
  je  .L.else.18
  lea -48(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.fmt.va_format
  jmp .L.end.18
.L.else.18:
.L.end.18:
  jmp .L.end.17
.L.else.17:
  lea -16(%rbp), %rax
  mov (%rax), %rax
  movsbl (%rax), %eax
  push %rax
  lea -40(%rbp), %rax
  push %rax
  lea std.string.append(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.17:
.L.continue.16:
  mov $8, %rax
  push %rax
  mov $1, %rax
  pop %rdi
  imul %edi, %eax
  push %rax
  lea -16(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  mov $1, %rax
  pop %rdi
  imul %edi, %eax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  jmp .L.begin.16
.L.break.16:
  lea -40(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.fmt.va_format
.L.return.std.fmt.va_format:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.fmt.__internal.fmt_literal_char
  .text
  .type std.fmt.__internal.fmt_literal_char, @function
std.fmt.__internal.fmt_literal_char:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %dil, -9(%rbp)
  mov %rsi, -24(%rbp)
  lea -9(%rbp), %rax
  movsbl (%rax), %eax
  push %rax
  push %rax
  mov $7, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.0.19
  push %rax
  push %rax
  mov $8, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.1.19
  push %rax
  push %rax
  mov $9, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.2.19
  push %rax
  push %rax
  mov $11, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.3.19
  push %rax
  push %rax
  mov $10, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.4.19
  push %rax
  push %rax
  mov $13, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.5.19
  push %rax
  push %rax
  mov $12, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.6.19
  push %rax
  push %rax
  mov $39, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.7.19
  push %rax
  push %rax
  mov $34, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.8.19
  push %rax
  push %rax
  mov $92, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.9.19
  push %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.10.19
  jmp .L.case.11.19
.L.case.0.19:
  lea .L.str.57(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.1.19:
  lea .L.str.58(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.2.19:
  lea .L.str.59(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.3.19:
  lea .L.str.60(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.4.19:
  lea .L.str.61(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.5.19:
  lea .L.str.62(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.6.19:
  lea .L.str.63(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.7.19:
  lea .L.str.64(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.8.19:
  lea .L.str.65(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.9.19:
  lea .L.str.66(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.10.19:
  lea .L.str.67(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.case.11.19:
  lea -9(%rbp), %rax
  movsbl (%rax), %eax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.append(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.19
.L.break.19:
.L.return.std.fmt.__internal.fmt_literal_char:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.fmt.__internal.fmt_literal_string
  .text
  .type std.fmt.__internal.fmt_literal_string, @function
std.fmt.__internal.fmt_literal_string:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  lea -28(%rbp), %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %eax, (%rdi)
.L.begin.20:
  lea -16(%rbp), %rax
  mov (%rax), %rax
  mov %rax, %rdi
  mov $-1, %rcx
  xor %eax, %eax
  cld
  repne scasb
  xor $-1, %rcx
  dec %rcx
  mov %rcx, %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  pop %rdi
  cmp %edi, %eax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.break.20
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  movsbl (%rax), %eax
  push %rax
  lea std.fmt.__internal.fmt_literal_char(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.continue.20:
  mov $1, %rax
  push %rax
  lea -28(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -28(%rbp), %rax
  movsxd (%rax), %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %eax, (%rdi)
  pop %rdi
  sub %edi, %eax
  jmp .L.begin.20
.L.break.20:
.L.return.std.fmt.__internal.fmt_literal_string:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.fmt.__internal.fmt
  .text
  .type std.fmt.__internal.fmt, @function
std.fmt.__internal.fmt:
  push %rbp
  mov %rsp, %rbp
  sub $208, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov %rdx, -32(%rbp)
  mov $100, %rcx
  lea -144(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -16(%rbp), %rax
  mov (%rax), %rax
  movsbl (%rax), %eax
  push %rax
  push %rax
  mov $37, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.0.21
  push %rax
  push %rax
  mov $105, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.1.21
  push %rax
  push %rax
  mov $117, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.2.21
  push %rax
  push %rax
  mov $108, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.3.21
  push %rax
  push %rax
  mov $111, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.4.21
  push %rax
  push %rax
  mov $120, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.5.21
  push %rax
  push %rax
  mov $112, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.6.21
  push %rax
  push %rax
  mov $99, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.7.21
  push %rax
  push %rax
  mov $67, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.8.21
  push %rax
  push %rax
  mov $115, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.9.21
  push %rax
  push %rax
  mov $83, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.10.21
  push %rax
  push %rax
  mov $110, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.11.21
  push %rax
  push %rax
  mov $101, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.12.21
  push %rax
  push %rax
  mov $69, %rax
  pop %rdi
  cmp %eax, %edi
  pop %rax
  je .L.case.13.21
  jmp .L.case.14.21
.L.case.0.21:
  lea -16(%rbp), %rax
  mov (%rax), %rax
  movsbl (%rax), %eax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.append(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.1.21:
  mov $10, %rax
  push %rax
  lea -144(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.22
  mov $4, %rax
  push %rax
  mov $4, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.22
.L.else.22:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.23
  mov $4, %rax
  push %rax
  mov $4, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.23
.L.else.23:
  mov $4, %rax
  push %rax
  mov $4, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.23:
.L.end.22:
  movsxd (%rax), %rax
  movsxd %eax, %rax
  push %rax
  lea std.c_str.from_int(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -144(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.2.21:
  mov $10, %rax
  push %rax
  lea -144(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.24
  mov $4, %rax
  push %rax
  mov $4, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.24
.L.else.24:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.25
  mov $4, %rax
  push %rax
  mov $4, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.25
.L.else.25:
  mov $4, %rax
  push %rax
  mov $4, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.25:
.L.end.24:
  movsxd (%rax), %rax
  mov %eax, %eax
  push %rax
  lea std.c_str.from_uint(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -144(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.3.21:
  mov $10, %rax
  push %rax
  lea -144(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.26
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.26
.L.else.26:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.27
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.27
.L.else.27:
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.27:
.L.end.26:
  mov (%rax), %rax
  push %rax
  lea std.c_str.from_int(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -144(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.4.21:
  mov $8, %rax
  push %rax
  lea -144(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.28
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.28
.L.else.28:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.29
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.29
.L.else.29:
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.29:
.L.end.28:
  mov (%rax), %rax
  push %rax
  lea std.c_str.from_int(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -144(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.5.21:
  mov $16, %rax
  push %rax
  lea -144(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.30
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.30
.L.else.30:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.31
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.31
.L.else.31:
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.31:
.L.end.30:
  mov (%rax), %rax
  push %rax
  lea std.c_str.from_uint(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -144(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.6.21:
  mov $16, %rax
  push %rax
  lea -144(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.32
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.32
.L.else.32:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.33
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.33
.L.else.33:
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.33:
.L.end.32:
  mov (%rax), %rax
  push %rax
  lea std.c_str.from_uint(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea .L.str.68(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -144(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.7.21:
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.34
  mov $1, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.34
.L.else.34:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.35
  mov $1, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.35
.L.else.35:
  mov $1, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.35:
.L.end.34:
  movsbl (%rax), %eax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.append(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.8.21:
  mov $1, %rcx
  lea -145(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -145(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.36
  sub $8, %rsp
  mov $1, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.36
.L.else.36:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.37
  sub $8, %rsp
  mov $1, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.37
.L.else.37:
  sub $8, %rsp
  mov $1, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
.L.end.37:
.L.end.36:
  movsbl (%rax), %eax
  pop %rdi
  mov %al, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -145(%rbp), %rax
  movsbl (%rax), %eax
  push %rax
  lea std.fmt.__internal.fmt_literal_char(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.break.21
.L.case.9.21:
  mov $8, %rcx
  lea -160(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -160(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.38
  sub $8, %rsp
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.38
.L.else.38:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.39
  sub $8, %rsp
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.39
.L.else.39:
  sub $8, %rsp
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
.L.end.39:
.L.end.38:
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -160(%rbp), %rax
  mov (%rax), %rax
  cmp $0, %rax
  je  .L.else.40
  lea -160(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.40
.L.else.40:
  lea .L.str.69(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.40:
  jmp .L.break.21
.L.case.10.21:
  mov $8, %rcx
  lea -168(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -168(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.41
  sub $8, %rsp
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.41
.L.else.41:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.42
  sub $8, %rsp
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.42
.L.else.42:
  sub $8, %rsp
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
.L.end.42:
.L.end.41:
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -168(%rbp), %rax
  mov (%rax), %rax
  cmp $0, %rax
  je  .L.else.43
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -168(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.fmt.__internal.fmt_literal_string(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.43
.L.else.43:
  lea .L.str.70(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.43:
  jmp .L.break.21
.L.case.11.21:
  lea -24(%rbp), %rax
  mov (%rax), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.free(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea .L.str.71(%rip), %rax
  push %rax
  lea std.string.init(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.return.std.fmt.__internal.fmt
  jmp .L.break.21
.L.case.12.21:
  mov $8, %rcx
  lea -176(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -176(%rbp), %rax
  push %rax
  mov $0, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.44
  sub $8, %rsp
  mov $16, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__gp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.44
.L.else.44:
  mov $1, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  cmp %edi, %eax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.45
  sub $8, %rsp
  mov $16, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__fp(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  jmp .L.end.45
.L.else.45:
  sub $8, %rsp
  mov $16, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
.L.end.45:
.L.end.44:
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -176(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  movsxd (%rax), %rax
  push %rax
  lea std.error.str(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -176(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  cmp $0, %rax
  je  .L.else.46
  lea .L.str.72(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -176(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.46
.L.else.46:
.L.end.46:
  jmp .L.break.21
.L.case.13.21:
  mov $16, %rcx
  lea -192(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -192(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea std.error.current(%rip), %rax
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  mov %al, -208(%rbp)
  shr $8, %rax
  mov %al, -207(%rbp)
  shr $8, %rax
  mov %al, -206(%rbp)
  shr $8, %rax
  mov %al, -205(%rbp)
  shr $8, %rax
  mov %al, -204(%rbp)
  shr $8, %rax
  mov %al, -203(%rbp)
  shr $8, %rax
  mov %al, -202(%rbp)
  shr $8, %rax
  mov %al, -201(%rbp)
  shr $8, %rax
  mov %dl, -200(%rbp)
  shr $8, %rdx
  mov %dl, -199(%rbp)
  shr $8, %rdx
  mov %dl, -198(%rbp)
  shr $8, %rdx
  mov %dl, -197(%rbp)
  shr $8, %rdx
  mov %dl, -196(%rbp)
  shr $8, %rdx
  mov %dl, -195(%rbp)
  shr $8, %rdx
  mov %dl, -194(%rbp)
  shr $8, %rdx
  mov %dl, -193(%rbp)
  shr $8, %rdx
  lea -208(%rbp), %rax
  pop %rdi
  mov 0(%rax), %r8
  mov %r8, 0(%rdi)
  mov 8(%rax), %r8
  mov %r8, 8(%rdi)
  lea -192(%rbp), %rax
  add $0, %rax
  movsxd (%rax), %rax
  push %rax
  lea std.error.str(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -192(%rbp), %rax
  add $8, %rax
  mov (%rax), %rax
  cmp $0, %rax
  je  .L.else.47
  lea .L.str.73(%rip), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -192(%rbp), %rax
  add $8, %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.concat(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.47
.L.else.47:
.L.end.47:
  jmp .L.break.21
.L.case.14.21:
  jmp .L.break.21
.L.break.21:
  xor %rax, %rax
  jmp .L.return.std.fmt.__internal.fmt
.L.return.std.fmt.__internal.fmt:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.init
  .text
  .type std.hashmap.init, @function
std.hashmap.init:
  push %rbp
  mov %rsp, %rbp
  sub $80, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  mov %rsi, -72(%rbp)
  mov %rdx, -80(%rbp)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  push %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  mov %rdi, %rax
  add $8, %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  mov %rdi, %rax
  add $8, %rax
  push %rax
  lea -72(%rbp), %rax
  mov (%rax), %rax
  movzwl %ax, %eax
  pop %rdi
  mov %ax, (%rdi)
  mov %rdi, %rax
  add $2, %rax
  push %rax
  lea -80(%rbp), %rax
  mov (%rax), %rax
  movzwl %ax, %eax
  pop %rdi
  mov %ax, (%rdi)
  mov %rdi, %rax
  add $2, %rax
  pop %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.hashmap.allocate(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -64(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.hashmap.init
.L.return.std.hashmap.init:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.allocate
  .text
  .type std.hashmap.allocate, @function
std.hashmap.allocate:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  push %rax
  lea std.hashmap.HASHMAP_INIT_SIZE(%rip), %rax
  movsxd (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $18, %rax
  movzwl (%rax), %eax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  pop %rdi
  add %edi, %eax
  pop %rdi
  imul %edi, %eax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  sub $8, %rsp
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.alloc(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
.L.return.std.hashmap.allocate:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.free
  .text
  .type std.hashmap.free, @function
std.hashmap.free:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.free(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.return.std.hashmap.free:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.has_space
  .text
  .type std.hashmap.has_space, @function
std.hashmap.has_space:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $18, %rax
  movzwl (%rax), %eax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  pop %rdi
  add %edi, %eax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  mov (%rax), %rax
  pop %rdi
  xor %rdx, %rdx
  div %rdi
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setb %al
  movzb %al, %rax
  jmp .L.return.std.hashmap.has_space
.L.return.std.hashmap.has_space:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.grow
  .text
  .type std.hashmap.grow, @function
std.hashmap.grow:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.hashmap.has_space(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  movzx %al, %eax
  cmp $0, %eax
  je  .L.else.48
  jmp .L.return.std.hashmap.grow
  jmp .L.end.48
.L.else.48:
.L.end.48:
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  push %rax
  lea std.hashmap.HASHMAP_MULTIPLIER(%rip), %rax
  movsxd (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  mov (%rax), %rax
  pop %rdi
  imul %rdi, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  sub $8, %rsp
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  mov (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.realloc(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -64(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.hashmap.rehash(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.return.std.hashmap.grow:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.rehash
  .text
  .type std.hashmap.rehash, @function
std.hashmap.rehash:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
.L.return.std.hashmap.rehash:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.calc_index
  .text
  .type std.hashmap.calc_index, @function
std.hashmap.calc_index:
  push %rbp
  mov %rsp, %rbp
  sub $80, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  mov %rsi, -72(%rbp)
  mov $1, %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $18, %rax
  movzwl (%rax), %eax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  pop %rdi
  add %edi, %eax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $0, %rax
  mov (%rax), %rax
  pop %rdi
  xor %rdx, %rdx
  div %rdi
  pop %rdi
  sub %edi, %eax
  push %rax
  sub $8, %rsp
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  movsxd %eax, %rax
  push %rax
  lea -72(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.algorithm.hash_bytes(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  and %rdi, %rax
  jmp .L.return.std.hashmap.calc_index
.L.return.std.hashmap.calc_index:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.find_pair
  .text
  .type std.hashmap.find_pair, @function
std.hashmap.find_pair:
  push %rbp
  mov %rsp, %rbp
  sub $96, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  mov %rsi, -72(%rbp)
  mov %dl, -73(%rbp)
  mov $8, %rcx
  lea -88(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -88(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -72(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.hashmap.calc_index(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -88(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea .L.str.74(%rip), %rax
  push %rax
  lea std.io.printf(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $18, %rax
  movzwl (%rax), %eax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  pop %rdi
  add %edi, %eax
  push %rax
  lea -88(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  jmp .L.return.std.hashmap.find_pair
.L.return.std.hashmap.find_pair:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.put
  .text
  .type std.hashmap.put, @function
std.hashmap.put:
  push %rbp
  mov %rsp, %rbp
  sub $96, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  mov %rsi, -72(%rbp)
  mov $8, %rcx
  lea -80(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -88(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -96(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -80(%rbp), %rax
  push %rax
  lea -72(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -88(%rbp), %rax
  push %rax
  lea -72(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %rax, (%rdi)
  mov $1, %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $8, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.hashmap.grow(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -96(%rbp), %rax
  push %rax
  sub $8, %rsp
  mov $1, %rax
  push %rax
  lea -80(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.hashmap.find_pair(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -96(%rbp), %rax
  mov (%rax), %rax
  cmp $0, %rax
  je  .L.else.49
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $18, %rax
  movzwl (%rax), %eax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  pop %rdi
  add %edi, %eax
  movsxd %eax, %rax
  push %rax
  lea -72(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -96(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.copy(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.49
.L.else.49:
.L.end.49:
  lea -96(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $0, %rax
  pop %rdi
  add %edi, %eax
  movsxd (%rax), %rax
  push %rax
  lea -96(%rbp), %rax
  mov (%rax), %rax
  movsxd (%rax), %rax
  push %rax
  lea .L.str.75(%rip), %rax
  push %rax
  lea std.io.printf(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.return.std.hashmap.put:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.hashmap.get
  .text
  .type std.hashmap.get, @function
std.hashmap.get:
  push %rbp
  mov %rsp, %rbp
  sub $80, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -64(%rbp)
  mov %rsi, -72(%rbp)
  mov $0, %rax
  push %rax
  lea -72(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.hashmap.find_pair(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  mov %rax, %r15
  xor %rax, %rax
  push %rax
  mov %r15, %rax
  pop %rdi
  cmp %rdi, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.else.50
  mov %r15, %rax
  jmp .L.end.50
.L.else.50:
  mov %r15, %rax
  push %rax
  lea -64(%rbp), %rax
  mov (%rax), %rax
  add $32, %rax
  add $16, %rax
  movzwl (%rax), %eax
  pop %rdi
  add %edi, %eax
.L.end.50:
  jmp .L.return.std.hashmap.get
.L.return.std.hashmap.get:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.io.puts
  .text
  .type std.io.puts, @function
std.io.puts:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov $1, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.io.fputs(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.return.std.io.puts:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.io.fputs
  .text
  .type std.io.fputs, @function
std.io.fputs:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %esi, -20(%rbp)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -20(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea std.io.write(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea .L.str.76(%rip), %rax
  push %rax
  lea -20(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea std.io.write(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.return.std.io.fputs:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.io.printf
  .text
  .type std.io.printf, @function
std.io.printf:
  push %rbp
  mov %rsp, %rbp
  sub $160, %rsp
  mov %rsp, -8(%rbp)
  movl $8, -136(%rbp)
  movl $48, -132(%rbp)
  movq %rbp, -128(%rbp)
  addq $16, -128(%rbp)
  movq %rbp, -120(%rbp)
  addq $-112, -120(%rbp)
  movq %rdi, -112(%rbp)
  movq %rsi, -104(%rbp)
  movq %rdx, -96(%rbp)
  movq %rcx, -88(%rbp)
  movq %r8, -80(%rbp)
  movq %r9, -72(%rbp)
  movsd %xmm0, -64(%rbp)
  movsd %xmm1, -56(%rbp)
  movsd %xmm2, -48(%rbp)
  movsd %xmm3, -40(%rbp)
  movsd %xmm4, -32(%rbp)
  movsd %xmm5, -24(%rbp)
  movsd %xmm6, -16(%rbp)
  movsd %xmm7, -8(%rbp)
  mov %rdi, -152(%rbp)
  lea -136(%rbp), %rax
  push %rax
  lea -152(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.stdout(%rip), %rax
  movsxd (%rax), %rax
  push %rax
  lea std.io.vfprintf(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.return.std.io.printf
.L.return.std.io.printf:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.io.vfprintf
  .text
  .type std.io.vfprintf, @function
std.io.vfprintf:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %edi, -12(%rbp)
  mov %rsi, -24(%rbp)
  mov %rdx, -32(%rbp)
  lea -40(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.fmt.va_format(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -40(%rbp), %rax
  mov (%rax), %rax
  cmp $0, %rax
  je .L.else.51
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -12(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea std.io.write(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.free(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.end.51
.L.else.51:
.L.end.51:
  mov $0, %rax
  jmp .L.return.std.io.vfprintf
.L.return.std.io.vfprintf:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.io.write
  .text
  .type std.io.write, @function
std.io.write:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %edi, -12(%rbp)
  mov %rsi, -24(%rbp)
  mov $0, %rax
  push %rax
  sub $8, %rsp
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.strlen(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -12(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea std.syscall.write(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  cmp %rdi, %rax
  setle %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.52
  jmp .L.return.std.io.write
  jmp .L.end.52
.L.else.52:
.L.end.52:
.L.return.std.io.write:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.mem.alloc
  .text
  .type std.mem.alloc, @function
std.mem.alloc:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov $8, %rcx
  lea -24(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -32(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $1, %rax
  push %rax
  lea std.mem.unfreed_allocs(%rip), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea std.mem.unfreed_allocs(%rip), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  lea -24(%rbp), %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  mov $0, %rax
  movsxd %eax, %rax
  push %rax
  mov $0, %rax
  push %rax
  lea std.MMap.ANONYMOUS(%rip), %rax
  movsxd (%rax), %rax
  push %rax
  lea std.MMap.PRIVATE(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  or %edi, %eax
  push %rax
  lea std.Prot.WRITE(%rip), %rax
  movsxd (%rax), %rax
  push %rax
  lea std.Prot.READ(%rip), %rax
  movsxd (%rax), %rax
  pop %rdi
  or %edi, %eax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  xor %rax, %rax
  push %rax
  lea std.syscall.mmap(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  pop %rcx
  pop %r8
  pop %r9
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea std.mem.MMAP_FAILED(%rip), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.53
  xor %rax, %rax
  jmp .L.return.std.mem.alloc
  jmp .L.end.53
.L.else.53:
.L.end.53:
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  pop %rdi
  imul $8, %rax
  add %rdi, %rax
  jmp .L.return.std.mem.alloc
.L.return.std.mem.alloc:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.mem.realloc
  .text
  .type std.mem.realloc, @function
std.mem.realloc:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov $8, %rcx
  lea -32(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.alloc(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.move(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.free(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -32(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.mem.realloc
.L.return.std.mem.realloc:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.mem.free
  .text
  .type std.mem.free, @function
std.mem.free:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov $8, %rcx
  lea -24(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -32(%rbp), %rdi
  xor %al, %al
  rep stosb
  xor %rax, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.54
  jmp .L.return.std.mem.free
  jmp .L.end.54
.L.else.54:
.L.end.54:
  mov $-1, %rax
  push %rax
  lea std.mem.unfreed_allocs(%rip), %rax
  push %rax
  mov $-1, %rax
  push %rax
  lea std.mem.unfreed_allocs(%rip), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  lea -24(%rbp), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  neg %rax
  pop %rdi
  imul $8, %rax
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.syscall.munmap(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.return.std.mem.free:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.mem.copy
  .text
  .type std.mem.copy, @function
std.mem.copy:
  push %rbp
  mov %rsp, %rbp
  sub $64, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov %rdx, -32(%rbp)
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.ptr_overlap(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  movzx %al, %eax
  cmp $0, %eax
  je  .L.else.55
  mov $1, %rax
  neg %rax
  jmp .L.return.std.mem.copy
  jmp .L.end.55
.L.else.55:
.L.end.55:
  lea -40(%rbp), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -48(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -56(%rbp), %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.begin.56:
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -56(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setb %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.break.56
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -56(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -56(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  movzbl (%rax), %eax
  pop %rdi
  mov %al, (%rdi)
.L.continue.56:
  mov $1, %rax
  push %rax
  lea -56(%rbp), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -56(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  jmp .L.begin.56
.L.break.56:
  mov $0, %rax
  jmp .L.return.std.mem.copy
.L.return.std.mem.copy:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.mem.move
  .text
  .type std.mem.move, @function
std.mem.move:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov %rdx, -32(%rbp)
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -40(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.alloc(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.copy(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.copy(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.free(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -16(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.mem.move
.L.return.std.mem.move:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.mem.ptr_overlap
  .text
  .type std.mem.ptr_overlap, @function
std.mem.ptr_overlap:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov %rdx, -32(%rbp)
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -40(%rbp), %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -48(%rbp), %rax
  push %rax
  lea -24(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setle %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.false.58
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.false.58
  mov $1, %rax
  jmp .L.end.58
.L.false.58:
  xor %rax, %rax
.L.end.58:
  cmp $0, %eax
  jne .L.true.57
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setle %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.false.59
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je .L.false.59
  mov $1, %rax
  jmp .L.end.59
.L.false.59:
  xor %rax, %rax
.L.end.59:
  cmp $0, %eax
  jne .L.true.57
  xor %rax, %rax
  jmp .L.end.57
.L.true.57:
  mov $1, %rax
.L.end.57:
  jmp .L.return.std.mem.ptr_overlap
.L.return.std.mem.ptr_overlap:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.string.init
  .text
  .type std.string.init, @function
std.string.init:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov $8, %rcx
  lea -32(%rbp), %rdi
  xor %al, %al
  rep stosb
  xor %rax, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  cmp %rdi, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.60
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  mov $16, %rax
  push %rax
  lea std.mem.alloc(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  mov $1, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  push %rax
  mov $0, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  jmp .L.end.60
.L.else.60:
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -40(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.strlen(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  mov $1, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $16, %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  add %rdi, %rax
  movsxd %eax, %rax
  push %rax
  lea std.mem.alloc(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  lea std.c_str.copy(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.end.60:
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  jmp .L.return.std.string.init
.L.return.std.string.init:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.string.free
  .text
  .type std.string.free, @function
std.string.free:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.get_data(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  push %rax
  lea std.mem.free(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
.L.return.std.string.free:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.string.get_data
  .text
  .type std.string.get_data, @function
std.string.get_data:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  neg %rax
  pop %rdi
  imul $16, %rax
  add %rdi, %rax
  jmp .L.return.std.string.get_data
.L.return.std.string.get_data:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.string.has_space
  .text
  .type std.string.has_space, @function
std.string.has_space:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -16(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  cmp %rdi, %rax
  setb %al
  movzb %al, %rax
  jmp .L.return.std.string.has_space
.L.return.std.string.has_space:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.string.concat
  .text
  .type std.string.concat, @function
std.string.concat:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov $8, %rcx
  lea -32(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -40(%rbp), %rdi
  xor %al, %al
  rep stosb
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -16(%rbp), %rax
  mov (%rax), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.get_data(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -40(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -16(%rbp), %rax
  mov (%rax), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.size(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -48(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.strlen(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  push %rax
  mov $16, %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  add %rdi, %rax
  movsxd %eax, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.realloc(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  lea -24(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  lea std.c_str.copy(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -40(%rbp), %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.return.std.string.concat:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.string.append
  .text
  .type std.string.append, @function
std.string.append:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %sil, -17(%rbp)
  mov $8, %rcx
  lea -32(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  lea -16(%rbp), %rax
  mov (%rax), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.get_data(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  pop %rdi
  sub %rdi, %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.string.has_space(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  movzx %al, %eax
  cmp $0, %eax
  sete %al
  movzx %al, %rax
  cmp $0, %eax
  je  .L.else.61
  lea -32(%rbp), %rax
  push %rax
  sub $8, %rsp
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  mov $2, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  mov (%rax), %rax
  pop %rdi
  imul %rdi, %rax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  push %rax
  mov $16, %rax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  add %rdi, %rax
  movsxd %eax, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.mem.realloc(%rip), %rax
  pop %rdi
  pop %rsi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $8, %rsp
  pop %rdi
  mov %rax, (%rdi)
  jmp .L.end.61
.L.else.61:
.L.end.61:
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  mov $1, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  sub %rdi, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  lea -17(%rbp), %rax
  movsbl (%rax), %eax
  pop %rdi
  mov %al, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  mov %al, (%rdi)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  push %rax
  mov $0, %rax
  pop %rdi
  imul $1, %rax
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
.L.return.std.string.append:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.string.size
  .text
  .type std.string.size, @function
std.string.size:
  push %rbp
  mov %rsp, %rbp
  sub $16, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  lea -16(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.c_str.strlen(%rip), %rax
  pop %rdi
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.return.std.string.size
.L.return.std.string.size:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.syscall.write
  .text
  .type std.syscall.write, @function
std.syscall.write:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %edi, -12(%rbp)
  mov %rsi, -24(%rbp)
  mov %rdx, -32(%rbp)
  mov -12(%rbp), %rdi;mov -24(%rbp), %rsi;mov -32(%rbp), %rdx;mov std.Syscall.WRITE(%rip), %rax;syscall
.L.return.std.syscall.write:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.syscall.mmap
  .text
  .type std.syscall.mmap, @function
std.syscall.mmap:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov %edx, -28(%rbp)
  mov %ecx, -32(%rbp)
  mov %r8d, -36(%rbp)
  mov %r9, -48(%rbp)
  mov -16(%rbp), %rdi;mov -24(%rbp), %rsi;mov -28(%rbp), %rdx;mov -32(%rbp), %r10;mov -36(%rbp), %r8;mov -48(%rbp), %r9;mov std.Syscall.MMAP(%rip), %rax;syscall
.L.return.std.syscall.mmap:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.syscall.munmap
  .text
  .type std.syscall.munmap, @function
std.syscall.munmap:
  push %rbp
  mov %rsp, %rbp
  sub $32, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -16(%rbp)
  mov %rsi, -24(%rbp)
  mov -16(%rbp), %rdi;mov -24(%rbp), %rsi;mov std.Syscall.MUNMAP(%rip), %rax;syscall
.L.return.std.syscall.munmap:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.va.__mem
  .text
  .type std.va.__mem, @function
std.va.__mem:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -32(%rbp)
  mov %esi, -36(%rbp)
  mov %edx, -40(%rbp)
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -48(%rbp), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  mov (%rax), %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -40(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  mov $8, %rax
  pop %rdi
  cmp %edi, %eax
  setl %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.62
  lea -48(%rbp), %rax
  push %rax
  mov $16, %rax
  push %rax
  mov $16, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  mov $15, %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  cqo
  idiv %rdi
  pop %rdi
  imul %edi, %eax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  jmp .L.end.62
.L.else.62:
.L.end.62:
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -48(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea -36(%rbp), %rax
  movsxd (%rax), %rax
  pop %rdi
  add %edi, %eax
  push %rax
  mov $7, %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  cqo
  idiv %rdi
  pop %rdi
  imul %edi, %eax
  movsxd %eax, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -48(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.va.__mem
.L.return.std.va.__mem:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.va.__gp
  .text
  .type std.va.__gp, @function
std.va.__gp:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -32(%rbp)
  mov %esi, -36(%rbp)
  mov %edx, -40(%rbp)
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  movsxd (%rax), %rax
  push %rax
  mov $48, %rax
  pop %rdi
  cmp %edi, %eax
  setbe %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.63
  lea -40(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -36(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.return.std.va.__gp
  jmp .L.end.63
.L.else.63:
.L.end.63:
  lea -48(%rbp), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  movsxd (%rax), %rax
  mov %eax, %eax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $0, %rax
  movsxd (%rax), %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %eax, (%rdi)
  lea -48(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.va.__gp
.L.return.std.va.__gp:
  mov %rbp, %rsp
  pop %rbp
  ret
  .globl std.va.__fp
  .text
  .type std.va.__fp, @function
std.va.__fp:
  push %rbp
  mov %rsp, %rbp
  sub $48, %rsp
  mov %rsp, -8(%rbp)
  mov %rdi, -32(%rbp)
  mov %esi, -36(%rbp)
  mov %edx, -40(%rbp)
  mov $8, %rcx
  lea -48(%rbp), %rdi
  xor %al, %al
  rep stosb
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  movsxd (%rax), %rax
  push %rax
  mov $112, %rax
  pop %rdi
  cmp %edi, %eax
  setbe %al
  movzb %al, %rax
  cmp $0, %eax
  je  .L.else.64
  lea -40(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -36(%rbp), %rax
  movsxd (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  push %rax
  lea std.va.__mem(%rip), %rax
  pop %rdi
  pop %rsi
  pop %rdx
  mov %rax, %r10
  mov $0, %rax
  call *%r10
  add $0, %rsp
  jmp .L.return.std.va.__fp
  jmp .L.end.64
.L.else.64:
.L.end.64:
  lea -48(%rbp), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $16, %rax
  mov (%rax), %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  movsxd (%rax), %rax
  mov %eax, %eax
  pop %rdi
  add %rdi, %rax
  pop %rdi
  mov %rax, (%rdi)
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  push %rax
  mov $8, %rax
  push %rax
  lea -32(%rbp), %rax
  mov (%rax), %rax
  add $4, %rax
  movsxd (%rax), %rax
  pop %rdi
  add %edi, %eax
  pop %rdi
  mov %eax, (%rdi)
  lea -48(%rbp), %rax
  mov (%rax), %rax
  jmp .L.return.std.va.__fp
.L.return.std.va.__fp:
  mov %rbp, %rsp
  pop %rbp
  ret