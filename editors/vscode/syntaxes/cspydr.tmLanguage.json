{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "CSpydr",
	"fileTypes": [
		"cspydr"
	],
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#function"
		},
		{
			"include": "#operator-overload"
		},
		{
			"include": "#typedef"
		},
		{
			"include": "#extern-block"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#preprocessor"
		},
		{
			"include": "#statements"
		},
		{
			"include": "#variable-definition"
		},
		{
			"include": "#macro-call"
		}
	],
	"repository": {
		"types": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#macro-call"
				},
				{
					"name": "storage.type.pointer.cspydr",
					"match": "(&)",
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"name": "storage.type.va-list.cspydr",
					"match":"(\\.\\.\\.)"
				},
				{
					"name": "storage.modifier.const.cspydr",
					"match": "\\bconst\\b"
				},
				{
					"name": "storage.type.primitive.cspydr",
					"match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64|f32|f64|f80|bool|char|void|typeof)\\b"
				},
				{
					"name": "meta.type.struct.cspydr",
					"begin": "\\b(struct|union)\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.struct.cspydr"
						},
						"2": {
							"name": "punctuation.begin.brace.cspydr"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.brace.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#member-list"
						}
					]
				},
				{
					"name": "meta.type.enum.cspydr",
					"begin": "\\b(enum)\\s*(\\{)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.enum.cspydr"
						},
						"2": {
							"name": "punctuation.begin.brace.cspydr"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.brace.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#enum-members"
						}
					]
				},
				{
					"name": "meta.type.fn.cspydr",
					"match": "\\b(fn)\\s*",
					"captures": {
						"1": {
							"name": "storage.type.fn.cspydr"
						}
					}
				},
				{
					"name": "meta.type.fn.return-type.cspydr",
					"begin": "(?<=fn\\s*?)(\\<)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.bracket.cspydr"
						}
					},
					"end": "(\\>)",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.bracket.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"name": "meta.type.fn.arguments.cspydr",
					"begin": "(?<=fn.*?)(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.paren.cspydr"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.paren.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#type-list"
						}
					]
				},
				{
					"name": "meta.type.fn.arguments.cspydr",
					"begin": "(?<=fn.*?)(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.paren.cspydr"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.paren.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#type-list"
						}
					]
				},
				{
					"name": "meta.type.array.cspydr",
					"begin": "(\\'[cC])?\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.c-array.cspydr"
						},
						"2": {
							"name": "punctuation.begin.bracket.cspydr"
						}
					},
					"end": "(\\])",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.bracket.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#macro-call"
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"name": "meta.index.namespace.cspydr",
          			"match": "(::)?\\s*((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(::)",
          			"captures": {
						"1": {
							"name": "punctuation.double-colon.cspydr"
					  	},
          			  	"2": {
          			  		"name": "entity.name.namespace.cspydr"
          			  	},
          			  	"3": {
          			  	  	"name": "punctuation.double-colon.cspydr"
          			  	}
          			}
				},
				{
					"name": "meta.type.closure.cspydr",
					"begin": "(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.paren.cspydr"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.paren.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"name": "meta.type.typeof.cspydr",
					"match": "\\btypeof\\b",
					"captures": {
						"1": {
							"name": "storage.modifier.typeof.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				{
					"name": "entity.name.type.cspydr",
					"match": "\\b(?:\\w|_)(?:\\w|_|[0-9])*\\b"
				}
			]
		},
		"type-list": {
			"patterns": [
				{
					"name": "punctuation.comma.cspydr",
					"match": ","
				},
				{
					"include": "#types"
				}
			]
		},
		"typedef": {
			"patterns": [
				{
					"name": "meta.type.declaration.cspydr",
					"match": "(\\btype)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)",
					"captures": {
						"1": {
							"name": "keyword.type.cspydr"
						},
						"2": {
							"name": "entity.name.type.cspydr"
						},
						"3": {
							"name": "punctuation.colon.cspydr"
						}
					}
				},
				{
					"name": "meta.type.type.cspydr",
					"begin": "(?<=type.*?)(:)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.colon.cspydr"
						}
					},
					"end": "(;)",
					"endCaptures": {
						"1": {
							"name": "punctuation.semicolon.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"function": {
			"patterns": [
				{
					"name": "meta.function.declaration.cspydr",
					"match": "(?:\\bextern\\s+)?(\\bfn)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)",
					"captures": {
						"1": {
							"name": "keyword.function.cspydr"
						},
						"2": {
							"name": "entity.name.function.cspydr"
						},
						"3": {
							"name": "punctuation.begin.bracket"
						}
					}
				},
				{
					"name": "meta.function.argument-list.cspydr",
					"begin": "(?<=fn.*?)(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.bracket.cspydr"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.bracket.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#argument-list"
						}
					]
				},
				{
					"name": "meta.function.return-type.cspydr",
					"begin": "(?<=\\)\\s*)\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.colon.cspydr"
						}
					},
					"end": "(?=\\{|$)",
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"name": "meta.function.body.cspydr",
					"begin": "(?<=fn.*?)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.brace.cspydr"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.brace.cspydr"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"operator-overload": {
			"patterns": [
				{
					"name": "keyword.function.cspydr",
					"match": "\\b(operator)\\b" 
				}
			]
		},
		"argument-list": {
			"patterns": [
				{
					"name": "meta.argument.cspydr",
					"begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "variable.parameter.cspydr"
						},
						"2": {
							"name": "punctuation.colon.cspydr"
						}
					},
					"end": "$|(,)|(?:(?=\\)))",
					"endCaptures": {
						"1": {
							"name": "punctuation.comma.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"member-list": {
			"patterns": [
				{
					"name": "meta.field.cspydr",
					"begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(:)",
					"beginCaptures": {
						"1": {
							"name": "variable.field.cspydr"
						},
						"2": {
							"name": "punctuation.colon.cspydr"
						}
					},
					"end": "$|(,)|(?:(?=\\}))",
					"endCaptures": {
						"1": {
							"name": "punctuation.comma.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"enum-members": {
			"patterns": [
				{
					"name": "meta.field.cspydr",
					"begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)",
					"beginCaptures": {
						"1": {
							"name": "variable.field.cspydr"
						}
					},
					"end": "$|(,)|(?:(?=\\}))",
					"endCaptures": {
						"1": {
							"name": "punctuation.comma.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"namespace": {
			"patterns": [
				{
					"name": "meta.namespace.cspydr",
					"match": "\\b(namespace)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)",
					"captures": {
						"1": {
							"name": "keyword.namespace.cspydr"
						},
						"2": {
							"name": "entity.name.namespace.cspydr"
						}
					}
				},
				{
					"name": "meta.block.cspydr",
					"begin": "(?<=(?:namespace).*?)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.brace.cspydr"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.brace.cspydr"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"extern-block": {
			"name": "meta.extern.cspydr",
			"match": "\\b(extern)\\s+(\"[cC]\")?",
			"captures": {
				"1": {
					"name": "keyword.extern.cspydr"
				},
				"2": {
					"name": "constant.character.escape.cspydr"
				}
			},
			"patterns": [
				{
					"name": "meta.extern-body.cspydr",
					"begin": "(?<=extern.*?)\\{",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.brace.cspydr"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.brace.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#function"
						}
					]
				},
				{
					"include": "#function"	
				}
			]
		},
		"variable-definition": {
			"patterns": [
				{
					"name": "meta.variable.definition.cspydr",
					"match": "\\b(let|const)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(=)?",
					"captures": {
						"1": {
							"name": "keyword.let.cspydr"
						},
						"2": {
							"name": "variable.other.cspydr"
						},
						"3": {
							"name": "keyword.operator.assignment.cspydr"
						}
					}
				},
				{
					"name": "meta.variable.definition.type.cspydr",
					"begin": "(?<=(let|const).*?)(:)",
					"beginCaptures": {
						"2": {
							"name": "punctuation.colon.cspydr"
						}
					},
					"end": "((\\=)|(\\;))",
					"endCaptures": {
						"1": {
							"name": "punctuation.semicolon.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"name": "meta.variable.initializer.cspydr",
					"begin": "(?<=(let|const).*?)(=)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.operator.assignment.cspydr"
						}
					},
					"end": "(;)",
					"endCaptures": {
						"1": {
							"name": "punctuation.semicolon.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"preprocessor": {
			"patterns": [
				{
					"name": "meta.import.cspydr",
					"begin": "\\b(import)\\s+",
					"beginCaptures": {
						"1": {
							"name": "keyword.import.cspydr"
						}
					},
					"end": "(;)",
					"endCaptures": {
						"1": {
							"name": "punctuation.semicolon.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#string"
						}
					]
				},
				{
					"include": "#macro"
				}
			]
		},
		"macro": {
			"patterns": [
				{
					"name": "meta.macro.definition.cspydr",
					"match": "(\\bmacro)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)",
					"captures": {
						"1": {
							"name": "keyword.macro.cspydr"
						},
						"2": {
							"name": "entity.name.function.cspydr"
						}
					}
				},
				{
					"name": "meta.macro.argument-list.cspydr",
					"begin": "(?<=macro.*?)(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.bracket.cspydr"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.bracket.cspydr"
						}
					},
					"patterns": [
						{
							"name": "meta.argument.cspydr",
							"match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*($|(,)|(?:(?=\\))))",
							"captures": {
								"1": {
									"name": "variable.parameter.cspydr"
								},
								"2": {
									"name": "punctuation.comma.cspydr"
								}
							}
						}
					]
				},
				{
					"name": "meta.macro.body.cspydr",
					"begin": "(?<=macro.*?)(\\{)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.begin.brace.cspydr"
						}
					},
					"end": "(\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.brace.cspydr"
						}
					},
					"patterns": [
						{
							"include": "$self"
						},
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"macro-call": {
			"patterns": [
				{
					"name": "meta.index.macro.cspydr",
					"match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)(!)",
					"captures": {
					  	"1": {
							"name": "entity.name.function.call.cspydr"
					  	},
						"2": {
							"name": "entity.name.function.call.cspydr"
						}
					}
				},
				{
					"name": "meta.call.cspydr",
					"begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)(!)\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.call.cspydr"
						},
						"2": {
							"name": "entity.name.function.call.cspydr"
						},
						"3": {
							"name": "punctuation.begin.paren.cspydr"
						}
					},
					"end": "(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.end.paren.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#all-parameter-list"
						}
					]
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#control"
				},
				{
					"include": "#using"
				},
				{
					"include": "#variable-definition"
				},
				{
					"include": "#block"
				},
				{
					"include": "#expressions"
				},
				{
					"name": "punctuation.semicolon.cspydr",
					"match": "(;)"
				}
			]
		},
		"control": {
			"patterns": [
				{
					"name": "meta.control.cspydr",
					"match": "\\b(if|else|while|for|loop|do|defer|match|unless|asm|with)\\b(?=.*?(?:\\{|$))",
					"captures": {
						"1": {
							"name": "keyword.control.block.cspydr"
						}
					}
				},
				{
					"name": "keyword.control.cspydr",
					"match": "\\b(ret|continue|break|noop)\\b"
				},
				{
					"name": "keyword.control.cspydr",
					"match": "(\\<\\-)"
				}
			]
		},
		"using": {
			"patterns": [
				{
					"name": "meta.using.cspydr",
					"begin": "\\b(using)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.using.cspydr"
						}
					},
					"end": "(;)|(\\bfor)",
					"endCaptures": {
						"1": {
							"name": "punctuation.semicolon.cspydr"
						}
					},
					"patterns": [
						{
							"name": "meta.using.namespace.cspydr",
							"begin": "\\b((?:\\w|_)(?:\\w|_|[0-9]|::)*)",
							"beginCaptures": {
								"1": {
									"name": "entity.name.namespace.cspydr"
								}
							},
							"end": "$|(,)|(?:(?=(;|for)))",
							"endCaptures": {
								"1": {
									"name": "punctuation.comma.cspydr"
								}
							}
						}
					]
				}
			]
		},
		"block": {
			"name": "meta.block.cspydr",
			"begin": "(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.begin.brace.cspydr"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.end.brace.cspydr"
				}
			},
			"patterns": [
				{
					"include": "#statements"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#string"
				},
				{
					"include": "#char"
				},
				{
					"include": "#constant"
				},
				{
					"include": "#number"
				},
				{
					"include": "#macro-call"
				},
				{
					"include": "#call"
				},
				{
					"include": "#infix-call"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#indexing"
				},
				{
					"include": "#closure"
				},
				{
					"include": "#tuple"
				},
				{
					"include": "#lambda"
				},
				{
					"include": "#array-literal"
				},
				{
					"include": "#block"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.cspydr",
			"begin": "(\")",
			"beginCaptures": {
				"1": {
					"name": "punctuation.begin.quote.double.cspydr"
				}
			},
			"end": "(\")",
			"endCaptures": {
				"1": {
					"name": "punctuation.end.quoted.double.cspydr"
				}
			},
			"patterns": [
				{
					"name": "constant.character.escape.cspydr",
					"match": "\\\\."
				}
			]
		},
		"char": {
			
			"patterns": [
				{
					"name": "string.quoted.single.cspydr",
					"match": "(')(\\\\.)(')",
					"captures": {
						"1": {
							"name": "punctuation.begin.quote.single.cspydr"
						},
						"2": {
							"name": "constant.character.escape.cspydr"
						},
						"3": {
							"name": "punctuation.end.quote.single.cspydr"
						}
					}
				},
				{
					"name": "string.quoted.single.cspydr",
					"match": "(')(.)(')",
					"captures": {
						"1": {
							"name": "punctuation.begin.quote.single.cspydr"
						},
						"2": {
							"name": "string.quoted.single.cspydr"
						},
						"3": {
							"name": "punctuation.end.quote.single.cspydr"
						}
					}
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"match": "\\b(?:true|false|nil)\\b",
					"name": "constant.language.cspydr"
				},
				{
					"match": "(\\\\$)",
					"name": "constant.other.cspydr"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"name": "constant.numeric.hex.cspydr",
					"match": "\\b(?<!\\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$)",
          			"captures": {
          			  	"1": {
          			  	  	"name": "storage.type.numeric.cspydr"
          			  	}
          			}
				},
				{
					"name": "constant.numeric.binary.cspydr",
					"match": "\\b(?<!\\$)0(?:b|B)[01][01_]*\\b(?!\\$)",
          			"captures": {
          			  	"1": {
          			  	  	"name": "storage.type.numeric.cspydr"
          			  	}
          			}
				},
				{
					"name": "constant.numeric.octal.cspydr",
					"match": "\\b(?<!\\$)0(?:o|O)[0-7][0-7_]*\\b(?!\\$)",
          			"captures": {
          			  	"1": {
          			  	  	"name": "storage.type.numeric.cspydr"
          			  	}
          			}
				},
				{
					"name": "constant.numeric.hex.cspydr",
					"match": "\\b(?<!\\$)[0-9][0-9_]*\\b(?!\\$)",
          			"captures": {
          			  	"1": {
          			  	  	"name": "storage.type.numeric.cspydr"
          			  	}
          			}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.control.block.cspydr",
					"match": "\\b(if|else)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.block.cspydr"
						}
					}
				},
				{
					"name": "keyword.control.block.cspydr",
					"match": "\\b(len)\\b",
					"captures": {
						"1": {
							"name": "keyword.control.block.cspydr"
						}
					}
				},
				{
					"include": "#cast"
				},
				{
					"include": "#sizeof"
				},
				{
					"name": "keyword.operator.comparison.cspydr",
					"match": "(((>|<)(=)?)|==|!=)"
				},
				{
					"name": "keyword.operator.logic.cspydr",
					"match": "(\\!|\\&\\&|\\|\\|)"
				},
				{
					"name": "keyword.operator.assignment.cspydr",
					"match": "(=)"
				},
				{
					"name": "keyword.operator.arithmetic.cspydr",
					"match": "(\\+|\\-|\\*|\\/|\\^|\\~|%)(=)?"
				},
				{
					"name": "keyword.operator.bitwise.cspydr",
					"match": "(\\&|\\||\\^|\\<\\<|\\>\\>)(=)?"
				},
				{
					"name": "keyword.operator.arrow.cspydr",
					"match": "(\\=\\>)"
				},
				{
					"name": "keyword.operator.range.cspydr",
					"match": "(\\.\\.\\.|\\.\\.)"
				},
				{
					"name": "punctuation.comma.cspydr",
					"match": "(,)"
				}
			]
		},
		"closure": {
			"name": "meta.closure.cspydr",
			"begin": "(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.begin.paren.cspydr"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.end.paren.cspydr"
				}
			},
			"patterns": [
				{
					"include": "#expressions"
				}
			]
		},
		"tuple": {
			"name": "meta.tuple.cspydr",
			"begin": "(\\{)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.begin.brace.cspydr"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.end.brace.cspydr"
				}
			},
			"patterns": [
				{
					"include": "#expressions"
				}
			]
		},
		"call": {
			"name": "meta.call.cspydr",
			"begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.call.cspydr"
				},
				"2": {
					"name": "punctuation.begin.paren.cspydr"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.end.paren.cspydr"
				}
			},
			"patterns": [
				{
					"include": "#parameter-list"
				}
			]
		},
		"infix-call": {
			"patterns": [
				{
					"name": "entity.name.function.call.cspydr",
					"begin": "`",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.call.cspydr"
						}
					},
					"end": "((?:\\w|_)(?:\\w|_|[0-9])*)\\s*`",
					"endCaptures": {
						"1": {
							"name": "entity.name.function.call.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#indexing"
						}
					]
				}
			]
		},
		"parameter-list": {
			"patterns": [
				{
					"name": "punctuation.comma.cspydr",
					"match": "(,)"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"all-parameter-list": {
			"patterns": [
				{
					"name": "punctuation.comma.cspydr",
					"match": "(,)"
				},
				{
					"include": "#types"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"indexing": {
			"patterns": [
				{
					"name": "meta.index.struct.cspydr",
          			"match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(\\.)",
          			"captures": {
          			  	"1": {
          			  		"name": "variable.other.cspydr"
          			  	},
          			  	"2": {
          			  	  	"name": "punctuation.period.cspydr"
          			  	}
          			}
				},
				{
					"name": "meta.index.namespace.cspydr",
          			"match": "(::)?\\s*((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(::)",
          			"captures": {
						"1": {
							"name": "punctuation.double-colon.cspydr"
					  	},
          			  	"2": {
          			  		"name": "entity.name.namespace.cspydr"
          			  	},
          			  	"3": {
          			  	  	"name": "punctuation.double-colon.cspydr"
          			  	}
          			}
				},
				{
					"name": "meta.index.other.cspydr",
					"match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\b",
					"captures": {
					  	"1": {
							"name": "variable.other.cspydr"
					  	},
						"2": {
							"name": "variable.other.cspydr"
						}
					}
				},
				{
					"name": "meta.index.other.cspydr",
					"match": "(\\.)",
					"captures": {
						"1": {
							"name": "punctuation.period.cspydr"
						}
					}
				}
			]
		},
		"lambda": {
			"patterns": [
				{
					"name": "meta.lambda.definition.cspydr",
					"begin": "(\\|)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.colon.cspydr"
						}
					},
					"end": "(\\|)",
					"endCaptures": {
						"1": {
							"name": "punctuation.colon.cspydr"
						}
					},
					"patterns": [
						{
							"include": "#argument-list"
						}
					]
				}
			]	
		},
		"cast": {
			"name": "meta.cast.cspydr",
			"match": "((?<!\\:)\\:(?!\\:))\\s*((&|\\s)*?((?:(struct|union|typeof)\\{.*\\})|((?:\\w|_)(?:\\s|\\w|_|[0-9])*)))",
			"captures": {
				"1": {
					"name": "punctuation.colon.cspydr"
				},
				"2": {
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			}
		},
		"sizeof": {
			"name": "meta.sizeof.cspydr",
			"match": "\\b(sizeof)\\s*((&|\\s)*?((?:(struct|union|typeof|fn)\\{.*\\})|((?:\\w|_)(?:\\s|\\w|_|[0-9])*)))",
			"captures": {
				"1": {
					"name": "keyword.operator.sizeof.cspydr"
				},
				"2": {
					"patterns": [
						{
							"include": "#types"
						}
					]
				}
			}
		},
		"array-literal": {
			"name": "meta.array-literal.cspydr",
			"begin": "(\\[)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.begin.bracket.cspydr"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.end.bracket.cspydr"
				}
			},
			"patterns": [
				{
					"include": "#parameter-list"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.cspydr",
					"begin": "#\\[",
					"end": "\\]#",
					"patterns": [{
						"name": "punctuation.definition.comment.cspydr",
						"match": "\\\\."
					}]
				},
				{
					"name": "comment.line.cspydr",
					"match": "(#).*$\\n?",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.cspydr"
						}
					}
				}
			]
		}
	},
	"scopeName": "source.csp"
}
