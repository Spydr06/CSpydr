import "syscall.csp";
import "string.csp";
import "types.csp";
import "utils.csp";
import "fmt.csp";

macro stdin  {0}
macro stdout {1}
macro stderr {2}

macro write(fd, v) {
    (
        if type::((typeof (v)) == i8) ||
            type::((typeof (v)) == i16) ||
            type::((typeof (v)) == i32) ||
            type::((typeof (v)) == i64)
        => ::std::io::write_int(fd, (v): i64)
        else if type::((typeof (v)) == u8) ||
            type::((typeof (v)) == u16) ||
            type::((typeof (v)) == u32) ||
            type::((typeof (v)) == u64)
        => ::std::io::write_uint(fd, (v): u64)
        else if type::((typeof (v)) == &char) ||
            type::((typeof (v)) == char[])
        => ::std::io::write(fd, (v))
        else
        ::std::io::write_ptr(fd, (v)) 
    )
}

namespace std {
    type Stat: struct {
        dev: dev_t,         # Device
        ino: ino_t,         # File serial number
        mode: mode_t,       # File mode
        nlink: nlink_t,     # Link count
        uid: uid_t,         # User ID of the file's owner
        gid: gid_t,         # Group ID of the file's owner
        rdev: dev_t,        # Device number, if device
        size: Offset,        # Sote of the file (in bytes)
        blksize: blksize_t, # Optimal blocksize for IO
        blocks: blkcnt_t,   # Number 512-byte blocks allocated
        atime: TimeVal,
        atimensec: u64,
        mtime: TimeVal,
        mtimensec: u64,
        ctime: TimeVal,
        ctimensec: u64,
        __glibc_reserved: u64 'c[3]
    };

    type PollFd: struct {
        fd: i32,
        events: i16,
        revents: i16
    };

    type IOVec: struct {
        iov_base: &void,
        iov_len: usize
    };

    type FLock: struct {
        l_type: i16,
        l_whence: i16,
        l_start: Offset,
        l_len: Offset,
        l_pid: pid_t
    };

    type Offset: i64;

    const stdin: i32 = stdin!;
    const stdout: i32 = stdout!;
    const stderr: i32 = stdout!;

    namespace io {
        const O_RDONLY: i32   = 0;
        const O_WRONLY: i32   = 1;
        const O_RDWR: i32     = 2;
        const O_CREAT: i32    = 64;
        const O_EXEC: i32     = 2097152;
        const O_TTY_INIT: i32 = 0;
        const O_SEARCH: i32   = 2097152;
        const O_PATH: i32     = 2097152;
        const O_DIRECTORY: i32 = 0o200000;
        const O_CLOEXEC: i32 = 0o2000000;

        const F_OK: i32    = 0;
        const R_OK: i32    = 4;
        const W_OK: i32    = 2;
        const X_OK: i32    = 1;
        const F_ULOCK: i32 = 0;
        const F_LOCK: i32  = 1;
        const F_TLOCK: i32 = 2;
        const F_TEST: i32  = 3;

        const F_SETLEASE: i32   = 1024;
        const F_GETLEASE: i32   = 1025;
        const F_NOTIFY: i32     = 1026;
        const F_CANCELLK: i32   = 1029;
        const F_SETPIPE_SZ: i32	= 1031;
        const F_GETPIPE_SZ: i32	= 1032;
        const F_ADD_SEALS: i32  = 1033;
        const F_GET_SEALS: i32  = 1034;
        
        const F_SEAL_SEAL: i32         = 0x0001;
        const F_SEAL_SHRINK: i32       = 0x0002;
        const F_SEAL_GROW: i32	       = 0x0004;
        const F_SEAL_WRITE: i32	       = 0x0008;
        const F_SEAL_FUTURE_WRITE: i32 = 0x0010;
        
        const F_GET_RW_HINT: i32      = 1035;
        const F_SET_RW_HINT: i32      = 1036;
        const F_GET_FILE_RW_HINT: i32 = 1037;
        const F_SET_FILE_RW_HINT: i32 = 1038;

        const F_DUPFD: i32 = 0;
        const F_GETFD: i32 = 1;
        const F_SETFD: i32 = 2;
        const F_GETFL: i32 = 3;
        const F_SETFL: i32 = 4;

        const FD_CLOEXEC: i32 = 1;
        
        const RWF_WRITE_LIFE_NOT_SET: i32 = 0;
        const RWH_WRITE_LIFE_NONE: i32	  = 1;
        const RWH_WRITE_LIFE_SHORT: i32	  = 2;
        const RWH_WRITE_LIFE_MEDIUM: i32  = 3;
        const RWH_WRITE_LIFE_LONG: i32	  = 4;
        const RWH_WRITE_LIFE_EXTREME: i32 = 5;
        
        const DN_ACCESS: i32 = 0x00000001;
        const DN_MODIFY: i32 = 0x00000002;
        const DN_CREATE: i32 = 0x00000004;
        const DN_DELETE: i32 = 0x00000008;
        const DN_RENAME: i32 = 0x00000010;
        const DN_ATTRIB: i32 = 0x00000020;
        const DN_MULTISHOT: i32 = 0x80000000;

        const LOCK_SH: i32 = 1;
        const LOCK_EX: i32 = 2;
        const LOCK_NB: i32 = 4;
        const LOCK_UN: i32 = 8;

        const L_SET: i32 = 0;
        const L_INCR: i32 = 1;
        const L_XTND: i32 = 2;
        
        const EOF: char = '\0';

        namespace color {
            const RESET: char[5] = [27: char, '[', '0', 'm', '\0'];
            const BOLD: char[5] =  [27: char, '[', '1', 'm', '\0'];
              
            const BLACK: char[6] =   [27: char, '[', '3', '0', 'm', '\0'];
            const RED: char[6] =     [27: char, '[', '3', '1', 'm', '\0'];
            const GREEN: char[6] =   [27: char, '[', '3', '2', 'm', '\0'];
            const YELLOW: char[6] =  [27: char, '[', '3', '3', 'm', '\0'];
            const BLUE: char[6] =    [27: char, '[', '3', '4', 'm', '\0'];
            const MAGENTA: char[6] = [27: char, '[', '3', '5', 'm', '\0'];
            const CYAN: char[6] =    [27: char, '[', '3', '6', 'm', '\0'];
            const WHITE: char[6] =   [27: char, '[', '3', '7', 'm', '\0'];
        }

        fn puts(str: &const char)  fputs(str, stdout!);
        fn putc(c: char)           fputc(c, stdout!);
        fn eputs(str: &const char) fputs(str, stderr!);
        fn eputc(c: char)          fputc(c, stderr!);

        fn getc(): char 
            ret fgetc(stdin!);

        fn fputs(str: &const char, fd: i32)
        {
            write(fd, str);
            write(fd, "\n");
        }

        fn fputc(c: char, fd: i32)
        {
            syscall::write(fd, &c, 1);
        }

        fn fgetc(fd: i32): char
        {
            let c = '\0';
            syscall::read(fd, &c, 1);
            <- c;
        }

        fn newline()
            syscall::write(stdout, "\n", 1);

        fn close(fd: i32)
        {
            syscall::close(fd); # error handling
        }

        fn printf(fmt: &const char, args: ...): i32
            <- vfprintf(stdout, fmt, &args);

        fn eprintf(fmt: &const char, args: ...): i32
            <- vfprintf(stderr, fmt, &args);

        fn fprintf(fd: i32, fmt: &const char, args: ...): i32
            <- vfprintf(fd, fmt, &args);

        fn vfprintf(fd: i32, fmt: &const char, args: &VAList): i32
        {
            using std::fmt;

            with formatted = va_format(fmt, args): &void
                write(fd, formatted);
            
            <- 0;
        }

        fn write(fd: i32, buf: &const char) 
        {
            if syscall::write(fd, buf, c_str::strlen(buf)) <= 0
            {
                # todo: fail assertion
                ret;
            }
        }

        fn writeln(fd: i32, buf: &const char)
        {
            if syscall::write(fd, buf, c_str::strlen(buf) + 1) <= 0
            {
                # todo: fail assertion
                ret;
            }

            if syscall::write(fd, "\n", 2) <= 0
            {
                # todo: fail assertion
                ret;
            }
        }

        fn write_int(fd: i32, int: i64)
        {
            let buf: char 'c[32];
            memory::zero(buf, sizeof char * len buf);

            c_str::from_int(int, buf, 10);
            write(fd, buf);
        }

        fn sync() syscall::sync();

        const TCGETS: i32 		= 0x5401;
        const TCSETS: i32 		= 0x5402;
        const TCSETSW: i32    	= 0x5403;
        const TCSETSF: i32    	= 0x5404;
        const TCGETA: i32 		= 0x5405;
        const TCSETA: i32 		= 0x5406;
        const TCSETAW: i32    	= 0x5407;
        const TCSETAF: i32      = 0x5408;
        const TCSBRK: i32 		= 0x5409;
        const TCXONC: i32 		= 0x540A;
        const TCFLSH: i32 		= 0x540B;
        const TIOCEXCL: i32   	= 0x540C;
        const TIOCNXCL: i32   	= 0x540D;
        const TIOCSCTTY: i32  	= 0x540E;
        const TIOCGPGRP: i32  	= 0x540F;
        const TIOCSPGRP: i32  	= 0x5410;
        const TIOCOUTQ: i32   	= 0x5411;
        const TIOCSTI: i32    	= 0x5412;
        const TIOCGWINSZ: i32 	= 0x5413;
        const TIOCSWINSZ: i32 	= 0x5414;
        const TIOCMGET: i32   	= 0x5415;
        const TIOCMBIS: i32   	= 0x5416;
        const TIOCMBIC: i32   	= 0x5417;
        const TIOCMSET: i32   	= 0x5418;
        const TIOCGSOFTCAR: i32 = 0x5419;
        const TIOCSSOFTCAR: i32 = 0x541A;
        const FIONREAD: i32   	= 0x541B;
        const TIOCINQ: i32    	= 0x541B;
        const TIOCLINUX: i32  	= 0x541C;
        const TIOCCONS: i32   	= 0x541D;
        const TIOCGSERIAL: i32  = 0x541E;
        const TIOCSSERIAL: i32  = 0x541F;
        const TIOCPKT: i32    	= 0x5420;
        const FIONBIO: i32    	= 0x5421;
        const TIOCNOTTY: i32    = 0x5422;
        const TIOCSETD: i32     = 0x5423;
        const TIOCGETD: i32     = 0x5424;
        const TCSBRKP: i32      = 0x5425; # Needed for POSIX tcsendbreak()
        const TIOCSBRK: i32     = 0x5427; # BSD compatibility
        const TIOCCBRK: i32     = 0x5428; # BSD compatibility
        const TIOCGSID: i32     = 0x5429; # Return the session ID of FD
        #...
        const TIOCGRS485: i32  = 0x542E;
        const TIOCSRS485: i32  = 0x542F;
        const TCGETX: i32	   = 0x5432; # SYS5 TCGETX compatibility
        const TCSETX: i32	   = 0x5433;
        const TCSETXF: i32	   = 0x5434;
        const TCSETXW: i32	   = 0x5435;
        const TIOCVHANGUP: i32 = 0x5437;
        #...
        const FIONCLEX: i32        = 0x5450;
        const FIOCLEX: i32         = 0x5451;
        const FIOASYNC: i32        = 0x5452;
        const TIOCSERCONFIG: i32   = 0x5453;
        const TIOCSERGWILD: i32    = 0x5454;
        const TIOCSERSWILD: i32    = 0x5455;
        const TIOCGLCKTRMIOS: i32  = 0x5456;
        const TIOCSLCKTRMIOS: i32  = 0x5457;
        const TIOCSERGSTRUCT: i32  = 0x5458; # For debugging only
        const TIOCSERGETLSR: i32   = 0x5459; # Get line status register
        const TIOCSERGETMULTI: i32 = 0x545A; # Get multiport config
        const TIOCSERSETMULTI: i32 = 0x545B; # Set multiport config

        const TIOCMIWAIT: i32 =	0x545C;	# wait for a change on serial input line(s)
        const TIOCGICOUNT: i32 = 0x545D; # read serial port __inline__ interrupt counts

        # Used for packet mode
        const TIOCPKT_DATA: i32		  = 0;
        const TIOCPKT_FLUSHREAD: i32  = 1;
        const TIOCPKT_FLUSHWRITE: i32 = 2;
        const TIOCPKT_STOP: i32		  = 4;
        const TIOCPKT_START: i32	  = 8;
        const TIOCPKT_NOSTOP: i32	  = 16;
        const TIOCPKT_DOSTOP: i32	  = 32;
        const TIOCPKT_IOCTL: i32	  = 64;

        const TIOCSER_TEMT: i32 = 0x01;

        fn ioctl(fd: i32, req: i32, args: ...): i32
        {
            let ap: &VAList = &args;
            let arg = va_arg!{ap, u64};

            let r = syscall::ioctl(fd, req, arg);
            <- r;
        }
    }
}