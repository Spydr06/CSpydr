import "syscall.csp";
import "str.csp";
import "types.csp";

macro stdin  {0}
macro stdout {1}
macro stderr {2}

namespace std {
    # flags for std::syscall::open
    type OpenFlag: enum {
        APPEND    = 1024,
        ASYNC     = 8192,
        CLOEXEC   = 524288,
        CREAT     = 64,
        DIRECT    = 16384,
        DIRECTORY = 65536,
        DSYNC     = 4096,
        EXCL      = 128,
        LARGEFILE = 32768,
        NOATIME   = 262144,
        NOCTTY    = 256,
        NOFOLLOW  = 131072,
        NONBLOCK  = 2048,
        NDELAY    = 2048,
        PATH      = 2097152,
        SYNC      = 1052672,
        TMPFILE   = 4259840,
        TRUNC     = 512,
    };

    type Stat: struct {
        st_dev: dev_t,
        st_ino: ino_t,
        st_mode: mode_t,
        st_nlink: nlink_t,
        st_uid: uid_t,
        st_gid: gid_t,
        st_rdev: dev_t,
        st_size: off_t,
        st_blksize: blksize_t,
        st_blocks: blkcnt_t,
        st_atime: time_t,
        st_mtime: time_t,
        st_ctime: time_t
    };

    type PollFd: struct {
        fd: i32,
        events: i16,
        revents: i16
    };

    type IOVec: struct {
        iov_base: &void,
        iov_len: usize
    };

    namespace io {
        fn write(fd: i32, buf: const &char) 
        {
            if syscall::write(fd, buf, c_str::get_len(buf) + 1) <= 0
            {
                # todo: fail assertion
                ret;
            }
        }

        fn writeln(fd: i32, buf: const &char)
        {
            if syscall::write(fd, buf, c_str::get_len(buf) + 1) <= 0
            {
                # todo: fail assertion
                ret;
            }

            if syscall::write(fd, "\n", 2) <= 0
            {
                # todo: fail assertion
                ret;
            }
        }

        fn write_int(fd: i32, int: i64)
        {
            let buf: char[32];
            mem::zero(buf, sizeof char * len buf);

            c_str::from_int(int, buf, 10);
            write(fd, buf);
        }

        fn write_uint(fd: i32, uint: u64)
        {

        }

        fn write_ptr(fd: i32, ptr: &void)
        {
            
        }
    }
}