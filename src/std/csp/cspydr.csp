#[
    LIBCSPC API HEADERS
    
    Copyright (c) 2021 - 2022 Spydr06
    This code and all code of CSpydr is licensed under the MIT license.
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    The software is provided "as is", without warranty of any kind.

    cspydr.csp features an API for cspydr and its compiler cspc for C/C++
]#

[link("cspydr")]

namespace cspydr {
    type Compiler: void;
    type Status: enum {
        NONE = 0,
        INIT,
        PARSED,
        OPTIMIZED,
        GENERATED,
        EXECUTED
    };

    extern "C" {
        fn csp_init_compiler(): &Compiler;
        fn csp_free_compiler(compiler: &Compiler);
        fn csp_get_status(compiler: &Compiler): Status;
        fn csp_status_str(status: Status): &const char;
    }

    type TokenType: enum {
        ID,
        MACRO_CALL,
        INFIX_CALL,
        INT,
        FLOAT,
        CHAR,
        STRING,
        TRUE,
        FALSE,
        NIL,
        LPAREN,
        RPAREN,
        RBRACE,
        LBRACKET,
        RBRACKET,
        GT,
        LT,
        EQ,
        NOT_EQ,
        GT_EQ,
        LT_EQ,
        BANG,
        PLUS,
        MINUS,
        STAR,
        SLASH,
        PERCENT,
        ARROW,
        AND,
        OR,
        BIT_OR,
        PIPE,
        REF,
        TILDE,
        VA_LIST,
        INC,
        DEC,
        ASSIGN,
        ADD,
        SUB,
        MULT,
        DIV,
        MOD,
        XOR,
        XOR_ASSIGN,
        LSHIFT,
        RSHIFT,
        LSHIFT_ASSIGN,
        RSHIFT_ASSIGN,
        BIT_AND_ASSIGN,
        BIT_OR_ASSIGN,
        COLON,
        COMMA,
        DOT,
        SEMICOLON,
        UNDERSCORE,
        DOLLAR,
        AT,
        STATIC_MEMBER,
        POW_2,
        POW_3,
        C_ARRAY,
        IF,
        ELSE,
        LOOP,
        RETURN,
        MATCH,
        FN,
        LET,
        TYPE,
        STRUCT,
        UNION,
        ENUM,
        IMPORT,
        EXTERN,
        MACRO,
        CONST,
        NAMESPACE,
        SIZEOF,
        TYPEOF,
        ALIGNOF,
        WHILE,
        FOR,
        CONTINUE,
        BREAK,
        NOOP,
        LEN,
        ASM,
        USING,
        WITH,
        DO,
        UNLESS,
        CURRENT_FN,
        BUILTIN_REG_CLASS,
        BUILTIN_IS_INT,
        BUILTIN_IS_UINT,
        BUILTIN_IS_FLOAT,
        BUILTIN_IS_POINTER,
        BUILTIN_IS_ARRAY,
        BUILTIN_IS_STRUCT,
        BUILTIN_IS_UNION,
        BUILTIN_TO_STR,
        ERROR,
        EOF
    };

    type Token: void;

    extern "C" {
        fn csp_new_token(kind: TokenType, line: u32, position: u32, value: &char): &Token;
        fn csp_token_get_type(token: &Token): TokenType;
        fn csp_token_get_line(token: &Token): u32;
        fn csp_token_get_position(token: &Token): u32;
        fn csp_token_get_value(token: &Token): &char;
        fn csp_token_get_file(token: &Token): &char;
    }

    type ASTNodeKind: enum {
        NOOP,
        ID,
        INT,
        LONG,
        ULING,
        FLOAT,
        DOUBLE,
        BOOL,
        CHAR,
        STR,
        NIL,
        ARRAY,
        STRUCT,
        ADD,
        SUB,
        MUL,
        DIV,
        MOD,
        NEG,
        BIT_NEG,
        NOT,
        REF,
        DEREF,
        EQ,
        NE,
        GT,
        GE,
        LT,
        LE,
        AND,
        OR,
        LSHIFT,
        RSHIFT,
        XOR,
        BIT_OR,
        BIT_AND,
        INC,
        DEC,
        CLOSURE,
        ASSIGN,
        MEMBER,
        CALL,
        INDEX,
        CAST,
        SIZEOF,
        ALIGNOF,
        PIPE,
        HOLE,
        LAMBDA,
        ELSE_EXPR,
        TYPE_EXPR,
        BLOCK,
        IF,
        TERNARY,
        LOOP,
        WHILE,
        FOR,
        MATCH,
        MATCH_TYPE,
        CASE,
        CASE_TYPE,
        RETURN,
        EXPR_STMT,
        BREAK,
        CONTINUE,
        DO_UNLESS,
        DO_WHILE,
        LEN,
        USING,
        WITH,
        STRUCT_MEMBER,
        DEFER,
        EXTERN_C_BLOCK,
        ASM,
        KIND_LEN
    };

    type ASTTypeKind: enum {
        I8,
        I16,
        I32,
        I64,
        U8,
        U16,
        U32,
        U64,
        F32,
        F64,
        F80,
        BOOL,
        VOID,
        CHAR,
        PTR,
        ARRAY,
        VLA,
        C_ARRAY,
        STRUCT,
        ENUM,
        FN,
        UNDEF,
        TYPEOF,
        TEMPLATE,
        KIND_LEN
    };

    type ASTObjKind: enum {
        GLOBAL,
        LOCAL,
        FUNCTION,
        FN_ARG,
        TYPEDEF,
        NAMESPACE,
        ENUM_MEMBER,
        LAMBDA,
        KIND_LEN
    };

    type ASTNode: void;
    type ASTObj: void;
    type ASTType: void;
    type ASTProg: void;
    type ASTIdentifier: void;
}