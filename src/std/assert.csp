#[ 
    arena.csp - Implementation of the assert!() macro

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#

import "io.csp";

# assert, that condition is true, if not, print an error message
macro assert(condition, error_msg) {
    do {
        if ::std::assert::ENABLED && !(condition) {
            ::std::assert::fail((error_msg), __func__, __line__, __file__);
        }
    } while false
}

# assert, that condition is true
macro assert(condition) {
    do {
        if ::std::assert::ENABLED && !(condition) {
            ::std::assert::fail("", __func__, __line__, __file__);
        }
    } while false
}

# assert, that condition is false
macro assert_false(condition, error_msg) {
    do {
        if ::std::assert::ENABLED && (condition) {
            ::std::assert::fail((error_msg), __func__, __line__, __file__);
        }
    } while false
}

namespace std {
    # implementation of assert
    namespace assert {
        let ENABLED: bool = true;

        fn fail(msg: &const char, func: &const char, line: i32, file: &const char) {
            using io, color, process;

            eprintf("%s%s:%i in %s(): assertion failed: %s%s\n", 
                &RED[0], 
                file, 
                line, 
                func, 
                msg, 
                &RESET[0]
            );
            exit(Errno::ASSERT);
        }

        # enable/disable asserts
        fn disable() ENABLED = false;
        fn enable() ENABLED = true;
        fn status(): bool ret ENABLED;
    }
}