#[ 
    memory.csp - Functions for managing and allocating memory

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#


import "syscall.csp";
import "types.csp";
import "utils.csp";
import "error.csp";

# macros for quick access
macro alloc(size) { (::std::memory::alloc(size)) }
macro realloc(src, size) { (::std::memory::realloc(src, size)) }
macro free(ptr) { (::std::memory::free(ptr)) }
macro make(_type) { (::std::memory::alloc(sizeof(_type)): &(_type)) }
macro make(_type, _len) { (::std::memory::alloc(sizeof(_type) * _len): &(_type)) }

# actual memory allocator implementation
namespace std {
    # memory protection types for std::syscall::mmap
    type Prot: enum {
        NONE,
        READ  = 0x1,
        WRITE = 0x2,
        EXEC  = 0x4,
        # SEM
        GROWSUP   = 0x02000000,
        GROWSDOWN = 0x01000000
    };  

    # flags for std::syscall::mmap
    type MMap: enum {
        SHARED          = 0x01,
        SHARED_VALIDATE = 0x03,
        PRIVATE         = 0x02,
        # 32BIT
        ANONYMOUS       = 0x20,
        FIXED           = 0x10,
        # FIXED_NOREPLACE
        GROWSDOWN       = 0x01000000,
        # HUGETB
        # HUGE_1MB
        # HUGE_2MB
        # LOCKED
        # NONBLOCK
        # NORESERVE
        # POPULATE
        # STACK
        # UNINITIALIZED
        MAYMOVE = 0x01
    };

    # TODO: implement correct values
    type MAdv: enum {
        NORMAL,
        RANDOM,
        SEQUENTIAL,
        WILLNEED,
        DONTNEED
    };

    namespace memory {
        const MMAP_FAILED: &void = (-1): &void;
        
        # TODO: implement correct values
        const IPC_CREAT: i32 = 0;
        const IPC_EXCL: i32 = 0;

        const SHM_HUGETLB: i32 = 0;
        const SHM_HUGE_1GB: i32 = 0;
        const SHM_HUGE_2M: i32 = 0;
        const SHM_NORESERVE: i32 = 0;
        const SHM_REMAP: i32 = 0;
        const SHM_RDONLY: i32 = 0;

        [private]
        let unfreed_allocs: i32 = 0;

        const ALIGN: u64 = 16;

        [cfg("linux")]
        fn alloc(n: usize): &void
        {
            if n > u64_max! / 2 {
                error::new(Errno::NOMEM, "allocation too big");
                <- nil;
            }

            let length = n + sizeof usize;
            let plen: &usize = syscall::mmap(nil, length, Prot::READ | Prot::WRITE, MMap::PRIVATE | MMap::ANONYMOUS, -1, 0);
            if plen == MMAP_FAILED {
                error::new(Errno::NOMEM, "mmap failed");
                <- nil;
            }
            *plen = length;
            
            unfreed_allocs++;
            <- (&plen[1]): &void;
        }

        fn calloc(nmemb: usize, size: usize): &void
        {
            let ptr = alloc(nmemb * size);
            zero(ptr, nmemb * size);
            <- ptr;
        }

        fn realloc(ptr: &void, size: usize): &void
        {
            let new = alloc(size);
            move(new, ptr, size);
            free(ptr);
            <- new;
            #let plen = &(ptr: &usize)[-1];
            #let length = *plen;
            #let new_length = size + sizeof usize;
            #plen = syscall::mremap(plen: &void, length, new_length, MMap::MAYMOVE);
            #if plen == MMAP_FAILED ret nil;

            #*plen = new_length;
            #<- (&plen[1]): &void;
        }

        [drop]
        fn free(ptr: &void)
        {
            if ptr == nil ret;
            unfreed_allocs--;

            let plen = &(ptr: &usize)[-1];
            let length = *plen;

            syscall::munmap(plen: &void, length);
        }

        fn copy(dest: &void, src: &const void, n: usize): i32
        {
            if ptr_overlap(dest, src, n) ret -1; # error

            let x: &u8 = dest;
            let y: &u8 = src;

            for let i: usize = 0; i < n; i++;
                x[i] = y[i];

            <- 0; # success
        }

        fn move(dest: &void, src: &const void, n: usize): &void
        {
            let tmp: &u8 = alloc(n); # allocate memory for a temporary array
            copy(tmp, src, n);       # copy the source to tmp 
            copy(dest, tmp, n);      # copy tmp to source

            free(tmp);
            <- dest;
        }

        fn eq(a: &const void, b: &const void, n: usize): bool
        {
            let x: &const u8 = a;
            let y: &const u8 = b;

            for let i: usize = 0; i < n; i++;
                if x[i] != y[i] ret false; # not equal

            <- true; # equal
        }

        fn set(ptr: &void, n: i32, size: usize)
        {
            for let i: usize = 0; i < size; i++; 
                (ptr: &u8)[i] = n;
        }

        fn zero(ptr: &void, size: usize)
        {
            for let i: usize = 0; i < size; i++; 
                (ptr: &u8)[i] = 0;
        }

        # function to check if two pointer overlap
        fn ptr_overlap(a: &const void, b: &const void, n: usize): bool
        {
            let x: &const u8 = a;
            let y: &const u8 = b;
            <- (x <= y && x + n > y) || (y <= x && y + n > x);
        }

        fn is_zero(a: &const void, size: usize): bool {
            let bytes = a: &const u8;
            for let i = 0; i < size; i++; {
                if bytes[i] != 0
                    <- false;
            }
            <- true;
        }
    }
}
