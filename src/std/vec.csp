#[ 
    vec.csp - Implementation of dynamic arrays for CSpydr

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#

import "memory.csp";
import "types.csp";

# macro to quickly create a new vector
macro vec(datatype) {
    (::std::vec::init(): &datatype)
}

# macro to get the size of the vector
macro vec_size(addr) {
    (::std::vec::size((addr)))
}

# macro to add a value to the vector
macro vec_add(addr, value) {
    (*(
        ::std::vec::__internal_add((&addr): &&void, sizeof typeof *(addr)): typeof (addr)
    ) = (value))
}

# macro to insert a value in the vector
macro vec_insert(addr, pos, value) {
    (*(
        ::std::vec::__internal_insert((&addr): &&void, sizeof typeof *(addr), pos): typeof (addr)
    ) = (value))
}

# macro to erase a part of a vector
macro vec_erase(addr, pos, length) {
    ::std::vec::__internal_erase((addr): &void, sizeof typeof *(addr), pos, length)
}

# macro to remove one item of a vector
macro vec_remove(addr, pos) {
    ::std::vec::__internal_remove((addr): &void, sizeof typeof *(addr), pos)
}

# macro to copy a vector
macro vec_copy(addr) {
    (::std::vec::__internal_copy((addr): &void, sizeof typeof *(addr)): typeof (addr))
}

# macro to iterate over every index of a vector
macro vec_foreach(addr, i, v, code) {
    {
        for let i = 0; i < ::std::vec::size(addr); i++; {
            let v = addr[i];
            code;
        }
    }
}

# macro to free the memory allocated by a vector
macro vec_free(addr) {
    (::std::vec::free(addr))
}

namespace std {
    namespace vec {
        # data representing a vector
        type VecData: struct {
            alloc: u64,     # number of allocated bytes
            size: u64,      # size of the vector``
            buff: u8 'c[0]  # vector buffer, this is the actual data
        };

        # constant defining how memory allocation should increase
        const VECTOR_MULTIPLIER: i32 = 2;

        # create a new vector
        fn init(): &void 
        {
            let vec_data: &VecData = memory::alloc(sizeof VecData);
            vec_data.alloc = 0;
            vec_data.size = 0;

            <- &vec_data.buff;
        }

        # free a vector
        fn free(vec: &void) 
        {
            memory::free(get_data(vec));
        }

        # get VecData struct of the vector
        fn get_data(vec: &void): &VecData 
        {
            <- &(vec: &VecData)[-1];
        }

        # get the size of the vector
        fn size(vec: &void): u64
        {
            <- get_data(vec).size;
        }

        # get the number of allocated bytes of the vector
        fn allocated(vec: &void): u64 
        {
            <- get_data(vec).alloc;
        }

        # reallocate a vector to a new size
        fn reallocate(v_data: &VecData, type_size: u8): &VecData 
        {
            let new_alloc: u64;
            if v_data.alloc == 0
                new_alloc = 1;
            else
                new_alloc = v_data.alloc * VECTOR_MULTIPLIER;
            
            let new_v_data: &VecData = memory::realloc(v_data, (sizeof VecData) + new_alloc * type_size);
            new_v_data.alloc = new_alloc;

            <- new_v_data;
        }

        # check if the vector still has free allocated slots
        fn has_space(v_data: &VecData): bool 
        {
            <- (v_data.alloc - v_data.size) > 0;
        }

        # 
        # internal logic of more complex functions
        #

        fn __internal_add(addr: &&void, type_size: u8): &void 
        {
            let v_data = get_data(*addr);

            if !has_space(v_data) {
                v_data = reallocate(v_data, type_size);
                *addr = (v_data.buff: &void);
            }

            <- &(v_data.buff[type_size * (v_data.size++)]);
        }

        fn __internal_insert(addr: &&void, type_size: u8, pos: u64): &void 
        {
            let v_data = get_data(*addr);
            let new_length = size(*addr) + 1;

            if !has_space(v_data) {
                v_data = reallocate(v_data, type_size);
                *addr = (v_data.buff: &void);
            }

            memory::move(&(v_data.buff[(pos + 1) * type_size]),
                    &(v_data.buff[pos * type_size]),
                    (v_data.size - pos) * type_size);

            v_data.size = new_length;
            <- &(v_data.buff[pos * type_size]);
        }

        fn __internal_erase(vec: &void, type_size: u8, pos: u64, length: u64) 
        {
            let v_data = get_data(vec);
            # todo: index validation
            memory::move(&(v_data.buff[pos * type_size]),
                    &(v_data.buff[(pos + length) * type_size]),
                    (v_data.size - pos - length) * type_size);
            v_data.size = (v_data.size - length);
        }

        fn __internal_remove(vec: &void, type_size: u8, pos: u64) 
        {
            __internal_erase(vec, type_size, pos, 1);
        }

        fn __internal_copy(vec: &void, type_size: u8): &void 
        {
            let v_data = get_data(vec);
            let size = v_data.size;
            let alloc_size = sizeof(VecData) + size * type_size;
            let copy: &VecData = memory::alloc(alloc_size);
            
            memory::copy(copy, v_data, alloc_size);
            <- &copy.buff;
        }

        fn pop(vec: &void) 
        {
            get_data(vec).size--;
        }
    }
}