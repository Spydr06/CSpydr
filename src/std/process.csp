import "syscall.csp";
import "types.csp";
import "io.csp";

macro MAX_EXIT_HANDLERS { 1024 }

namespace std {
    type ExitCode: enum {
        SUCCESS,
        FAILURE
    };

    namespace process {
        const CLONE_NEWTIME: i32        = 0x00000080;
        const CLONE_VM: i32             = 0x00000100;
        const CLONE_FS: i32             = 0x00000200;
        const CLONE_FILES: i32          = 0x00000400;
        const CLONE_SIGHAND: i32        = 0x00000800;
        const CLONE_PIDFD: i32          = 0x00001000;
        const CLONE_PTRACE: i32         = 0x00002000;
        const CLONE_VFORK: i32          = 0x00004000;
        const CLONE_PARENT: i32         = 0x00008000;
        const CLONE_THREAD: i32         = 0x00010000;
        const CLONE_NEWNS: i32          = 0x00020000;
        const CLONE_SYSVSEM: i32        = 0x00040000;
        const CLONE_SETTLS: i32         = 0x00080000;
        const CLONE_PARENT_SETTID: i32  = 0x00100000;
        const CLONE_CHILD_CLEARTID: i32 = 0x00200000;
        const CLONE_DETACHED: i32       = 0x00400000;
        const CLONE_UNTRACED: i32       = 0x00800000;
        const CLONE_CHILD_SETTID: i32   = 0x01000000;
        const CLONE_NEWCGROUP: i32      = 0x02000000;
        const CLONE_NEWUTS: i32         = 0x04000000;
        const CLONE_NEWIPC: i32         = 0x08000000;
        const CLONE_NEWUSER: i32        = 0x10000000;
        const CLONE_NEWPID: i32         = 0x20000000;
        const CLONE_NEWNET: i32         = 0x40000000;
        const CLONE_IO: i32             = 0x80000000;

        namespace __static {
            let __at_exit_fns: fn(i32)[MAX_EXIT_HANDLERS!];
            let __at_exit_cnt: u32;
        }
        
        fn die(msg: const &char)
        {
            io::eputs(msg);
            exit(ExitCode::FAILURE);
        }

        fn exit(exit_code: ExitCode) 
        {
            using __static;

            for let i: u64 = 0; i < __at_exit_cnt; i++; {
                let func = __at_exit_fns[i];
                func(exit_code);
            }
            
            loop syscall::exit(exit_code);
        }

        fn at_exit(func: fn(ExitCode)): bool 
        {
            using __static;

            if __at_exit_cnt + 1 > MAX_EXIT_HANDLERS!
                <- false;
            __at_exit_fns[__at_exit_cnt++] = func;
            <- true;
        }

        fn getpid(): pid_t
            <- syscall::getpid();
        
        fn clone(func: fn<i32>(&void), stack: &void, flags: i32, arg: &void): i32
            <- syscall::clone(func, stack, flags, arg);

        fn fork(): pid_t
            <- syscall::fork();

        fn vfork(): pid_t
            <- syscall::vfork();

        fn execve(pathname: const &char, argv: &const char[], envp: &const char[]): i32
            <- syscall::execve(pathname, argv, envp); 
        
        fn kill(pid: pid_t, sig: i32): i32
            <- syscall::kill(pid, sig);
    }
}