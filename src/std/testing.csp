import "error.csp";
import "process.csp";

namespace std {
    type Testing: struct {
        tests: &(std::testing::Test[]),
        current: u64,
        errors: i32,
        skipped: u64,
        failed: u64,
        successful: u64,
    };

    namespace testing {
        type Test: struct {
            func: const fn(&Testing),
            desc: &const char
        };

        type TestExit: enum {
            OK, SKIP, FAIL
        };

        fn new(tests: Test[]): std::Testing {
            <- Testing::{
                &tests
            };
        }

        fn run(t: &Testing, idx: u64): TestExit {
            do {
                error::new(std::Errno::NILPTR, "argument t is nil or contains no tests");
                <- TestExit::FAIL;
            } unless t && t.tests;

            if idx >= len *t.tests {
                error::new(std::Errno::INDEXOUTOFBOUNDS, "idx bigger than t.tests array");
                <- TestExit::FAIL;
            }

            let test = (*t.tests)[idx];
            do {
                error::new(std::Errno::NILPTR, "t.tests[idx] is nil");
                <- TestExit::FAIL;
            } unless test && test.func;

            t.errors = 0;
            t.current = idx;

            io::printf("Running test %l/%l: `%s`", idx + 1, len *t.tests, test.desc);

            using process;
            let pid = fork();
            let skipped = false;
            match pid {
                (-1): pid_t => {
                    error::new(std::Errno::CHILD, "could not fork process");
                    <- TestExit::FAIL;
                }
                0 => {
                    # new child process
                    test.func(t);
                    exit(t.errors + 1); # pass the number of errors through the exit status to the parent process
                }
                _ => {
                    # parent process
                    let exit_code = 0;
                    waitpid(pid, &exit_code, 0);
                    if exited(exit_code) {
                        let status = exit_status(exit_code);

                        match status {
                            0 => skipped = true;
                            _ => t.errors += (status - 1);
                        }
                    }
                    else if signaled(exit_code) {
                        let signame = signum_str(term_sig(exit_code));

                        using io::color;
                        io::printf("\n    %sTest `%s` (%i) terminated with signal %s.%s", &RED[0], test.desc, idx + 1, signame, &RESET[0]);
                        t.errors ++;
                    }
                    else {
                        using io::color;
                        io::printf("\n   %sTest `%s` (%i) terminated in an unexpected way.%s", &RED[0], test.desc, idx + 1, &RESET[0]);
                        t.errors++;
                    }
                }
            }

            using io::color;
            if skipped {
                io::printf("\t[%s%sSKIP%s]\n", &YELLOW[0], &BOLD[0], &RESET[0]);
                <- TestExit::SKIP;
            }

            match t.errors {
                0 => {
                    io::printf("\t[ %s%sOK%s ]\n", &GREEN[0], &BOLD[0], &RESET[0]);
                    t.errors = 0;
                    <- TestExit::OK;
                }
                _ => {
                    io::printf("\t[%s%sFAIL%s]\n", &RED[0], &BOLD[0], &RESET[0]);
                    t.errors = 0;
                    <- TestExit::FAIL;
                }
            }

        }

        fn run_all(t: &Testing): u64 {
            do {
                error::new(std::Errno::NILPTR, "argument t is nil or contains no tests");
                <- 0;
            } unless t && t.tests;

            t.successful = 0;
            t.skipped = 0;
            t.failed = 0;

            for let i: u64 = 0; i < len *t.tests; i++; {
                match run(t, i) {
                    TestExit::OK => t.successful++;
                    TestExit::SKIP => t.skipped++;
                    TestExit::FAIL => t.failed++;
                    _ => noop;
                }
            }

            let total = len *t.tests;

            using io::color;
            if t.successful == total {
                io::printf("[ %s%sOK%s ] All %l tests finished successfully.\n", &GREEN[0], &BOLD[0], &RESET[0], t.successful);
                <- 0;
            }
            if t.successful + t.skipped == total {
                io::printf("[ %s%sOK%s ] %l of %l tests finished successfully, %l were skipped.\n", &GREEN[0], &BOLD[0], &RESET[0], t.successful, total, t.skipped);
                <- 0;
            }
            else {
                io::printf("[%s%sFAIL%s] %l of %l tests failed, %l finished successfully", &RED[0], &BOLD[0], &RESET[0], t.failed, total, t.successful);
                io::printf(", %l skipped.\n", t.skipped);
                <- t.failed;
            }
        }

        fn va_assert(t: &Testing, condition: bool, error_msg: &const char, va_list: &VAList) {
            do {
                error::new(std::Errno::NILPTR, "argument t is nil");
                ret;
            } unless t && t.tests;

            using io::color;
            do {
                io::eprintf("\n    %sTest `%s` (%l): assertion failed: ", &RED[0], (*t.tests)[t.current].desc, t.current + 1);
                io::vfprintf(stderr!, error_msg, va_list);
                io::eprintf(&RESET[0]);
                t.errors++;
            } unless condition;
        }

        fn assert(t: &Testing, condition: bool, error_msg: &const char, args: ...) {
            va_assert(t, condition, error_msg, &args);
        }

        fn assert_false(t: &Testing, condition: bool, error_msg: &const char, args: ...) {
            va_assert(t, !condition, error_msg, &args);
        }

        fn assert_fatal(t: &Testing, condition: bool, error_msg: &const char, args: ...) {
            do {
                error::new(std::Errno::NILPTR, "argument t is nil");
                ret;
            } unless t && t.tests;

            using io::color;
            do {
                io::eprintf("\n    %sTest `%s` (%l): fatal assertion failed: ", &RED[0], (*t.tests)[t.current].desc, t.current + 1);
                io::vfprintf(stderr!, error_msg, &args);
                io::eprintf(&RESET[0]);
                t.errors++;
                process::exit(2);
            } unless condition;
        }

        fn log(t: &Testing, fmt: &const char, args: ...) {
            using io, color;
            puts(&RESET[0]);
            io::printf("    ");
            io::vfprintf(stdout!, fmt, &args);
            io::printf(&RESET[0]);
        }

        # skip the current test by terminating the process
        fn skip(t: &Testing) {
            process::exit(0);
        }
        [ignore_unused("skip")]
    }
}