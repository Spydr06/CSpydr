import "string.csp";
import "error.csp";

namespace std {
    namespace fmt {
        #[ 
            format strings with given arguments
            format arguments:
            "%%" => '%'
            "%i" => insert an i32
            "%u" => insert an u32
            "%l" => insert an i64
            "%o" => insert an i64 in octal form
            "%x" => insert an u64 in hexadecimal form
            "%b" => insert a boolean
            "%p" => insert a pointer/memory address (&void or u64)
            "%c" => insert a character
            "%C" => insert a literal character (prints escape codes as text)
            "%s" => insert a string
            "%S" => insert a literal string (prints escape codes as text)
            "%n" => return a null character immediately
            "%e" => insert an "Error" type from the VAList as &Error
            "%E" => insert the current error set at std::error::__static::__error
            "%t" => inserts a formatted time string
        ]#
        fn format(fmt: &const char, args: ...): std::String
            <- va_format(fmt, &args);

        fn va_format(fmt: &const char, args: &VAList): std::String
        {
            using string;
            let str = str!{};
            do {
                error::new(std::Errno::NILPTR, "`fmt` is nil");
                <- str;
            } unless fmt;

            for ; (*fmt) != '\0'; fmt++; {
                if (*fmt) == '%' {
                    fmt++;
                    
                    let r = __internal::fmt(fmt, &str, args);
                    if r ret r;
                }
                else
                    &str `append` *fmt;
            }

            <- str;
        }

        #[ 
            format timepoints with given time format
            format arguments:
            "%%" => '%'
            "%Y" => year
            "%M" => month
            "%D" => day
            "%h" => hour
            "%m" => minute
            "%s" => second
            "%u" => unix seconds (seconds since Jan 1st 1970)
        ]#
        fn time(fmt: &const char, time: Time): std::String
        {
            using string;
            let str = str!(nil);
            do {
                error::new(std::Errno::NILPTR, "`fmt` is nil");
                <- str;
            } unless fmt;

            for ; (*fmt) != '\0'; fmt++; {
                if (*fmt) == '%' {
                    fmt++;
                    
                    __internal::fmt_time(fmt, &str, &time);
                }
                else
                    &str `append` *fmt;
            }

            <- str;
        }

        namespace __internal {
            fn fmt_literal_char(c: char, str: &String) {
                using string;
                match c {
                    '\a' => concat(str, "\\a");
                    '\b' => concat(str, "\\b");
                    '\t' => concat(str, "\\t");
                    '\v' => concat(str, "\\v");
                    '\n' => concat(str, "\\n");
                    '\r' => concat(str, "\\r");
                    '\f' => concat(str, "\\f");
                    '\'' => concat(str, "\\'");
                    '\"' => concat(str, "\\");
                    '\\' => concat(str, "\\\\");
                    '\0' => concat(str, "\\0");
                    _ => append(str, c);
                }
            }

            fn fmt_literal_string(s: &const char, str: &String) {
                for let i = 0; i < len s; i++; {
                    fmt_literal_char(s[i], str);
                }
            }

            fn fmt(fmt: &const char, str: &String, args: &VAList): std::String {
                using string;

                let buf: char 'c[100];
                match *fmt {
                    '%' => append(str, *fmt);
                    'i' => {
                        c_str::from_int(va_arg!{args, i32}, buf, 10);
                        concat(str, buf);
                    }
                    'u' => {
                        c_str::from_uint(va_arg!{args, u32}, buf, 10);
                        concat(str, buf);
                    }
                    'l' => {
                        c_str::from_int(va_arg!{args, i64}, buf, 10);
                        concat(str, buf);
                    }
                    'o' => {
                        c_str::from_int(va_arg!{args, i64}, buf, 8);
                        concat(str, buf);
                    }
                    'x' => {
                        c_str::from_uint(va_arg!{args, u64}, buf, 16);
                        concat(str, buf);
                    }
                    'b' => {
                        concat(str, va_arg!{args, bool} |> if $ => "true" else "false");
                    }
                    'f' => { # float (f32)
                        c_str::from_f32(va_arg!{args, f32}, 10, buf);
                        concat(str, buf);
                    }
                    'd' => { # double (f64)
                        c_str::from_f64(va_arg!{args, f64}, 20, buf);
                        concat(str, buf);
                    }
                    'p' => { # pointer
                        c_str::from_uint(va_arg!{args, &void}: u64, buf, 16);
                        concat(str, "0x");
                        concat(str, buf);
                    }
                    'c' => append(str, va_arg!{args, char}); # char
                    'C' => {
                        let c = va_arg!{args, char};
                        fmt_literal_char(c, str);
                    }
                    's' => {
                        let arg = va_arg!{args, &char};
                        if arg
                            concat(str, arg);
                        else
                            concat(str, "(nil)");
                    }
                    'S' => {
                        let arg = va_arg!{args, &char};
                        if arg
                            fmt_literal_string(arg, str);
                        else
                            concat(str, "(nil)");
                    }
                    'n' => {
                        free(*str);
                        <- str!{"\0"};
                    }
                    'e' => {
                        let err = va_arg!{args, &Error};
                        concat(str, error::str(err.kind));
                        
                        if err.msg {
                            concat(str, ": ");
                            concat(str, err.msg);
                        }
                    }
                    'E' => {
                        let err = error::current();
                        concat(str, error::str(err.kind));
                        if err.msg {
                            concat(str, ": ");
                            concat(str, err.msg);
                        }
                    }
                    't' => {
                        let time_fmt = va_arg!{args, &const char};
                        if time_fmt
                            with f = time(time_fmt, std::time::get())
                                concat(str, f);
                            else {}
                        else
                            concat(str, "(nil)");
                    }
                    _ => {
                        append(str, 37);
                        append(str, *fmt);
                    }
                }

                <- nil;
            }

            fn fmt_time(fmt: &const char, str: &String, time: &Time) {
                using c_str;
                let buf: char 'c[100];
                match *fmt {
                    '%' => string::append(str, *fmt);
                    'Y' => from_uint(time.year, buf, 10);
                    'M' => uint_two_digits(time.month, buf);
                    'D' => uint_two_digits(time.day, buf);
                    'h' => uint_two_digits(time.hour, buf);
                    'm' => uint_two_digits(time.minute, buf);
                    's' => uint_two_digits(time.second, buf);
                    _ => {}
                }

                if buf[0] != 0 {
                    string::concat(str, buf);
                }
            }

            fn uint_two_digits(u: u64, buf: &char) {
                if u < 10 {
                    *buf = '0';
                   buf++;
                }
                c_str::from_uint(u, buf, 10);
            }
        }
    }
}