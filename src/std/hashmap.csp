import "memory.csp";
import "algorithm.csp";
import "vec.csp";

macro hashmap(key_type, val_type) {
    (struct {
        pairs: &struct {
            key: (key_type),
            val: (val_type)
        },
        data: ::std::hashmap::Data,
    })
}

macro hashmap_init(key_type, val_type) {
    (::std::hashmap::init(&({
            nil, ::std::hashmap::Data::{}
        }: struct {
            pairs: &struct {
                key: (key_type),
                val: (val_type)
            },
            data: ::std::hashmap::Data
        }),
        sizeof (key_type),
        sizeof (val_type),
        type::((key_type) == &char) || type::((key_type) == &const char)
    ): &struct {
        pairs: &struct {
            key: (key_type),
            val: (val_type)
        },
        data: ::std::hashmap::Data
    })
}

macro hashmap_init(map) {
    (::std::hashmap::init((map), 
        sizeof typeof (map).pairs.key, 
        sizeof typeof (map).pairs.val,
        type::((typeof (map).pairs.key) == &char) || type::((typeof (map).pairs.key) == &const char)
    ): typeof (map))
}

macro hashmap_free(map) {
    (::std::hashmap::free((map)))
}

macro hashmap_put(map, _key, _val) {
    (::std::hashmap::put((map), &{
        (_key): typeof (map).pairs.key, 
        (_val): typeof (map).pairs.val
    }))
}

macro hashmap_get(map, _key) {
    (::std::hashmap::get((map), &{(_key): typeof (map).pairs.key}): typeof &(map).pairs.val |>
        if $ == nil => 
            (0: typeof (map).pairs.val)
        else
            *$
    )
}

macro hashmap_keys(map) {
    (::std::hashmap::keys((map)): &typeof (map).pairs.key)
}

macro hashmap_values(map) {
    (::std::hashmap::values((map)): &typeof (map).pairs.val)
}

macro hashmap_size_mod(map, val) {
    ((val) & ((map).data.alloc / ((map).data.ksize + (map).data.vsize) - 1))
}

macro hashmap_num_allocated(map) {
    ((map).data.alloc / ((map).data.ksize + (map).data.vsize))
}

namespace std {
    namespace hashmap {
        type Data: struct {
            alloc: u64,
            size: u64,
            ksize: u16,
            vsize: u16,
            use_str_hashing: bool
        };

        type Template: struct {
            pairs: &u8,
            data: Data,
        };

        const HASHMAP_INIT_SIZE: i32 = 32;
        const HASHMAP_MULTIPLIER: i32 = 2;

        fn init(map: &Template, ksize: u64, vsize: u64, key_is_str: bool): &Template {
            map.data = Data::{
                0, 0,
                ksize, vsize,
                key_is_str
            };

            allocate(map);
            <- map;
        }

        fn allocate(map: &Template) {
            map.data.alloc = ((map.data.ksize + map.data.vsize) * HASHMAP_INIT_SIZE);
            map.pairs = memory::alloc(map.data.alloc);
        }

        fn free(map: &Template) {
            memory::free(map.pairs);
            map.data.alloc = 0;
        }

        fn has_space(map: &Template): bool {
            <- map.data.size < map.data.alloc / (map.data.ksize + map.data.vsize);
        }

        fn grow(map: &Template) {
            if has_space(map)
                ret;

            let old_alloc = map.data.alloc;
            let old_pairs = map.pairs;

            map.data.alloc *= HASHMAP_MULTIPLIER;
            map.pairs = memory::alloc(map.data.alloc);

            rehash(map, old_alloc, old_pairs);
        
            memory::free(old_pairs);
        }

        fn rehash(map: &Template, old_alloc: u64, old_pairs: &u8) {
            for let ptr = old_pairs; ptr < old_pairs + old_alloc; 
                ptr += ((map.data.ksize + map.data.vsize): u64); {
                if !memory::is_zero(ptr, map.data.ksize + map.data.vsize) {
                    let new = find_pair(map, ptr, true);
                    memory::copy(new, ptr, map.data.ksize + map.data.vsize);
                }
            }
        }

        fn calc_index(map: &Template, key: &u8): u64 {
            <- hashmap_size_mod!(map, 
                if map.data.use_str_hashing =>
                    algorithm::hash_string(*(key: &&const char))
                else 
                    algorithm::hash_bytes(key, map.data.ksize)
            );
        }

        fn find_pair(map: &Template, key: &u8, find_empty: bool): &u8 {
            let index = calc_index(map, key);

            # linear probing
            for 0..hashmap_num_allocated!(map) {
                let pair = &map.pairs[index * (map.data.ksize + map.data.vsize)];
                
                if memory::eq(key, pair, map.data.ksize) || (map.data.use_str_hashing && string::equal(*(key: &&const char), *(pair: &&const char)))
                    <- pair;

                if memory::is_zero(pair, map.data.ksize)
                    <- if find_empty => pair else nil: &u8;
                
                index = hashmap_size_mod!(map, index + 1);
            }

            <- nil;
        }

        fn put(map: &Template, pair: &u8) {
            map.data.size++;
            grow(map); # grow if needed

            let addr = find_pair(map, pair, true);
            if addr {
                memory::copy(addr, pair, map.data.ksize + map.data.vsize);
            }
        }

        fn get(map: &Template, key: &u8): &u8 {
            <- find_pair(map, key, false) |> if $ == nil => $ else $ + (map.data.ksize: u64);
        }

        fn keys(map: &Template): &u8 {
            let v = vec!{u8};

            for let i: u64 = 0; i < map.data.alloc; i += (map.data.ksize + map.data.vsize); {
                if !memory::is_zero(&map.pairs[i], map.data.ksize)
                    memory::copy(vec::__internal_add(&v, map.data.ksize), &map.pairs[i], map.data.ksize);
            }

            <- v;
        }

        fn values(map: &Template): &u8 {
            let v = vec!{u8};

            for let i: u64 = 0; i < map.data.alloc; i += (map.data.ksize + map.data.vsize); {
                if !memory::is_zero(&map.pairs[i], map.data.ksize)
                    memory::copy(vec::__internal_add(&v, map.data.vsize), &map.pairs[i] + map.data.ksize, map.data.vsize);
            }

            <- v;
        }
    }
}