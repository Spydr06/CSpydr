# an implementation of the GL/gl.h header file

# link with the GL shared library
[link("GL")]

macro GL_VERSION_1_1 { 1 }
macro GL_VERSION_1_2 { 1 }
macro GL_VERSION_1_3 { 1 }
macro GL_ARB_imaging { 1 }

#[
* Datatypes
]#

type GLenum: u32;
type GLboolean: u8;
type GLbitfield: u32;
type GLvoid: void;
type GLbyte: i8;
type GLshort: i16;
type GLint: i32;
type GLubyte: u8;
type GLushort: u16;
type GLuint: u32;
type GLsizei: i32;
type GLfloat: f32;
type GLclampf: f32;
type GLdouble: f64;
type GLclampd: f64;

#[
* Constants
]#

# boolean values
macro GL_FALSE { 0 }
macro GL_TRUE  { 1 }

# data types
macro GL_BYTE			{ 0x1400 }
macro GL_UNSIGNED_BYTE	{ 0x1401 }
macro GL_SHORT			{ 0x1402 }
macro GL_UNSIGNED_SHORT	{ 0x1403 }
macro GL_INT			{ 0x1404 }
macro GL_UNSIGNED_INT	{ 0x1405 }
macro GL_FLOAT			{ 0x1406 }
macro GL_2_BYTES		{ 0x1407 }
macro GL_3_BYTES		{ 0x1408 }
macro GL_4_BYTES		{ 0x1409 }
macro GL_DOUBLE			{ 0x140A }

# primitives
macro GL_POINTS			{ 0x0000 }
macro GL_LINES			{ 0x0001 }
macro GL_LINE_LOOP		{ 0x0002 }
macro GL_LINE_STRIP		{ 0x0003 }
macro GL_TRIANGLES		{ 0x0004 }
macro GL_TRIANGLE_STRIP	{ 0x0005 }
macro GL_TRIANGLE_FAN	{ 0x0006 }
macro GL_QUADS			{ 0x0007 }
macro GL_QUAD_STRIP		{ 0x0008 }
macro GL_POLYGON		{ 0x0009 }

# vertex arrays
macro GL_VERTEX_ARRAY				    { 0x8074 }
macro GL_NORMAL_ARRAY				    { 0x8075 }
macro GL_COLOR_ARRAY				    { 0x8076 }
macro GL_INDEX_ARRAY				    { 0x8077 }
macro GL_TEXTURE_COORD_ARRAY			{ 0x8078 }
macro GL_EDGE_FLAG_ARRAY			    { 0x8079 }
macro GL_VERTEX_ARRAY_SIZE			    { 0x807A }
macro GL_VERTEX_ARRAY_TYPE			    { 0x807B }
macro GL_VERTEX_ARRAY_STRIDE			{ 0x807C }
macro GL_NORMAL_ARRAY_TYPE			    { 0x807E }
macro GL_NORMAL_ARRAY_STRIDE			{ 0x807F }
macro GL_COLOR_ARRAY_SIZE			    { 0x8081 }
macro GL_COLOR_ARRAY_TYPE			    { 0x8082 }
macro GL_COLOR_ARRAY_STRIDE			    { 0x8083 }
macro GL_INDEX_ARRAY_TYPE			    { 0x8085 }
macro GL_INDEX_ARRAY_STRIDE			    { 0x8086 }
macro GL_TEXTURE_COORD_ARRAY_SIZE		{ 0x8088 }
macro GL_TEXTURE_COORD_ARRAY_TYPE		{ 0x8089 }
macro GL_TEXTURE_COORD_ARRAY_STRIDE		{ 0x808A }
macro GL_EDGE_FLAG_ARRAY_STRIDE		    { 0x808C }
macro GL_VERTEX_ARRAY_POINTER			{ 0x808E }
macro GL_NORMAL_ARRAY_POINTER			{ 0x808F }
macro GL_COLOR_ARRAY_POINTER			{ 0x8090 }
macro GL_INDEX_ARRAY_POINTER			{ 0x8091 }
macro GL_TEXTURE_COORD_ARRAY_POINTER	{ 0x8092 }
macro GL_EDGE_FLAG_ARRAY_POINTER		{ 0x8093 }
macro GL_V2F					        { 0x2A20 }
macro GL_V3F					        { 0x2A21 }
macro GL_C4UB_V2F				        { 0x2A22 }
macro GL_C4UB_V3F				        { 0x2A23 }
macro GL_C3F_V3F				        { 0x2A24 }
macro GL_N3F_V3F				        { 0x2A25 }
macro GL_C4F_N3F_V3F				    { 0x2A26 }
macro GL_T2F_V3F				        { 0x2A27 }
macro GL_T4F_V4F				        { 0x2A28 }
macro GL_T2F_C4UB_V3F				    { 0x2A29 }
macro GL_T2F_C3F_V3F				    { 0x2A2A }
macro GL_T2F_N3F_V3F				    { 0x2A2B }
macro GL_T2F_C4F_N3F_V3F			    { 0x2A2C }
macro GL_T4F_C4F_N3F_V4F			    { 0x2A2D }

# matrix mode
macro GL_MATRIX_MODE { 0x0BA0 }
macro GL_MODELVIEW	 { 0x1700 }
macro GL_PROJECTION	 { 0x1701 }
macro GL_TEXTURE	 { 0x1702 }

# points
macro GL_POINT_SMOOTH			{ 0x0B10 }
macro GL_POINT_SIZE			    { 0x0B11 }
macro GL_POINT_SIZE_GRANULARITY { 0x0B13 }
macro GL_POINT_SIZE_RANGE		{ 0x0B12 }

# lines
macro GL_LINE_SMOOTH			{ 0x0B20 }
macro GL_LINE_STIPPLE			{ 0x0B24 }
macro GL_LINE_STIPPLE_PATTERN	{ 0x0B25 }
macro GL_LINE_STIPPLE_REPEAT	{ 0x0B26 }
macro GL_LINE_WIDTH			    { 0x0B21 }
macro GL_LINE_WIDTH_GRANULARITY	{ 0x0B23 }
macro GL_LINE_WIDTH_RANGE		{ 0x0B22 }

# polygons
macro GL_POINT				    { 0x1B00 }
macro GL_LINE					{ 0x1B01 }
macro GL_FILL					{ 0x1B02 }
macro GL_CW					    { 0x0900 }
macro GL_CCW					{ 0x0901 }
macro GL_FRONT				    { 0x0404 }
macro GL_BACK					{ 0x0405 }
macro GL_POLYGON_MODE			{ 0x0B40 }
macro GL_POLYGON_SMOOTH			{ 0x0B41 }
macro GL_POLYGON_STIPPLE		{ 0x0B42 }
macro GL_EDGE_FLAG				{ 0x0B43 }
macro GL_CULL_FACE				{ 0x0B44 }
macro GL_CULL_FACE_MODE			{ 0x0B45 }
macro GL_FRONT_FACE				{ 0x0B46 }
macro GL_POLYGON_OFFSET_FACTOR	{ 0x8038 }
macro GL_POLYGON_OFFSET_UNITS	{ 0x2A00 }
macro GL_POLYGON_OFFSET_POINT	{ 0x2A01 }
macro GL_POLYGON_OFFSET_LINE	{ 0x2A02 }
macro GL_POLYGON_OFFSET_FILL	{ 0x8037 }

# display lists
macro GL_COMPILE				{ 0x1300 }
macro GL_COMPILE_AND_EXECUTE	{ 0x1301 }
macro GL_LIST_BASE				{ 0x0B32 }
macro GL_LIST_INDEX				{ 0x0B33 }
macro GL_LIST_MODE				{ 0x0B30 }

# depth buffer
macro GL_NEVER				{ 0x0200 }
macro GL_LESS				{ 0x0201 }
macro GL_EQUAL				{ 0x0202 }
macro GL_LEQUAL				{ 0x0203 }
macro GL_GREATER			{ 0x0204 }
macro GL_NOTEQUAL			{ 0x0205 }
macro GL_GEQUAL				{ 0x0206 }
macro GL_ALWAYS				{ 0x0207 }
macro GL_DEPTH_TEST			{ 0x0B71 }
macro GL_DEPTH_BITS			{ 0x0D56 }
macro GL_DEPTH_CLEAR_VALUE  { 0x0B73 }
macro GL_DEPTH_FUNC			{ 0x0B74 }
macro GL_DEPTH_RANGE		{ 0x0B70 }
macro GL_DEPTH_WRITEMASK	{ 0x0B72 }
macro GL_DEPTH_COMPONENT	{ 0x1902 }

# lighting
macro GL_LIGHTING			{ 0x0B50 }
macro GL_LIGHT0				{ 0x4000 }
macro GL_LIGHT1				{ 0x4001 }
macro GL_LIGHT2				{ 0x4002 }
macro GL_LIGHT3				{ 0x4003 }
macro GL_LIGHT4				{ 0x4004 }
macro GL_LIGHT5				{ 0x4005 }
macro GL_LIGHT6				{ 0x4006 }
macro GL_LIGHT7				{ 0x4007 }
macro GL_SPOT_EXPONENT		{ 0x1205 }
macro GL_SPOT_CUTOFF		{ 0x1206 }
macro GL_CONSTANT_ATTENUATION   { 0x1207 }
macro GL_LINEAR_ATTENUATION		{ 0x1208 }
macro GL_QUADRATIC_ATTENUATION	{ 0x1209 }
macro GL_AMBIENT		    { 0x1200 }
macro GL_DIFFUSE		    { 0x1201 }
macro GL_SPECULAR		    { 0x1202 }
macro GL_SHININESS		    { 0x1601 }
macro GL_EMISSION		    { 0x1600 }
macro GL_POSITION		    { 0x1203 }
macro GL_SPOT_DIRECTION	    { 0x1204 }
macro GL_AMBIENT_AND_DIFFUSE { 0x1602 }
macro GL_COLOR_INDEXES	    { 0x1603 }
macro GL_LIGHT_MODEL_TWO_SIDE	  { 0x0B52 }
macro GL_LIGHT_MODEL_LOCAL_VIEWER { 0x0B51 }
macro GL_LIGHT_MODEL_AMBIENT { 0x0B53 }
macro GL_FRONT_AND_BACK		{ 0x0408 }
macro GL_SHADE_MODEL		{ 0x0B54 }
macro GL_FLAT				{ 0x1D00 }
macro GL_SMOOTH				{ 0x1D01 }
macro GL_COLOR_MATERIAL		{ 0x0B57 }
macro GL_COLOR_MATERIAL_FACE	  { 0x0B55 }
macro GL_COLOR_MATERIAL_PARAMETER { 0x0B56 }
macro GL_NORMALIZE			{ 0x0BA1 }

# user clipping planes
macro GL_CLIP_PLANE0 { 0x3000 }
macro GL_CLIP_PLANE1 { 0x3001 }
macro GL_CLIP_PLANE2 { 0x3002 }
macro GL_CLIP_PLANE3 { 0x3003 }
macro GL_CLIP_PLANE4 { 0x3004 }
macro GL_CLIP_PLANE5 { 0x3005 }

# accumulation buffer
macro GL_ACCUM_RED_BITS		{ 0x0D58 }
macro GL_ACCUM_GREEN_BITS	{ 0x0D59 }
macro GL_ACCUM_BLUE_BITS	{ 0x0D5A }
macro GL_ACCUM_ALPHA_BITS	{ 0x0D5B }
macro GL_ACCUM_CLEAR_VALUE	{ 0x0B80 }
macro GL_ACCUM				{ 0x0100 }
macro GL_ADD				{ 0x0104 }
macro GL_LOAD				{ 0x0101 }
macro GL_MULT				{ 0x0103 }
macro GL_RETURN				{ 0x0102 }

# Alpha testing 
macro GL_ALPHA_TEST			{ 0x0BC0 }
macro GL_ALPHA_TEST_REF		{ 0x0BC2 }
macro GL_ALPHA_TEST_FUNC	{ 0x0BC1 }

# Blending 
macro GL_BLEND				    { 0x0BE2 }
macro GL_BLEND_SRC				{ 0x0BE1 }
macro GL_BLEND_DST				{ 0x0BE0 }
macro GL_ZERO					{ 0 }
macro GL_ONE					{ 1 }
macro GL_SRC_COLOR				{ 0x0300 }
macro GL_ONE_MINUS_SRC_COLOR	{ 0x0301 }
macro GL_SRC_ALPHA				{ 0x0302 }
macro GL_ONE_MINUS_SRC_ALPHA	{ 0x0303 }
macro GL_DST_ALPHA				{ 0x0304 }
macro GL_ONE_MINUS_DST_ALPHA	{ 0x0305 }
macro GL_DST_COLOR				{ 0x0306 }
macro GL_ONE_MINUS_DST_COLOR	{ 0x0307 }
macro GL_SRC_ALPHA_SATURATE		{ 0x0308 }

# Render Mode 
macro GL_FEEDBACK   { 0x1C01 }
macro GL_RENDER		{ 0x1C00 }
macro GL_SELECT		{ 0x1C02 }

# Feedback 
macro GL_2D					{ 0x0600 }
macro GL_3D					{ 0x0601 }
macro GL_3D_COLOR			{ 0x0602 }
macro GL_3D_COLOR_TEXTURE	{ 0x0603 }
macro GL_4D_COLOR_TEXTURE	{ 0x0604 }
macro GL_POINT_TOKEN		{ 0x0701 }
macro GL_LINE_TOKEN			{ 0x0702 }
macro GL_LINE_RESET_TOKEN	{ 0x0707 }
macro GL_POLYGON_TOKEN		{ 0x0703 }
macro GL_BITMAP_TOKEN		{ 0x0704 }
macro GL_DRAW_PIXEL_TOKEN	{ 0x0705 }
macro GL_COPY_PIXEL_TOKEN	{ 0x0706 }
macro GL_PASS_THROUGH_TOKEN	{ 0x0700 }
macro GL_FEEDBACK_BUFFER_POINTER { 0x0DF0 }
macro GL_FEEDBACK_BUFFER_SIZE	 { 0x0DF1 }
macro GL_FEEDBACK_BUFFER_TYPE	 { 0x0DF2 }

# Selection 
macro GL_SELECTION_BUFFER_POINTER	{ 0x0DF3 }
macro GL_SELECTION_BUFFER_SIZE		{ 0x0DF4 }

# Fog 
macro GL_FOG			{ 0x0B60 } 
macro GL_FOG_MODE		{ 0x0B65 } 
macro GL_FOG_DENSITY	{ 0x0B62 } 
macro GL_FOG_COLOR		{ 0x0B66 } 
macro GL_FOG_INDEX		{ 0x0B61 } 
macro GL_FOG_START		{ 0x0B63 } 
macro GL_FOG_END		{ 0x0B64 } 
macro GL_LINEAR		    { 0x2601 } 
macro GL_EXP2			{ 0x0801 } 
macro GL_EXP			{ 0x0800 } 

# Logic Ops 
macro GL_LOGIC_OP		{ 0x0BF1 }
macro GL_INDEX_LOGIC_OP	{ 0x0BF1 }
macro GL_COLOR_LOGIC_OP	{ 0x0BF2 }
macro GL_LOGIC_OP_MODE	{ 0x0BF0 }
macro GL_CLEAR			{ 0x1500 }
macro GL_SET			{ 0x150F }
macro GL_COPY			{ 0x1503 }
macro GL_COPY_INVERTED	{ 0x150C }
macro GL_NOOP			{ 0x1505 }
macro GL_INVERT			{ 0x150A }
macro GL_AND			{ 0x1501 }
macro GL_NAND			{ 0x150E }
macro GL_OR				{ 0x1507 }
macro GL_NOR			{ 0x1508 }
macro GL_XOR			{ 0x1506 }
macro GL_EQUIV			{ 0x1509 }
macro GL_AND_REVERSE	{ 0x1502 }
macro GL_AND_INVERTED	{ 0x1504 }
macro GL_OR_REVERSE		{ 0x150B }
macro GL_OR_INVERTED	{ 0x150D }

# Stencil 
macro GL_STENCIL_BITS				{ 0x0D57 }
macro GL_STENCIL_TEST				{ 0x0B90 }
macro GL_STENCIL_CLEAR_VALUE		{ 0x0B91 }
macro GL_STENCIL_FUNC				{ 0x0B92 }
macro GL_STENCIL_VALUE_MASK			{ 0x0B93 }
macro GL_STENCIL_FAIL				{ 0x0B94 }
macro GL_STENCIL_PASS_DEPTH_FAIL	{ 0x0B95 }
macro GL_STENCIL_PASS_DEPTH_PASS	{ 0x0B96 }
macro GL_STENCIL_REF				{ 0x0B97 }
macro GL_STENCIL_WRITEMASK			{ 0x0B98 }
macro GL_STENCIL_INDEX			    { 0x1901 }
macro GL_KEEP					    { 0x1E00 }
macro GL_REPLACE				    { 0x1E01 }
macro GL_INCR					    { 0x1E02 }
macro GL_DECR					    { 0x1E03 }

# Buffers, Pixel Drawing/Reading 
macro GL_NONE	{ 0 }
macro GL_LEFT	{ 0x0406 }
macro GL_RIGHT	{ 0x0407 }
#GL_FRONT					0x0404 
#GL_BACK					0x0405 
#GL_FRONT_AND_BACK				0x0408 
macro GL_FRONT_LEFT			{ 0x0400 }
macro GL_FRONT_RIGHT		{ 0x0401 }
macro GL_BACK_LEFT			{ 0x0402 }
macro GL_BACK_RIGHT			{ 0x0403 }
macro GL_AUX0				{ 0x0409 }
macro GL_AUX1				{ 0x040A }
macro GL_AUX2				{ 0x040B }
macro GL_AUX3				{ 0x040C }
macro GL_COLOR_INDEX		{ 0x1900 }
macro GL_RED				{ 0x1903 }
macro GL_GREEN			    { 0x1904 }
macro GL_BLUE				{ 0x1905 }
macro GL_ALPHA			    { 0x1906 }
macro GL_LUMINANCE			{ 0x1909 }
macro GL_LUMINANCE_ALPHA	{ 0x190A }
macro GL_ALPHA_BITS			{ 0x0D55 }
macro GL_RED_BITS			{ 0x0D52 }
macro GL_GREEN_BITS			{ 0x0D53 }
macro GL_BLUE_BITS			{ 0x0D54 }
macro GL_INDEX_BITS			{ 0x0D51 }
macro GL_SUBPIXEL_BITS		{ 0x0D50 }
macro GL_AUX_BUFFERS		{ 0x0C00 }
macro GL_READ_BUFFER		{ 0x0C02 }
macro GL_DRAW_BUFFER		{ 0x0C01 }
macro GL_DOUBLEBUFFER		{ 0x0C32 }
macro GL_STEREO				{ 0x0C33 }
macro GL_BITMAP				{ 0x1A00 }
macro GL_COLOR				{ 0x1800 }
macro GL_DEPTH				{ 0x1801 }
macro GL_STENCIL			{ 0x1802 }
macro GL_DITHER				{ 0x0BD0 }
macro GL_RGB				{ 0x1907 }
macro GL_RGBA				{ 0x1908 }

# Implementation limits 
macro GL_MAX_LIST_NESTING			    { 0x0B31 }
macro GL_MAX_EVAL_ORDER			        { 0x0D30 }
macro GL_MAX_LIGHTS				        { 0x0D31 }
macro GL_MAX_CLIP_PLANES			    { 0x0D32 }
macro GL_MAX_TEXTURE_SIZE			    { 0x0D33 }
macro GL_MAX_PIXEL_MAP_TABLE			{ 0x0D34 }
macro GL_MAX_ATTRIB_STACK_DEPTH		    { 0x0D35 }
macro GL_MAX_MODELVIEW_STACK_DEPTH		{ 0x0D36 }
macro GL_MAX_NAME_STACK_DEPTH			{ 0x0D37 }
macro GL_MAX_PROJECTION_STACK_DEPTH		{ 0x0D38 }
macro GL_MAX_TEXTURE_STACK_DEPTH		{ 0x0D39 }
macro GL_MAX_VIEWPORT_DIMS			    { 0x0D3A }
macro GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	{ 0x0D3B }

# Gets 
macro GL_ATTRIB_STACK_DEPTH			    { 0x0BB0 }
macro GL_CLIENT_ATTRIB_STACK_DEPTH		{ 0x0BB1 }
macro GL_COLOR_CLEAR_VALUE			    { 0x0C22 }
macro GL_COLOR_WRITEMASK			    { 0x0C23 }
macro GL_CURRENT_INDEX			        { 0x0B01 }
macro GL_CURRENT_COLOR			        { 0x0B00 }
macro GL_CURRENT_NORMAL			        { 0x0B02 }
macro GL_CURRENT_RASTER_COLOR			{ 0x0B04 }
macro GL_CURRENT_RASTER_DISTANCE		{ 0x0B09 }
macro GL_CURRENT_RASTER_INDEX			{ 0x0B05 }
macro GL_CURRENT_RASTER_POSITION		{ 0x0B07 }
macro GL_CURRENT_RASTER_TEXTURE_COORDS	{ 0x0B06 }
macro GL_CURRENT_RASTER_POSITION_VALID	{ 0x0B08 }
macro GL_CURRENT_TEXTURE_COORDS		    { 0x0B03 }
macro GL_INDEX_CLEAR_VALUE			    { 0x0C20 }
macro GL_INDEX_MODE				        { 0x0C30 }
macro GL_INDEX_WRITEMASK			    { 0x0C21 }
macro GL_MODELVIEW_MATRIX			    { 0x0BA6 }
macro GL_MODELVIEW_STACK_DEPTH		    { 0x0BA3 }
macro GL_NAME_STACK_DEPTH			    { 0x0D70 }
macro GL_PROJECTION_MATRIX			    { 0x0BA7 }
macro GL_PROJECTION_STACK_DEPTH		    { 0x0BA4 }
macro GL_RENDER_MODE				    { 0x0C40 }
macro GL_RGBA_MODE				        { 0x0C31 }
macro GL_TEXTURE_MATRIX			        { 0x0BA8 }
macro GL_TEXTURE_STACK_DEPTH			{ 0x0BA5 }
macro GL_VIEWPORT				        { 0x0BA2 }

# Evaluators 
macro GL_AUTO_NORMAL			{ 0x0D80 }
macro GL_MAP1_COLOR_4			{ 0x0D90 }
macro GL_MAP1_INDEX				{ 0x0D91 }
macro GL_MAP1_NORMAL			{ 0x0D92 }
macro GL_MAP1_TEXTURE_COORD_1	{ 0x0D93 }
macro GL_MAP1_TEXTURE_COORD_2	{ 0x0D94 }
macro GL_MAP1_TEXTURE_COORD_3	{ 0x0D95 }
macro GL_MAP1_TEXTURE_COORD_4	{ 0x0D96 }
macro GL_MAP1_VERTEX_3			{ 0x0D97 }
macro GL_MAP1_VERTEX_4			{ 0x0D98 }
macro GL_MAP2_COLOR_4			{ 0x0DB0 }
macro GL_MAP2_INDEX				{ 0x0DB1 }
macro GL_MAP2_NORMAL			{ 0x0DB2 }
macro GL_MAP2_TEXTURE_COORD_1	{ 0x0DB3 }
macro GL_MAP2_TEXTURE_COORD_2	{ 0x0DB4 }
macro GL_MAP2_TEXTURE_COORD_3	{ 0x0DB5 }
macro GL_MAP2_TEXTURE_COORD_4	{ 0x0DB6 }
macro GL_MAP2_VERTEX_3			{ 0x0DB7 }
macro GL_MAP2_VERTEX_4			{ 0x0DB8 }
macro GL_MAP1_GRID_DOMAIN		{ 0x0DD0 }
macro GL_MAP1_GRID_SEGMENTS		{ 0x0DD1 }
macro GL_MAP2_GRID_DOMAIN		{ 0x0DD2 }
macro GL_MAP2_GRID_SEGMENTS		{ 0x0DD3 }
macro GL_COEFF				    { 0x0A00 }
macro GL_ORDER				    { 0x0A01 }
macro GL_DOMAIN				    { 0x0A02 }

# Hints 
macro GL_PERSPECTIVE_CORRECTION_HINT	{ 0x0C50 }
macro GL_POINT_SMOOTH_HINT			    { 0x0C51 }
macro GL_LINE_SMOOTH_HINT			    { 0x0C52 }
macro GL_POLYGON_SMOOTH_HINT			{ 0x0C53 }
macro GL_FOG_HINT				        { 0x0C54 }
macro GL_DONT_CARE				        { 0x1100 }
macro GL_FASTEST				        { 0x1101 }
macro GL_NICEST				            { 0x1102 }

# Scissor box 
macro GL_SCISSOR_BOX	{ 0x0C10 }
macro GL_SCISSOR_TEST	{ 0x0C11 }

# Pixel Mode / Transfer 
macro GL_MAP_COLOR				    { 0x0D10 }
macro GL_MAP_STENCIL				{ 0x0D11 }
macro GL_INDEX_SHIFT				{ 0x0D12 }
macro GL_INDEX_OFFSET				{ 0x0D13 }
macro GL_RED_SCALE				    { 0x0D14 }
macro GL_RED_BIAS				    { 0x0D15 }
macro GL_GREEN_SCALE				{ 0x0D18 }
macro GL_GREEN_BIAS				    { 0x0D19 }
macro GL_BLUE_SCALE				    { 0x0D1A }
macro GL_BLUE_BIAS				    { 0x0D1B }
macro GL_ALPHA_SCALE				{ 0x0D1C }
macro GL_ALPHA_BIAS				    { 0x0D1D }
macro GL_DEPTH_SCALE				{ 0x0D1E }
macro GL_DEPTH_BIAS				    { 0x0D1F }
macro GL_PIXEL_MAP_S_TO_S_SIZE		{ 0x0CB1 }
macro GL_PIXEL_MAP_I_TO_I_SIZE		{ 0x0CB0 }
macro GL_PIXEL_MAP_I_TO_R_SIZE		{ 0x0CB2 }
macro GL_PIXEL_MAP_I_TO_G_SIZE		{ 0x0CB3 }
macro GL_PIXEL_MAP_I_TO_B_SIZE		{ 0x0CB4 }
macro GL_PIXEL_MAP_I_TO_A_SIZE		{ 0x0CB5 }
macro GL_PIXEL_MAP_R_TO_R_SIZE		{ 0x0CB6 }
macro GL_PIXEL_MAP_G_TO_G_SIZE		{ 0x0CB7 }
macro GL_PIXEL_MAP_B_TO_B_SIZE		{ 0x0CB8 }
macro GL_PIXEL_MAP_A_TO_A_SIZE		{ 0x0CB9 }
macro GL_PIXEL_MAP_S_TO_S			{ 0x0C71 }
macro GL_PIXEL_MAP_I_TO_I			{ 0x0C70 }
macro GL_PIXEL_MAP_I_TO_R			{ 0x0C72 }
macro GL_PIXEL_MAP_I_TO_G			{ 0x0C73 }
macro GL_PIXEL_MAP_I_TO_B			{ 0x0C74 }
macro GL_PIXEL_MAP_I_TO_A			{ 0x0C75 }
macro GL_PIXEL_MAP_R_TO_R			{ 0x0C76 }
macro GL_PIXEL_MAP_G_TO_G			{ 0x0C77 }
macro GL_PIXEL_MAP_B_TO_B			{ 0x0C78 }
macro GL_PIXEL_MAP_A_TO_A			{ 0x0C79 }
macro GL_PACK_ALIGNMENT			    { 0x0D05 }
macro GL_PACK_LSB_FIRST			    { 0x0D01 }
macro GL_PACK_ROW_LENGTH			{ 0x0D02 }
macro GL_PACK_SKIP_PIXELS			{ 0x0D04 }
macro GL_PACK_SKIP_ROWS			    { 0x0D03 }
macro GL_PACK_SWAP_BYTES			{ 0x0D00 }
macro GL_UNPACK_ALIGNMENT			{ 0x0CF5 }
macro GL_UNPACK_LSB_FIRST			{ 0x0CF1 }
macro GL_UNPACK_ROW_LENGTH			{ 0x0CF2 }
macro GL_UNPACK_SKIP_PIXELS			{ 0x0CF4 }
macro GL_UNPACK_SKIP_ROWS			{ 0x0CF3 }
macro GL_UNPACK_SWAP_BYTES			{ 0x0CF0 }
macro GL_ZOOM_X				        { 0x0D16 }
macro GL_ZOOM_Y				        { 0x0D17 }

# Texture mapping 
macro GL_TEXTURE_ENV				{ 0x2300 }
macro GL_TEXTURE_ENV_MODE			{ 0x2200 }
macro GL_TEXTURE_1D				    { 0x0DE0 }
macro GL_TEXTURE_2D				    { 0x0DE1 }
macro GL_TEXTURE_WRAP_S			    { 0x2802 }
macro GL_TEXTURE_WRAP_T			    { 0x2803 }
macro GL_TEXTURE_MAG_FILTER			{ 0x2800 }
macro GL_TEXTURE_MIN_FILTER			{ 0x2801 }
macro GL_TEXTURE_ENV_COLOR			{ 0x2201 }
macro GL_TEXTURE_GEN_S			    { 0x0C60 }
macro GL_TEXTURE_GEN_T			    { 0x0C61 }
macro GL_TEXTURE_GEN_R			    { 0x0C62 }
macro GL_TEXTURE_GEN_Q			    { 0x0C63 }
macro GL_TEXTURE_GEN_MODE			{ 0x2500 }
macro GL_TEXTURE_BORDER_COLOR		{ 0x1004 }
macro GL_TEXTURE_WIDTH			    { 0x1000 }
macro GL_TEXTURE_HEIGHT			    { 0x1001 }
macro GL_TEXTURE_BORDER			    { 0x1005 }
macro GL_TEXTURE_COMPONENTS			{ 0x1003 }
macro GL_TEXTURE_RED_SIZE			{ 0x805C }
macro GL_TEXTURE_GREEN_SIZE			{ 0x805D }
macro GL_TEXTURE_BLUE_SIZE			{ 0x805E }
macro GL_TEXTURE_ALPHA_SIZE			{ 0x805F }
macro GL_TEXTURE_LUMINANCE_SIZE		{ 0x8060 }
macro GL_TEXTURE_INTENSITY_SIZE		{ 0x8061 }
macro GL_NEAREST_MIPMAP_NEAREST		{ 0x2700 }
macro GL_NEAREST_MIPMAP_LINEAR		{ 0x2702 }
macro GL_LINEAR_MIPMAP_NEAREST		{ 0x2701 }
macro GL_LINEAR_MIPMAP_LINEAR		{ 0x2703 }
macro GL_OBJECT_LINEAR			    { 0x2401 }
macro GL_OBJECT_PLANE				{ 0x2501 }
macro GL_EYE_LINEAR				    { 0x2400 }
macro GL_EYE_PLANE				    { 0x2502 }
macro GL_SPHERE_MAP				    { 0x2402 }
macro GL_DECAL				        { 0x2101 }
macro GL_MODULATE			        { 0x2100 }
macro GL_NEAREST			        { 0x2600 }
macro GL_REPEAT				        { 0x2901 }
macro GL_CLAMP				        { 0x2900 }
macro GL_S					        { 0x2000 }
macro GL_T					        { 0x2001 }
macro GL_R					        { 0x2002 }
macro GL_Q					        { 0x2003 }

# Utility 
macro GL_VENDOR				    { 0x1F00 }
macro GL_RENDERER				{ 0x1F01 }
macro GL_VERSION				{ 0x1F02 }
macro GL_EXTENSIONS				{ 0x1F03 }

# Errors 
macro GL_NO_ERROR 				{ 0 }
macro GL_INVALID_ENUM			{ 0x0500 }
macro GL_INVALID_VALUE			{ 0x0501 }
macro GL_INVALID_OPERATION		{ 0x0502 }
macro GL_STACK_OVERFLOW			{ 0x0503 }
macro GL_STACK_UNDERFLOW		{ 0x0504 }
macro GL_OUT_OF_MEMORY			{ 0x0505 }

# glPush/PopAttrib bits 
macro GL_CURRENT_BIT			{ 0x00000001 }
macro GL_POINT_BIT				{ 0x00000002 }
macro GL_LINE_BIT				{ 0x00000004 }
macro GL_POLYGON_BIT			{ 0x00000008 }
macro GL_POLYGON_STIPPLE_BIT	{ 0x00000010 }
macro GL_PIXEL_MODE_BIT			{ 0x00000020 }
macro GL_LIGHTING_BIT			{ 0x00000040 }
macro GL_FOG_BIT				{ 0x00000080 }
macro GL_DEPTH_BUFFER_BIT		{ 0x00000100 }
macro GL_ACCUM_BUFFER_BIT		{ 0x00000200 }
macro GL_STENCIL_BUFFER_BIT		{ 0x00000400 }
macro GL_VIEWPORT_BIT			{ 0x00000800 }
macro GL_TRANSFORM_BIT			{ 0x00001000 }
macro GL_ENABLE_BIT				{ 0x00002000 }
macro GL_COLOR_BUFFER_BIT		{ 0x00004000 }
macro GL_HINT_BIT				{ 0x00008000 }
macro GL_EVAL_BIT				{ 0x00010000 }
macro GL_LIST_BIT				{ 0x00020000 }
macro GL_TEXTURE_BIT			{ 0x00040000 }
macro GL_SCISSOR_BIT			{ 0x00080000 }
macro GL_ALL_ATTRIB_BITS		{ 0xFFFFFFFF }


# OpenGL 1.1 
macro GL_PROXY_TEXTURE_1D			{ 0x8063 }
macro GL_PROXY_TEXTURE_2D			{ 0x8064 }
macro GL_TEXTURE_PRIORITY			{ 0x8066 }
macro GL_TEXTURE_RESIDENT			{ 0x8067 }
macro GL_TEXTURE_BINDING_1D			{ 0x8068 }
macro GL_TEXTURE_BINDING_2D			{ 0x8069 }
macro GL_TEXTURE_INTERNAL_FORMAT	{ 0x1003 }
macro GL_ALPHA4				        { 0x803B }
macro GL_ALPHA8				        { 0x803C }
macro GL_ALPHA12				    { 0x803D }
macro GL_ALPHA16				    { 0x803E }
macro GL_LUMINANCE4				    { 0x803F }
macro GL_LUMINANCE8				    { 0x8040 }
macro GL_LUMINANCE12				{ 0x8041 }
macro GL_LUMINANCE16				{ 0x8042 }
macro GL_LUMINANCE4_ALPHA4			{ 0x8043 }
macro GL_LUMINANCE6_ALPHA2			{ 0x8044 }
macro GL_LUMINANCE8_ALPHA8			{ 0x8045 }
macro GL_LUMINANCE12_ALPHA4			{ 0x8046 }
macro GL_LUMINANCE12_ALPHA12		{ 0x8047 }
macro GL_LUMINANCE16_ALPHA16		{ 0x8048 }
macro GL_INTENSITY				    { 0x8049 }
macro GL_INTENSITY4				    { 0x804A }
macro GL_INTENSITY8				    { 0x804B }
macro GL_INTENSITY12				{ 0x804C }
macro GL_INTENSITY16				{ 0x804D }
macro GL_R3_G3_B2				    { 0x2A10 }
macro GL_RGB4					    { 0x804F }
macro GL_RGB5					    { 0x8050 }
macro GL_RGB8					    { 0x8051 }
macro GL_RGB10				        { 0x8052 }
macro GL_RGB12				        { 0x8053 }
macro GL_RGB16				        { 0x8054 }
macro GL_RGBA2				        { 0x8055 }
macro GL_RGBA4				        { 0x8056 }
macro GL_RGB5_A1				    { 0x8057 }
macro GL_RGBA8				        { 0x8058 }
macro GL_RGB10_A2				    { 0x8059 }
macro GL_RGBA12				        { 0x805A }
macro GL_RGBA16				        { 0x805B }
macro GL_CLIENT_PIXEL_STORE_BIT		{ 0x00000001 }
macro GL_CLIENT_VERTEX_ARRAY_BIT	{ 0x00000002 }
macro GL_ALL_CLIENT_ATTRIB_BITS 	{ 0xFFFFFFFF }
macro GL_CLIENT_ALL_ATTRIB_BITS 	{ 0xFFFFFFFF }

#[
* Miscellaneous
]#

extern {

    fn glClearIndex(c: GLfloat);
    fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf);
    fn glClear(mask: GLbitfield);
    fn glIndexMask(mask: GLuint);
    fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
    fn glAlphaFunc(func: GLenum, ref: GLclampf);
    fn glBlendFunc(sfactor: GLenum, dfactor: GLenum);
    fn glLogicOp(opcode: GLenum);
    fn glCullFace(mode: GLenum);
    fn glFontFace(mode: GLenum);
    fn glPointSize(size: GLfloat);
    fn glLineWidth(width: GLfloat);
    fn glLineStripple(factor: GLint, pattern: GLushort);
    fn glPolygonMode(face: GLenum, mode: GLenum);
    fn glPolygonStripple(mask: const &GLubyte);
    fn glGetPolygonStripple(mask: &GLubyte);
    fn glEdgeFlag(flag: GLboolean);
    fn glEdgeFlagv(flag: const &GLboolean);
    fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    fn glClipPlane(plane: GLenum, equation: const &GLdouble);
    fn glGetClipPlane(plane: GLenum, equation: &GLdouble);
    fn glDrawBuffer(mode: GLenum);
    fn glReadBuffer(mode: GLenum);
    fn glEnable(cap: GLenum);
    fn glDisable(cap: GLenum);
    fn glIsEnabled(cap: GLenum): GLboolean;
    fn glEnableClientState(cap: GLenum);
    fn glDisableClientState(cap: GLenum);

    fn glGetBooleanv(pname: GLenum, params: &GLboolean);
    fn glGetDoublev(pname: GLenum, params: &GLdouble);
    fn glGetFloatv(pname: GLenum, params: &GLfloat);
    fn glGetInteger(pname: GLenum, params: &GLint);

    fn glPushAttrib(mask: GLbitfield);
    fn glPopAttrib();
    fn glPushClientAttrib(mask: GLbitfield);
    fn glPopClientAttrib();

    fn glRenderMode(mode: GLenum): GLint;
    fn glGetError(): GLenum;
    fn glGetString(name: GLenum): const &GLubyte;
    fn glFinish();
    fn glFlush();
    fn glHint(target: GLenum, mode: GLenum);

    # Depth Buffer
    fn glClearDepth(depth: GLclampd);
    fn glDepthFunc(func: GLenum);
    fn glDepthMask(flag: GLboolean);
    fn glDepthRange(near_val: GLclampd, far_val: GLclampd);

    # Accumulation Buffer
    fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
    fn glAccum(op: GLenum, value: GLfloat);

    # Transformation
    fn glMatrixMode(mode: GLenum);
    fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble);
    fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, near_val: GLdouble, far_val: GLdouble);
    fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    fn glPushMatrix();
    fn glPopMatrix();
    fn glLoadIdentity();
    fn glLoadMatrixd(m: const &GLdouble);
    fn glLoadMatrixf(m: const &GLfloat);
    fn glMultMatrixd(m: const &GLdouble);
    fn glMultMatrixf(m: const &GLfloat);
    fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);
    fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
    fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble);
    fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat);
    fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble);
    fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat);

    # Display Lists
    fn glIsList(list: GLuint): GLboolean;
    fn glDeleteLists(list: GLuint, range: GLsizei);
    fn glGenLists(range: GLsizei): GLuint;
    fn glNewList(list: GLuint, mode: GLenum);
    fn glEndList();
    fn glCallList(list: GLuint);
    fn glCallLists(n: GLsizei, kind: GLenum, lists: const &GLvoid);
    fn glListBase(base: GLuint);

    # Drawing functions
    fn glBegin(mode: GLenum);
    fn glEnd();

    fn glVertex2d(x: GLdouble, y: GLdouble);
    fn glVertex2f(x: GLfloat, y: GLfloat);
    fn glVertex2i(x: GLint, y: GLint);
    fn glVertex2s(x: GLshort, y: GLshort);

    fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble);
    fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat);
    fn glVertex3i(x: GLint, y: GLint, z: GLint);
    fn glVertex3s(x: GLshort, y: GLshort, z: GLshort);

    fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint);
    fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);

    fn glVertex2dv(v: const &GLdouble);
    fn glVertex2fv(v: const &GLfloat);
    fn glVertex2iv(v: const &GLint);
    fn glVertex2sv(v: const &GLshort);   

    fn glVertex3dv(v: const &GLdouble);
    fn glVertex3fv(v: const &GLfloat);
    fn glVertex3iv(v: const &GLint);
    fn glVertex3sv(v: const &GLshort);  

    fn glVertex4dv(v: const &GLdouble);
    fn glVertex4fv(v: const &GLfloat);
    fn glVertex4iv(v: const &GLint);
    fn glVertex4sv(v: const &GLshort);  

    fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte);
    fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble);
    fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat);
    fn glNormal3i(nx: GLint, ny: GLint, nz: GLint);
    fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort);  

    fn glNormal3bv(v: const &GLbyte);
    fn glNormal3dv(v: const &GLdouble); 
    fn glNormal3fv(v: const &GLfloat); 
    fn glNormal3iv(v: const &GLint); 
    fn glNormal3sv(v: const &GLshort);

    fn glIndexd(c: GLdouble); 
    fn glIndexf(c: GLfloat);
    fn glIndexi(c: GLint);
    fn glIndexs(c: GLshort);

    fn glIndexdv(c: const &GLdouble);
    fn glIndexfv(c: const &GLfloat);
    fn glIndexiv(c: const &GLint);
    fn glIndexsv(c: const &GLshort);

    fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);
    fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);
    fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);
    fn glColor3i(red: GLint, green: GLint, blue: GLint);
    fn glColor3s(red: GLshort, green: GLshort, blue: GLshort);
    fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);
    fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint);
    fn glColor3us(red: GLushort, green: GLushort, blue: GLushort);

    fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpah: GLbyte);
    fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble);
    fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
    fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint);
    fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort);
    fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte);
    fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);
    fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort);

    fn glColor3bv(v: const &GLbyte);
    fn glColor3dv(v: const &GLdouble);
    fn glColor3fv(v: const &GLfloat);
    fn glColor3iv(v: const &GLint);
    fn glColor3sv(v: const &GLshort);
    fn glColor3ubv(v: const &GLubyte);
    fn glColor3uiv(v: const &GLuint);
    fn glColor3usv(v: const &GLushort);

    fn glColor4bv(v: const &GLbyte);
    fn glColor4dv(v: const &GLdouble);
    fn glColor4fv(v: const &GLfloat);
    fn glColor4iv(v: const &GLint);
    fn glColor4sv(v: const &GLshort);
    fn glColor4ubv(v: const &GLubyte);
    fn glColor4uiv(v: const &GLuint);
    fn glColor4usv(v: const &GLushort);

    fn glTexCoord1d(s: GLdouble);
    fn glTexCoord1f(s: GLfloat);
    fn glTexCoord1i(s: GLint);
    fn glTexCoord1s(s: GLshort);

    fn glTexCoord2d(s: GLdouble, t: GLdouble);
    fn glTexCoord2f(s: GLfloat, t: GLfloat);
    fn glTexCoord2i(s: GLint, t: GLint);
    fn glTexCoord2s(s: GLshort, t: GLshort);

    fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble);
    fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat);
    fn glTexCoord3i(s: GLint, t: GLint, r: GLint);
    fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort);

    fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
    fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
    fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint);
    fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort);

    fn glTexCoord1dv(v: const &GLdouble);
    fn glTexCoord1fv(v: const &GLfloat);
    fn glTexCoord1iv(v: const &GLint);
    fn glTexCoord1sv(v: const &GLshort);

    fn glTexCoord2dv(v: const &GLdouble);
    fn glTexCoord2fv(v: const &GLfloat);
    fn glTexCoord2iv(v: const &GLint);
    fn glTexCoord2sv(v: const &GLshort);
    
    fn glTexCoord3dv(v: const &GLdouble);
    fn glTexCoord3fv(v: const &GLfloat);
    fn glTexCoord3iv(v: const &GLint);
    fn glTexCoord3sv(v: const &GLshort);

    fn glTexCoord4dv(v: const &GLdouble);
    fn glTexCoord4fv(v: const &GLfloat);
    fn glTexCoord4iv(v: const &GLint);
    fn glTexCoord4sv(v: const &GLshort);

    fn glRaster2d(x: GLdouble, y: GLdouble);
    fn glRaster2f(x: GLfloat, y: GLfloat);
    fn glRaster2i(x: GLint, y: GLint);
    fn glRaster2s(x: GLshort, y: GLshort);

    fn glRaster3d(x: GLdouble, y: GLdouble, z: GLdouble);
    fn glRaster3f(x: GLfloat, y: GLfloat, z: GLfloat);
    fn glRaster3i(x: GLint, y: GLint, z: GLint);
    fn glRaster3s(x: GLshort, y: GLshort, z: GLshort);

    fn glRaster4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    fn glRaster4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    fn glRaster4i(x: GLint, y: GLint, z: GLint, w: GLint);
    fn glRaster4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);

    fn glRaster2dv(v: const &GLdouble);
    fn glRaster2fv(v: const &GLfloat);
    fn glRaster2iv(v: const &GLint);
    fn glRaster2sv(v: const &GLshort);   

    fn glRaster3dv(v: const &GLdouble);
    fn glRaster3fv(v: const &GLfloat);
    fn glRaster3iv(v: const &GLint);
    fn glRaster3sv(v: const &GLshort);  

    fn glRaster4dv(v: const &GLdouble);
    fn glRaster4fv(v: const &GLfloat);
    fn glRaster4iv(v: const &GLint);
    fn glRaster4sv(v: const &GLshort);  

    fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble);
    fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat);
    fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint);
    fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort);

    fn glRectdv(v1: const &GLdouble, v2: const &GLdouble);
    fn glRectfv(v1: const &GLfloat, v2: const &GLfloat);
    fn glRectiv(v1: const &GLint, v2: const &GLint);
    fn glRectsv(v1: const &GLshort, v2: const &GLshort);

    # Vertex Arrays (1.1)
    fn glVertexPointer(size: GLint, kind: GLenum, stride: GLsizei, ptr: const &GLvoid);
    fn glNormalPointer(kind: GLenum, stride: GLsizei, ptr: const &GLvoid);
    fn glColorPointer(size: GLint, kind: GLenum, stride: GLsizei, ptr: const &GLvoid);
    fn glIndexPointer(kind: GLenum, stride: GLsizei, ptr: const &GLvoid);
    fn glTexCoordPointer(size: GLint, kind: GLenum, stride: GLsizei, ptr: const &GLvoid);
    fn glEdgeFlagPointer(stride: GLsizei, ptr: const &GLvoid);
    fn glGetPointerv(pname: GLenum, params: &&GLvoid);
    fn glArrayElement(i: GLint);
    fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);
    fn glDrawElements(mode: GLenum, count: GLsizei, kind: GLenum, indices: const &GLvoid);
    fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: const &GLvoid);
}