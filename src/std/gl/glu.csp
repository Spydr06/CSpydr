# an implementation of the GL/glu.h header file

[link("GLU")]

import "gl/gl.csp";

# Extensions 
macro GLU_EXT_object_space_tess          { 1 }
macro GLU_EXT_nurbs_tessellator          { 1 }

# Boolean 
macro GLU_FALSE                          { 0 }
macro GLU_TRUE                           { 1 }

# Version 
macro GLU_VERSION_1_1                    { 1 }
macro GLU_VERSION_1_2                    { 1 }
macro GLU_VERSION_1_3                    { 1 }

# StringName 
macro GLU_VERSION                        { 100800 }
macro GLU_EXTENSIONS                     { 100801 }

# ErrorCode 
macro GLU_INVALID_ENUM                   { 100900 }
macro GLU_INVALID_VALUE                  { 100901 }
macro GLU_OUT_OF_MEMORY                  { 100902 }
macro GLU_INCOMPATIBLE_GL_VERSION        { 100903 }
macro GLU_INVALID_OPERATION              { 100904 }

# NurbsDisplay 
#      GLU_FILL 
macro GLU_OUTLINE_POLYGON                { 100240 }
macro GLU_OUTLINE_PATCH                  { 100241 }

# NurbsCallback 
macro GLU_NURBS_ERROR                    { 100103 }
macro GLU_ERROR                          { 100103 }
macro GLU_NURBS_BEGIN                    { 100164 }
macro GLU_NURBS_BEGIN_EXT                { 100164 }
macro GLU_NURBS_VERTEX                   { 100165 }
macro GLU_NURBS_VERTEX_EXT               { 100165 }
macro GLU_NURBS_NORMAL                   { 100166 }
macro GLU_NURBS_NORMAL_EXT               { 100166 }
macro GLU_NURBS_COLOR                    { 100167 }
macro GLU_NURBS_COLOR_EXT                { 100167 }
macro GLU_NURBS_TEXTURE_COORD            { 100168 }
macro GLU_NURBS_TEX_COORD_EXT            { 100168 }
macro GLU_NURBS_END                      { 100169 }
macro GLU_NURBS_END_EXT                  { 100169 }
macro GLU_NURBS_BEGIN_DATA               { 100170 }
macro GLU_NURBS_BEGIN_DATA_EXT           { 100170 }
macro GLU_NURBS_VERTEX_DATA              { 100171 }
macro GLU_NURBS_VERTEX_DATA_EXT          { 100171 }
macro GLU_NURBS_NORMAL_DATA              { 100172 }
macro GLU_NURBS_NORMAL_DATA_EXT          { 100172 }
macro GLU_NURBS_COLOR_DATA               { 100173 }
macro GLU_NURBS_COLOR_DATA_EXT           { 100173 }
macro GLU_NURBS_TEXTURE_COORD_DATA       { 100174 }
macro GLU_NURBS_TEX_COORD_DATA_EXT       { 100174 }
macro GLU_NURBS_END_DATA                 { 100175 }
macro GLU_NURBS_END_DATA_EXT             { 100175 }

# NurbsError 
macro GLU_NURBS_ERROR1                   { 100251 }
macro GLU_NURBS_ERROR2                   { 100252 }
macro GLU_NURBS_ERROR3                   { 100253 }
macro GLU_NURBS_ERROR4                   { 100254 }
macro GLU_NURBS_ERROR5                   { 100255 }
macro GLU_NURBS_ERROR6                   { 100256 }
macro GLU_NURBS_ERROR7                   { 100257 }
macro GLU_NURBS_ERROR8                   { 100258 }
macro GLU_NURBS_ERROR9                   { 100259 }
macro GLU_NURBS_ERROR10                  { 100260 }
macro GLU_NURBS_ERROR11                  { 100261 }
macro GLU_NURBS_ERROR12                  { 100262 }
macro GLU_NURBS_ERROR13                  { 100263 }
macro GLU_NURBS_ERROR14                  { 100264 }
macro GLU_NURBS_ERROR15                  { 100265 }
macro GLU_NURBS_ERROR16                  { 100266 }
macro GLU_NURBS_ERROR17                  { 100267 }
macro GLU_NURBS_ERROR18                  { 100268 }
macro GLU_NURBS_ERROR19                  { 100269 }
macro GLU_NURBS_ERROR20                  { 100270 }
macro GLU_NURBS_ERROR21                  { 100271 }
macro GLU_NURBS_ERROR22                  { 100272 }
macro GLU_NURBS_ERROR23                  { 100273 }
macro GLU_NURBS_ERROR24                  { 100274 }
macro GLU_NURBS_ERROR25                  { 100275 }
macro GLU_NURBS_ERROR26                  { 100276 }
macro GLU_NURBS_ERROR27                  { 100277 }
macro GLU_NURBS_ERROR28                  { 100278 }
macro GLU_NURBS_ERROR29                  { 100279 }
macro GLU_NURBS_ERROR30                  { 100280 }
macro GLU_NURBS_ERROR31                  { 100281 }
macro GLU_NURBS_ERROR32                  { 100282 }
macro GLU_NURBS_ERROR33                  { 100283 }
macro GLU_NURBS_ERROR34                  { 100284 }
macro GLU_NURBS_ERROR35                  { 100285 }
macro GLU_NURBS_ERROR36                  { 100286 }
macro GLU_NURBS_ERROR37                  { 100287 }

# NurbsProperty 
macro GLU_AUTO_LOAD_MATRIX               { 100200 }
macro GLU_CULLING                        { 100201 }
macro GLU_SAMPLING_TOLERANCE             { 100203 }
macro GLU_DISPLAY_MODE                   { 100204 }
macro GLU_PARAMETRIC_TOLERANCE           { 100202 }
macro GLU_SAMPLING_METHOD                { 100205 }
macro GLU_U_STEP                         { 100206 }
macro GLU_V_STEP                         { 100207 }
macro GLU_NURBS_MODE                     { 100160 }
macro GLU_NURBS_MODE_EXT                 { 100160 }
macro GLU_NURBS_TESSELLATOR              { 100161 }
macro GLU_NURBS_TESSELLATOR_EXT          { 100161 }
macro GLU_NURBS_RENDERER                 { 100162 }
macro GLU_NURBS_RENDERER_EXT             { 100162 }

# NurbsSampling 
macro GLU_OBJECT_PARAMETRIC_ERROR        { 100208 }
macro GLU_OBJECT_PARAMETRIC_ERROR_EXT    { 100208 }
macro GLU_OBJECT_PATH_LENGTH             { 100209 }
macro GLU_OBJECT_PATH_LENGTH_EXT         { 100209 }
macro GLU_PATH_LENGTH                    { 100215 }
macro GLU_PARAMETRIC_ERROR               { 100216 }
macro GLU_DOMAIN_DISTANCE                { 100217 }

# NurbsTrim 
macro GLU_MAP1_TRIM_2                    { 100210 }
macro GLU_MAP1_TRIM_3                    { 100211 }

# QuadricDrawStyle 
macro GLU_POINT                          { 100010 }
macro GLU_LINE                           { 100011 }
macro GLU_FILL                           { 100012 }
macro GLU_SILHOUETTE                     { 100013 }

# QuadricCallback 
#      GLU_ERROR 

# QuadricNormal 
macro GLU_SMOOTH                         { 100000 }
macro GLU_FLAT                           { 100001 }
macro GLU_NONE                           { 100002 }

# QuadricOrientation 
macro GLU_OUTSIDE                        { 100020 }
macro GLU_INSIDE                         { 100021 }

# TessCallback 
macro GLU_TESS_BEGIN                     { 100100 }
macro GLU_BEGIN                          { 100100 }
macro GLU_TESS_VERTEX                    { 100101 }
macro GLU_VERTEX                         { 100101 }
macro GLU_TESS_END                       { 100102 }
macro GLU_END                            { 100102 }
macro GLU_TESS_ERROR                     { 100103 }
macro GLU_TESS_EDGE_FLAG                 { 100104 }
macro GLU_EDGE_FLAG                      { 100104 }
macro GLU_TESS_COMBINE                   { 100105 }
macro GLU_TESS_BEGIN_DATA                { 100106 }
macro GLU_TESS_VERTEX_DATA               { 100107 }
macro GLU_TESS_END_DATA                  { 100108 }
macro GLU_TESS_ERROR_DATA                { 100109 }
macro GLU_TESS_EDGE_FLAG_DATA            { 100110 }
macro GLU_TESS_COMBINE_DATA              { 100111 }

# TessContour 
macro GLU_CW                             { 100120 }
macro GLU_CCW                            { 100121 }
macro GLU_INTERIOR                       { 100122 }
macro GLU_EXTERIOR                       { 100123 }
macro GLU_UNKNOWN                        { 100124 }

# TessProperty 
macro GLU_TESS_WINDING_RULE              { 100140 }
macro GLU_TESS_BOUNDARY_ONLY             { 100141 }
macro GLU_TESS_TOLERANCE                 { 100142 }

# TessError 
macro GLU_TESS_ERROR1                    { 100151 }
macro GLU_TESS_ERROR2                    { 100152 }
macro GLU_TESS_ERROR3                    { 100153 }
macro GLU_TESS_ERROR4                    { 100154 }
macro GLU_TESS_ERROR5                    { 100155 }
macro GLU_TESS_ERROR6                    { 100156 }
macro GLU_TESS_ERROR7                    { 100157 }
macro GLU_TESS_ERROR8                    { 100158 }
macro GLU_TESS_MISSING_BEGIN_POLYGON     { 100151 }
macro GLU_TESS_MISSING_BEGIN_CONTOUR     { 100152 }
macro GLU_TESS_MISSING_END_POLYGON       { 100153 }
macro GLU_TESS_MISSING_END_CONTOUR       { 100154 }
macro GLU_TESS_COORD_TOO_LARGE           { 100155 }
macro GLU_TESS_NEED_COMBINE_CALLBACK     { 100156 }

# TessWinding 
macro GLU_TESS_WINDING_ODD               { 100130 }
macro GLU_TESS_WINDING_NONZERO           { 100131 }
macro GLU_TESS_WINDING_POSITIVE          { 100132 }
macro GLU_TESS_WINDING_NEGATIVE          { 100133 }
macro GLU_TESS_WINDING_ABS_GEQ_TWO       { 100134 }

namespace glu {

type _GLUfuncptr: fn<void>();
type GLUnurbs: void;
type GLUquadric: void;
type GLUtesselator: void;

extern "C" {
    
    fn gluBeginCurve(nurb: &GLUnurbs);
    fn gluBeginPolygon(tess: &GLUtesselator);
    fn gluBeginSurface(nurb: &GLUnurbs);
    fn gluBeginTrim(nurb: &GLUnurbs);
    fn gluBuild1DMipmapLevels(target: gl::GLenum, internalFormat: gl::GLint, width: gl::GLsizei, kind: gl::GLenum, level: gl::GLint, base: gl::GLint, max: gl::GLint, data: const &void): gl::GLint;
    fn gluBuild1DMipmaps(target: gl::GLenum, internalFormat: gl::GLint, width: gl::GLsizei, format: gl::GLenum, kind: gl::GLenum, data: const &void): gl::GLint;
    fn gluBuild2DMipmapLevels(target: gl::GLenum, internalFormat: gl::GLint, width: gl::GLsizei, height: gl::GLsizei, kind: gl::GLenum, level: gl::GLint, base: gl::GLint, max: gl::GLint, data: const &void): gl::GLint;
    fn gluBuild2DMipmaps(target: gl::GLenum, internalFormat: gl::GLint, width: gl::GLsizei, height: gl::GLsizei, format: gl::GLenum, kind: gl::GLenum, data: const &void): gl::GLint;
    fn gluBuild3DMipmapLevels(target: gl::GLenum, internalFormat: gl::GLint, width: gl::GLsizei, height: gl::GLsizei, depth: gl::GLsizei, kind: gl::GLenum, level: gl::GLint, base: gl::GLint, max: gl::GLint, data: const &void): gl::GLint;
    fn gluBuild3DMipmaps(target: gl::GLenum, internalFormat: gl::GLint, width: gl::GLsizei, height: gl::GLsizei, depth: gl::GLsizei, format: gl::GLenum, kind: gl::GLenum, data: const &void): gl::GLint;
    fn gluCheckExtension(extName: const &gl::GLubyte, extString: const &gl::GLubyte): gl::GLboolean;
    fn gluCylinder(quad: &GLUquadric, base: gl::GLdouble, top: gl::GLdouble, height: gl::GLdouble, slices: gl::GLint, stacks: gl::GLint);
    fn gluDeleteNurbsRenderer(nurb: &GLUnurbs);
    fn gluDeleteQuadric(quad: &GLUquadric);
    fn gluDeleteTess(tess: &GLUtesselator);
    fn gluDisk(quad: &GLUquadric, inner: gl::GLdouble, outer: gl::GLdouble, slices: gl::GLint, loops: gl::GLint);
    fn gluEndCurve(nurb: &GLUnurbs);
    fn gluEndPolygon(tess: &GLUtesselator);
    fn gluEndSurface(nurb: &GLUnurbs);
    fn gluEndTrim(nurb: &GLUnurbs);
    fn gluErrorString(error: gl::GLenum): const &gl::GLubyte;
    fn gluGetNurbsProperty(nurb: &GLUnurbs, property: gl::GLenum, data: &gl::GLfloat);
    fn gluGetString(name: gl::GLenum): const &gl::GLubyte;
    fn gluGetTessProperty(tess: &GLUtesselator, which: gl::GLenum, data: &gl::GLdouble);
    fn gluLoadSamplingMatrices(nurb: &GLUnurbs, model: const &gl::GLfloat, perspective: const &gl::GLfloat, view: const &gl::GLint);
    fn gluLookAt(eyeX: gl::GLdouble, eyeY: gl::GLdouble, exeZ: gl::GLdouble, centerX: gl::GLdouble, centerY: gl::GLdouble, centerZ: gl::GLdouble, upX: gl::GLdouble, upY: gl::GLdouble, upZ: gl::GLdouble);
    fn gluNewNurbsRenderer(): &GLUnurbs;
    fn gluNewQuadric(): &GLUquadric;
    fn gluNewTess(): &GLUtesselator;
    fn gluNextContour(tess: &GLUtesselator, kind: gl::GLenum);
    fn gluNurbsCallback(nurb: &GLUnurbs, which: gl::GLenum, CallBackFunc: _GLUfuncptr);
    fn gluNurbsCallbackData(nurb: &GLUnurbs, userData: &gl::GLvoid);
    fn gluNurbsCallbackDataEXT(nurb: &GLUnurbs, userData: &gl::GLvoid);
    fn gluNurbsCurve(nurb: &GLUnurbs, knotCount: gl::GLint, knots: &gl::GLfloat, stride: gl::GLint, control: &gl::GLfloat, kind: gl::GLenum);
    fn gluNurbsProperty(nurb: &GLUnurbs, property: gl::GLenum, value: gl::GLfloat);
    fn gluNurbsSurface(nurb: &GLUnurbs, sKnotCount: gl::GLint, sKnots: &gl::GLfloat, tKnotCount: gl::GLint, tKnots: &gl::GLfloat, sStride: gl::GLint, tStride: gl::GLint, control: &gl::GLfloat, sOrder: gl::GLint, tOrder: gl::GLint, kind: gl::GLenum);
    fn gluOrtho2D(left: gl::GLdouble, right: gl::GLdouble, bottom: gl::GLdouble, top: gl::GLdouble);
    fn gluPartialDisk(quad: &GLUquadric, inner: gl::GLdouble, outer: gl::GLdouble, slices: gl::GLint, loops: gl::GLint, start: gl::GLdouble, sweep: gl::GLdouble);
    fn gluPerspective(fovy: gl::GLdouble, aspect: gl::GLdouble, zNear: gl::GLdouble, zFar: gl::GLdouble);
    fn gluPickMatrix(x: gl::GLdouble, y: gl::GLdouble, delX: gl::GLdouble, delY: gl::GLdouble, viewport: gl::GLint);
    fn gluProject(objX: gl::GLdouble, objY: gl::GLdouble, objZ: gl::GLdouble, model: const &gl::GLdouble, proj: const &gl::GLint, winX: &gl::GLdouble, winY: &gl::GLdouble, winZ: &gl::GLdouble): gl::GLint;
    fn gluPwlCurve(nurb: &GLUnurbs, count: gl::GLint, data: &gl::GLfloat, stride: gl::GLint, kind: gl::GLenum);
    fn gluQuadricCallback(quad: &GLUquadric, which: gl::GLenum, CallBackFunc: _GLUfuncptr);
    fn gluQuadricDrawStyle(quad: &GLUquadric, draw: gl::GLenum);
    fn gluQuadricNormals(quad: &GLUquadric, normal: gl::GLenum);
    fn gluQuadricOrientation(quad: &GLUquadric, orientation: gl::GLenum);
    fn gluScaleImage(format: gl::GLenum, wIn: gl::GLsizei, hIn: gl::GLsizei, typeIn: gl::GLenum, dataIn: const &void, wOut: gl::GLsizei, hOut: gl::GLsizei, typeOut: gl::GLenum, dataOut: &gl::GLvoid): gl::GLint;
    fn gluSphere(quad: &GLUquadric, radius: gl::GLdouble, slices: gl::GLint, stacks: gl::GLint);
    fn gluTessBeginContour(tess: &GLUtesselator);
    fn gluTessBeginPolygon(tess: &GLUtesselator, data: &gl::GLvoid);
    fn gluTessCallback(tess: &GLUtesselator, which: gl::GLenum, CallBackFunc: _GLUfuncptr);
    fn gluTessEndContour(tess: &GLUtesselator);
    fn gluTessEndPolygon(tess: &GLUtesselator);
    fn gluTessNormal(tess: &GLUtesselator, valueX: gl::GLdouble, valueY: gl::GLdouble, valueZ: gl::GLdouble);
    fn gluTessVertex(tess: &GLUtesselator, location: &gl::GLdouble, data: &gl::GLvoid);
    fn gluUnProject(winX: gl::GLdouble, winY: gl::GLdouble, winZ: gl::GLdouble, model: const &gl::GLdouble, proj: const &gl::GLdouble, view: const &gl::GLint, objX: &gl::GLdouble, objY: &gl::GLdouble, objZ: &gl::GLdouble): gl::GLint;
    fn gluUnProject4(winX: gl::GLdouble, winY: gl::GLdouble, winZ: gl::GLdouble, clipW: gl::GLdouble, model: const &gl::GLdouble, proj: const &gl::GLdouble, view: const &gl::GLint, nearVal: gl::GLdouble, farVal: gl::GLdouble, objX: &gl::GLdouble, objY: &gl::GLdouble, objZ: &gl::GLdouble, objW: &gl::GLdouble): gl::GLint;
}
}