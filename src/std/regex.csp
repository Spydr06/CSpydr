import "libc/regex.csp";
import "option.csp";

namespace std {
    type Regex: ::re_pattern_buffer;

    namespace regex {
        const REGEX_MATCHES = 1;
        const REGEX_NOMATCH = 0;

        fn compile(re_str: const &char): ::std::Option {
            let regex: regex_t = nil;
            if ::regcomp(regex, re_str, 0)
                <- err!("Could not compile regex");
            <- ok!(regex);
        }

        fn matchstr(regex: &Regex, str: &char): ::std::Option {
            let reti = ::regexec(regex, str, 0, nil, 0);
            if !reti {
                <- ok!(&REGEX_MATCHES);
            }
            else if reti == ::reg_errcode_t::NOMATCH {
                <- ok!(&REGEX_NOMATCH);
            }
            else {
                <- err!("regex match failed");
            }
        }

        fn free(regex: &Regex) {
            ::regfree(regex);
        }
    }
}