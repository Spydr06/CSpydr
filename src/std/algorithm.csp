#[ 
    algorithm.csp - Various implementations of different algorithms, such as search and hash algorithms 

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#

namespace std {
    namespace algorithm {
        # hash function used by the hashmap implementation
        fn hash_bytes(data: &const u8, size: u64): u64 {
            let hash: u64 = 0;

            for 0..size {
                hash += *data;
                data++;
                hash += (hash << 10);
                hash ^= (hash >> 6);
            }

            hash += (hash << 3);
            hash ^= (hash >> 11);
            hash ^= (hash << 15);

            <- hash;
        }

        fn hash_string(str: &const char): u64 {
            <- hash_bytes(str, len str);
        }

        fn hton_16(n: u16): u16 
        {
            let u: union {i: i32, c: i8};
            u.i = 1;
            <- if u.c != 0 => bswap_16(n) else n;
        }

        fn hton_32(n: u32): u32
        {
            let u: union {i: i32, c: i8};
            u.i = 1;
            <- if u.c != 0 => bswap_32(n) else n;
        }

        fn ntoh_16(n: u16): u16 
        {
            let u: union {i: i32, c: i8};
            u.i = 1;
            <- if u.c != 0 => bswap_16(n) else n;
        }

        fn ntoh_32(n: u32): u32
        {
            let u: union {i: i32, c: i8};
            u.i = 1;
            <- if u.c != 0 => bswap_32(n) else n;
        }

        fn bswap_16(x: u16): u16
        {
            <- x << 8 | x >> 8;
        }

        fn bswap_32(x: u32): u32
        {
            <- x >> 24 | x >> 8 & 0xff00 | x << 8 & 0xff0000 | x << 24;
        }

        fn bswap_64(x: u64): u64
        {
            <- bswap_32(x) << 32 | bswap_32(x >> 32);
        }
    }
}