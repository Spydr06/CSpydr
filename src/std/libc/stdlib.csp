# a basic implementation of the libc stdlib.h header for the CSpydr programming language

# link with the gnulibc standard library
import "link.csp";


import "libc/stddef.csp";

macro EXIT_FAILURE { 1 }
macro EXIT_SUCCESS { 0 }

macro RAND_MAX { 2147483647 } # same as INT_MAX

macro MB_CUR_MAX { __ctype_get_mb_cur_max() } # FIXME: not correct
extern fn __ctype_get_mb_cur_max(): size_t;

type div_t: struct {
    quot: i32,
    rem: i32
};

type ldiv_t: struct {
    quot: i64,
    rem: i64
};

## TODO: implement when the compiler supports long longs
type lldiv_t: struct {
    quot: i64,
    rem: i64
};
##

extern {

    fn atof(nptr: const &char): f64;
    fn atoi(nptr: const &char): i32;
    fn atol(nptr: const &char): i64;
    #fn atoll(nptr: const &char): i64; # TODO: implement when compiler supports long longs

    fn strtod(nptr: const &char, endptr: &&char): f64;
    fn strtof(nptr: const &char, endptr: &&char): f32;
    fn strtold(nptr: const &char, endptr: &&char): f80;

    fn strtol(nptr: const &char, endptr: &&char, base: i32): i64;
    #fn strtoll(nptr: const &char, endptr: const &char, base: i32): i64;
    fn strtoul(nptr: const &char, endptr: &&char, base: i32): u64;
    #fn strtoull(nptr: const &char, endptr: &&char, base: i32): u64;

    fn rand(): i32;
    fn srand(seed: u32);

    fn aligned_alloc(alignment: size_t, size: size_t): &void;
    fn calloc(nmemb: size_t, size: size_t): &void;
    fn free(ptr: &void);
    fn malloc(size: size_t): &void;
    fn realloc(ptr: &void, size: size_t): &void;
    
    fn abort();
    fn atexit(func: fn<void>()): i32;
    fn at_quick_exit(func: fn<void>()): i32;
    fn exit(status: i32);
    fn _Exit(status: i32);
    fn quick_exit(status: i32);

    fn getenv(name: const &char): &char;
    fn system(string: const &char): i32;

    fn bsearch(key: const &void, base: const &void, nmemb: size_t, size: size_t, compar: fn<i32>(const &void, const &void));
    fn qsort(base: &void, nmemb: size_t, size: size_t, compar: fn<i32>(const &void, const &void));

    fn abs(j: i32): i32;
    fn labs(j: i64): i64;
    #fn llabs(j: i64): i64;

    fn div(number: i32, denom: i32): div_t;
    fn ldiv(number: i64, denom: i64): ldiv_t;
    #fn lldiv(number: i64, denom: i64): lldiv_t;

    fn mblen(s: const &char, n: size_t);
    fn mbtowc(pwc: &wchar_t, s: const &char, n: size_t): i32;
    fn wctomb(s: &char, wc: wchar_t): i32;
    fn mbstowcs(pwcs: &wchar_t, s: const &char, n: size_t): size_t;
    fn wctombs(s: &char, pwcs: const &wchar_t, n: size_t): size_t;

}