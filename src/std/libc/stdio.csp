import "libc/bits/types/FILE.csp";
import "types.csp";

macro BUFSIZ |: (8192) :|
macro EOF |: (-1) :|
macro P_tmpdir |: "/tmp" :| # //FIXME: only unix

extern {

    let stdin: &FILE;
    let stdout: &FILE;
    let stderr: &FILE;

    fn remove(filename: const &char): i32;
    fn rename(old: const &char, new: const &char): i32;

    fn tmpfile(): &FILE;
    fn tmpnam(s: &char): &char;

    fn fclose(stream: &FILE): i32;
    fn fflush(stream: &FILE): i32;

    fn fopen(filename: const &char, modes: const &char, stream: &FILE): &FILE;
    fn freopen(filename: const &char, modes: const &char, stream: &FILE): &FILE;

    fn setbuf(stream: &FILE, buf: &char);
    fn setvbuf(stream: &FILE, buf: &char, modes: i32, n: usize): i32;

    fn fgetc(stream: &FILE): i32;
    fn getc(stream: &FILE): i32;
    fn getchar(): i32;

    fn fputc(c: i32, stream: &FILE): i32;
    fn putc(c: i32, stream: &FILE): i32;
    fn putchar(c: i32): i32;

    fn getw(stream: i32): i32;
    fn putw(w: i32, stream: &FILE): i32;

    fn fputs(s: const &char, stream: &FILE): i32;
    fn puts(str: const &char): i32;
    fn gets(str: const &char): &char;
    fn ungetc(c: i32, stream: &FILE): i32;

    fn fread(ptr: &void, size: usize, n: usize, s: &FILE): usize;
    fn fwrite(ptr: const &void, size: usize, n: usize, s: &FILE): u64;

    fn fseek(stream: &FILE, off: i64, whence: i32): i32;
    fn ftell(stream: &FILE): i64;
    fn rewind(stream: &FILE);

    # fn fgetpos(stream: &FILE, pos: &fpos_t): i32;
    # fn fsetpos(stream: &FILE, pos: const &fpos_t): i32;

    fn perror(s: const &char);

    fn __uflow(stream: &FILE): i32;
    fn __overflow(stream: &FILE, n: i32): i32;

}