#[ 
    hashmap.csp - Random number generators

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#

namespace std {
    namespace random {
        fn lcg32(x: u32): u32 = (1103515245 * x + 12345) & 0x7fffffff;
        fn lcg64(x: u64): u64 = 6364136223846793005: u64 * x + 1;

        fn rand(): i64 {
            using __static;
            __init();
            
            let k: i64 = 0;
            if n == 0
                k = x[0] = lcg32(x[0]);
            else {
                x[i] += x[j];
                k = x[i] >> 1;
                if (i += 1) == n
                    i = 0;
                if (j += 1) == n
                    j = 0;
            }

            <- k;
        }

        fn seed(seed: u32) {
            using __static;
            __init();
            let s = seed: u64;

            if n == 0 {
                x[0] = s;
                ret;
            }
            i = if n == 31 || n == 7 => 3 else 1;
            j = 0;
            for let k = 0; k < n; k++; {
                s = lcg64(s);
                x[k] = s >> 32;
            }

            x[0] |= 1;
        }

        fn save_state(): &u32 {
            using __static;
            __init();
            x[-1] = ((n << 16) | (i << 8) | j);
            <- (x - 1): &u32;
        }

        fn load_state(state: &u32) {
            using __static;
            __init();
            x = state + 1;
            n = x[-1] >> 16;
            i = ((x[-1] >> 8) & 0xff);
            j = x[-1] & 0xff;
        }

        fn set_state(state: &u32): &u32 {
            using __static;
            __init();
            let old = save_state();
            load_state(state);
            <- old;
        }

        fn init_state(_seed: u32, state: &u32, size: u64): &u32 {
            using __static;
            __init();

            if size < 8
                <- nil;
            let old = save_state();
            if size < 32
                n = 0;
            else if size < 64
                n = 7;
            else if size < 128
                n = 15;
            else if size < 256
                n = 31;
            else
                n = 63;
            x = state + 1;
            seed(_seed);
            save_state();
            <- old;
        }

        namespace __static {
            let n: i32 = 31;
            let i: i32 = 3;
            let j: i32 = 0;
            let x: &u32 = nil;
            let init: u32[32] = [
                0x00000000,0x5851f42d,0xc0b18ccf,0xcbb5f646,
                0xc7033129,0x30705b04,0x20fd5db4,0x9a8b7f78,
                0x502959d8,0xab894868,0x6c0356a7,0x88cdb7ff,
                0xb477d43f,0x70a3a52b,0xa8e4baf1,0xfd8341fc,
                0x8ae16fd9,0x742d2f7a,0x0d1f0796,0x76035e09,
                0x40f7702c,0x6fa72ca5,0xaaa84157,0x58a0df74,
                0xc74a0364,0xae533cc4,0x04185faf,0x6de3b115,
                0x0cab8628,0xf043bfa4,0x398150e9,0x37521657
            ];

            fn __init() {
                do x = &init + 1 unless x;
            }
        }
    }
}