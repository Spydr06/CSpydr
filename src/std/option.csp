macro some(value) 
{
    (::std::option::some((value): &void))
}

macro none()
{
    (::std::option::none())
}

macro unwrap(opt)
{
    (::std::option::unwrap((opt): ::std::Option))
}

macro unwrap_or(opt, then)
{
    (::std::option::unwrap((opt): ::std::Option, (then): fn<&void>()))
}

namespace std {
    type Option: struct {
        is_some: bool,
        value: &void
    };

    namespace option {
        fn init(is_some: bool, value: &void): std::Option
            <- Option :: {is_some, value};

        fn some(value: &void): std::Option
            <- init(true, value);

        fn none(): std::Option
            <- init(false, nil);

        fn is_some(opt: Option): bool
            <- opt.is_some;
        
        fn unwrap(opt: Option): &void
            <- if opt.is_some => opt.value else nil;

        fn unwrap_or(opt: Option, then: fn<&void>()): &void
        {
            if opt.is_some 
                ret opt.value;
            else
            {
                ret then();
            }
        }
    }
}