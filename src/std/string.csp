#
# string.csp - A String datatype
# Part of the CSpydr standard library
#

import "libc/stdlib.csp";
import "libc/string.csp";
import "vec.csp";

# a macro to crate a string
macro str(chptr) {
    (::std::string::init(chptr))
}

# a macro to concatenate two strings
macro concat(a, b) {
    (::std::string::concat(&a, b))
}

namespace std {
    type String: &char;

    namespace string {
        type StringData: struct {
            alloc: u64,
            size: u64,
            buff: char[]
        };

        fn init(value: String): ::std::String {
            let str_data: &StringData;

            if value == nil {
                str_data = ::malloc(sizeof StringData);
                str_data.alloc = 1;
                str_data.size = 0;
            }
            else {
                str_data = ::malloc(sizeof StringData + strlen(value) + 1);
                str_data.alloc = ::strlen(value);
                str_data.size = ::strlen(value);
                
                ::strcpy(str_data.buff, value);
            }
            <- &(str_data.buff[0]);
        }

        fn free(str: String) {
            ::free(get_data(str));
        } 

        fn get_data(str: String): &StringData {
            <- &(str: &StringData)[-1];
        }

        fn concat(dest: &String, src: String) {
            let str_data = get_data(*dest);

            str_data.alloc = str_data.alloc + ::strlen(src);
            str_data.size = str_data.size + ::strlen(src);
            str_data = ::realloc(str_data, sizeof StringData + str_data.alloc + 1);

            ::strcpy(&(str_data.buff[::strlen(*dest)]), src);

            *dest = &(str_data.buff[0]);
        }

        fn copy(str: String): ::std::String {   
            <- init(str);
        }

        fn contains(str: String, substr: String): bool {
            <- ::strstr(str, substr) != nil;
        }

        fn split(str: String, delim: String): &::std::String {
            let str_vec = vec![String];

            let token: &char;
            while (token = ::strsep(&str, delim)) != nil {
                let part = init(token);
                vec_add!(str_vec, part);
            }

            <- str_vec;
        }

        fn size(str: String): u64 {
            <- ::strlen(str);
        }
    }
}