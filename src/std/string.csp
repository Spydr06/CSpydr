#[ 
    string.csp - Implementation of dynamic strings in CSpydr

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#

import "memory.csp";
import "types.csp";
import "utils.csp";
import "option.csp";
import "math.csp";
import "vec.csp";
import "c_str.csp";
import "error.csp";
import "libc/string.csp";

# a macro to crate a string
macro str() {
    (::std::string::init(nil))
}

macro str(chptr) {
    (::std::string::init(chptr))
}

# a macro to concatenate two strings
macro concat(a, b) {
    (::std::string::concat(&(a), (b)));
}

# convert any given value to a string
macro to_str(v) {
    (
        if type::is_int(typeof (v))
            => ::std::string::from_int(v)
        else if type:is_uint(typeof (v))
            => ::std::string::from_uint(v)
        else if type::( (typeof (v)) == bool)
            => if (v) == true =>
                str!{"true"}
            else
                str!{"false"}
        else if type::((typeof (v)) == void)
            => str!{"void"}
        else if type::((typeof (v)) == char)
            => ::std::string::from_char(v)
        else if type::((typeof (v)) == ::std::String)
            => (v)
        else if type::((typeof (v)) == &char)
            => ::std::string::init(v)
        else str! {nil}
    )
}

namespace std {
    type String: &char;

    namespace string {
        type StringData: struct {
            alloc: u64,
            size: u64,
            buff: char 'c[0]
        };

        fn init(value: String): String 
        {
            let str_data: &StringData;

            if value == nil {
                str_data = memory::alloc(sizeof StringData);
                str_data.alloc = 1;
                str_data.size = 0;
            }
            else {
                let v_len = c_str::strlen(value);
                str_data = memory::alloc(sizeof StringData + v_len + 1);
                str_data.alloc = v_len;
                str_data.size = v_len;
                
                c_str::copy(str_data.buff, value);
            }
            <- &(str_data.buff[0]);
        }

        fn init_sized(size: u64): String
        {
            let str_data: &StringData = memory::alloc(sizeof StringData + size + 1);
            str_data.alloc = size + 1;
            <- &(str_data.buff[0]);
        }

        fn init_sized_with(size: u64, fill: char): String
        {
            let str_data: &StringData = memory::alloc(sizeof StringData + size + 1);
            str_data.alloc = size + 1;
            let str_ptr = &(*str_data.buff);
            memory::set(str_ptr, fill, size);
            <- str_ptr;
        }

        [drop]
        fn free(str: String) 
        {
            memory::free(get_data(str));
        } 

        fn get_data(str: String): &StringData 
        {
            <- &(str: &StringData)[-1];
        }

        fn has_space(str_data: &StringData): bool
        {
            <- str_data.alloc > str_data.size + 1;
        }

        fn concat(dest: &String, src: &const char) 
        {
            let str_data = get_data(*dest);
            let str_len = size(*dest);
            let src_len = c_str::strlen(src);

            str_data.alloc = str_data.alloc + src_len;
            str_data.size = str_data.size + src_len;
            str_data = memory::realloc(str_data, sizeof StringData + str_data.alloc + 1);
            c_str::copy(&(str_data.buff[str_len]), src);

            str_data.buff[str_len + src_len] = '\0';
            *dest = &(str_data.buff[0]);
        }

        fn append(dest: &String, c: char)
        {
            let str_data = get_data(*dest);
            str_data.alloc++;
            str_data.size++;

            if(!has_space(str_data))
                str_data = memory::realloc(str_data, sizeof StringData + (str_data.alloc *= 2) + 1);
            str_data.buff[str_data.size - 1] = c;
            str_data.buff[str_data.size] = '\0';
            *dest = &(str_data.buff[0]);
        }

        fn copy(str: String): String 
        {   
            <- init(str);
        }

        fn contains(str: String, substr: String): bool 
        {
            <- c_str::strstr(str, substr) != nil;
        }

        fn equal(a: &const char, b: &const char): bool
        {
            if a == b
                <- true;
            if !a || !b 
                <- false;

            let length = len a;
            if length != len b 
                <- false;

            for let i: u64 = 0; i < length; i++;
                if a[i] != b[i] ret false;
            <- true;
        }

        # checks if a string contains a char
        fn contains_char(str: String, c: char): bool
        {
            if !str ret false;
            for let i: usize = 0; i < c_str::strlen(str); i++; {
                if str[i] == c ret true;
            }
            <- false;
        }

        # finds a char in a string and returns the index of the first found char
        fn find_char(str: String, c: char): option!(usize)
        {
            if !str ret none!(usize);
            for let i: usize = 0; i < c_str::strlen(str); i++; {
                if str[i] == c ret some!(i);
            }
            <- none!(usize);
        }

        fn split(str: String, delim: &char): &String {
            let str_vec = vec![String];
 
            let token: &char;
            while (token = libc::strsep(&str, delim)) != nil {
                let part = init(token);
                vec_add!(str_vec, part);
            }

            <- str_vec;
        }

        fn size(str: String): u64 
        {
            <- c_str::strlen(str);
        }

        fn substr(str: String, from: i64, to: i64): String 
        {
            if to - from < 0 || to - from >= size(str)
                 ret nil;

            let ch_arr: &char = memory::alloc((to - from + 2) * sizeof char);
            for let i: i64 = from; i < to; i++; {
                ch_arr[i - from] = str[i];
            }
            #ch_arr[from - to] = '\0';
            
            let sub_str = init(ch_arr);
            memory::free(ch_arr);
            <- sub_str;
        }

        fn trim(str: String): String {
            while(character::isspace(*str)) str++;

            let back = &str[len str];
            while(character::isspace(*back)) back--;
            back[1] = '\0';

            <- str;
        }

        fn from_int(int: i64): String
        {
            let buf: char 'c[100];
            c_str::from_int(int, buf, 10);
            <- str!{buf};
        }

        fn from_uint(uint: u64): String
        {
            let buf: char 'c[100];
            c_str::from_uint(uint, buf, 10);
            <- str!{buf};
        }

        fn from_char(c: char): String
        {
            let buf: u16 = c << 8 | '\0';
            <- str!{(&buf): &char};
        }
        
        fn from_f32(float: f32): String
        {
            let buf: char 'c[100];
            c_str::from_f32(float, 10, buf);
            <- str!{buf};
        }

        fn from_f64(float: f64): String
        {
            let buf: char 'c[100];
            c_str::from_f64(float, 20, buf);
            <- str!{buf};
        }
    }
} 