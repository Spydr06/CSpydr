# a collection of functions, which make working with strings easier.
import "libc/stddef.csp";

fn itoa(num: i32, str: &char, base: i32): &char 
{
    let i: i32 = 0;
    let is_negative: bool = false;

    if num == 0 {
        str[i++] = '0';
        str[i] = '\0';
        <- str;
    }

    if num < 0 && base == 10 {
        is_negative = true;
        num = -num;
    }

    while num != 0 {
        let rem: i32 = num % base;
        if rem > 9 
            str[i++] = ((rem - 10) + 'a');
        else
            str[i++] = rem + '0';
        num = num / base;
    }

    if is_negative {
        str[i++] = '-';
    }

    str[i] = '\0';



    <- str;
}

fn reverse(str: char[], size: size_t)
{
    let start: size_t = 0;
    let end: size_t = size - 1;

    while start < end
    {
        swap((str + start), (str + end));
        start++;
        end--;
    }
}

fn swap(c1: &char, c2: &char)
{
    let tmp: &char = c2;
    c2 = c1;
    c1 = tmp;
}