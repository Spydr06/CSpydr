import "types.csp";
import "io.csp";
import "time.csp";
import "system.csp";
import "net.csp";

macro syscall(id)
{
    asm "mov " id ", %rax;"
        "syscall"
}

macro syscall(id, rdi)
{
    asm "mov " rdi ", %rdi;"
        "mov " id  ", %rax;"
        "syscall" 
}

macro syscall(id, rdi, rsi)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " id  ", %rax;"
        "syscall" 
}

macro syscall(id, rdi, rsi, rdx)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " id  ", %rax;"
        "syscall" 
}

macro syscall(id, rdi, rsi, rdx, r10)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " r10 ", %r10;"
        "mov " id  ", %rax;"
        "syscall" 
}

macro syscall(id, rdi, rsi, rdx, r10, r8)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " r10 ", %r10;"
        "mov " r8  ", %r8;"
        "mov " id  ", %rax;"
        "syscall" 
}

macro syscall(id, rdi, rsi, rdx, r10, r8, r9)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " r10 ", %r10;"
        "mov " r8  ", %r8;"
        "mov " r9  ", %r9;"
        "mov " id  ", %rax;"
        "syscall" 
}

macro syscall_r(r, id)
{
    asm "mov " id ", %rax;"
        "syscall;"
        "mov %rax, " &r
}

macro syscall_r(r, id, rdi)
{
    asm "mov " rdi ", %rdi;"
        "mov " id  ", %rax;"
        "syscall;"
        "mov %rax, " &r 
}

macro syscall_r(r, id, rdi, rsi)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " id  ", %rax;"
        "syscall;"
        "mov %rax, " &r 
}

macro syscall_r(r, id, rdi, rsi, rdx)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " id  ", %rax;"
        "syscall;"
        "mov %rax, " &r 
}

macro syscall_r(r, id, rdi, rsi, rdx, r10)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " r10 ", %r10;"
        "mov " id  ", %rax;"
        "syscall;"
        "mov %rax, " &r  
}

macro syscall_r(r, id, rdi, rsi, rdx, r10, r8)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " r10 ", %r10;"
        "mov " r8  ", %r8;"
        "mov " id  ", %rax;"
        "syscall;"
        "mov %rax, " &r  
}

macro syscall_r(r, id, rdi, rsi, rdx, r10, r8, r9)
{
    asm "mov " rdi ", %rdi;"
        "mov " rsi ", %rsi;"
        "mov " rdx ", %rdx;"
        "mov " r10 ", %r10;"
        "mov " r8  ", %r8;"
        "mov " r9  ", %r9;"
        "mov " id  ", %rax;"
        "syscall;"
        "mov %rax, " &r  
}

namespace std {
    type Syscall: enum {
        READ, WRITE, OPEN, CLOSE,
        STAT, FSTAT, LSTAT,
        POLL,
        LSEEK,
        MMAP, MPROTECT, MUNMAP,
        BRK,
        RT_SIGACTION, #[ not implemented ]# RT_SIGPROCMASK, #[ not implemented ]# RT_SIGRETURN,
        IOCTL,
        PREAD64, PWRITE64,
        READV, WRITEV,
        ACCESS,
        PIPE,
        SELECT, # not implemented
        SCHED_YIELD,
        MREMAP, MSYNC, MINCORE, MADVISE,
        SHMGET, SHMAT, SHMCTL, # not implemented
        DUP, DUP2,
        PAUSE, NANOSLEEP, GETITIMER, #[ not implemented ]# ALARM, SETITIMER, # not implemented
        GETPID,
        SENDFILE, SOCKET, CONNECT, ACCEPT, SENDTO, RECVFROM,
        SENDMSG, RECVMSG,
        SHUTDOWN,
        BIND, LISTEN,
        GETSOCKNAME, GETPEERNAME,
        SOCKETPAIR,
        SETSOCKOPT, GETSOCKOPT,
        CLONE, FORK, VFORK,
        EXECVE,
        EXIT, WAIT4, KILL,
        UNAME,
        SEMGET, SEMOP, SEMCTL,
        SHMDT,
        MSGGET, MSGSND, MSGRCV, MSGCTL,
        FCNTL,
        FLOCK, FSYNC, FDATASYNC,
        TRUNCATE, FTRUNCATE,
        GETDENTS,
        GETCWD,
        CHDIR, FCHDIR,
        RENAME,
        MKDIR, RMDIR,
        CREAT,
        LINK, UNLINK, SYMLINK, READLINK,
        CHMOD, FCHMOD, CHOWN, FCHOWN, LCHOWN,
        UMASK,
        GETTIMEOFDAY,
        GETTRLIMIT, GETTRUSAGE,
        SYSINFO, TIMES, PTRACE,
        GETUID,
        SYSLOG,
        GETGID, SETUID, SETGID,
        GETEUID, GETEGID,
        SETPGID, GETPPID,
        GETPGRP, 
        SETSID, SETREUID, SETREGID,
        GETGROUPS, SETGROUPS, 
        SETRESUID, SETRESGID, GETRESUID, GETRESGID,
        GETPGID,
        SETFSUID, SETFSGID, 
        GETSID,
        CAPGET, CAPSET,
        RT_SIGPENDING, RT_SIGTIMEDWAIT, RT_SIGQUEUEINFO, RT_SIGSUSPEND,
        SIGALSTACK,
        UTIME,
        MKNOD,
        USELIB,
        PERSONALITY,
        USTAT, STATFS, FSTATFS,
        SYSFS,
        GETPRIORITY, SETPRIORITY,
        SCHED_SETPARAM, SCHED_GETPARAM, 
        SCHED_SETSCHEDULER, SCHED_GETSCHEDULER, 
        SCHED_GET_PRIORITY_MAX, SCHED_GET_PRIORITY_MIN,
        SCHED_RR_GET_INTERVAL,
        MLOCK, MUNLOCK, MLOCKALL, MUNLOCKALL,
        VHANGUP,
        MODIFY_LDT,
        PIVOT_ROOT,
        SYSCTL,
        PRCTL, ARCH_PRCTL,
        ADJTIMEX,
        SETTRLIMIT,
        CHROOT,
        SYNC,
        ACCT,
        SETTIMEOFDAY,
        MOUNT, UMOUNT2,
        SWAPON, SWAPOFF,
        REBOOT,
        SETHOSTNAME, SETDOMAINNAME,
        IOPL, IOPERM,
        CREATE_MODULE, INIT_MODULE, DELETE_MODULE,
        GET_KERNEL_SYMS,
        QUERY_MODULE,
        QUOTACTL,    # not implemented by the kernel
        NFSSERVTCL,  # not implemented by the kernel
        GETPMSG,     # not implemented by the kernel
        PUTPMSG,     # not implemented by the kernel
        AFS_SYSCALL, # not implemented by the kernel
        TUXCALL,     # not implemented by the kernel
        SECURITY,    # not implemented by the kernel
        GETTID,
        READAHEAD,
        SETXATTR, LSETXATTR, FSETXATTR, GETXATTR, LGETXATTR, FGETXATTR, LISTXATTR, LLISTXATTR, FLISTXATTR, REMOVEXATTR, LREMOVEXATTR, FREMOVEXATTR,
        TKILL,
        TIME,
        FUTEX,
        SCHED_SETAFFINITY, SCHED_GETAFFINITY,
        SET_THREAD_AREA,
        IO_SETUP, IO_DESTROY, IO_GETEVENTS, IO_SUBMIT, IO_CANCEL,
        GET_THREAD_AREA,
        LOOKUP_DCOOKIE,
        EPOLL_CREATE, EPOLL_CTL_OLD, #[ not implemented by the kernel ]# EPOLL_WAIT_OLD, # not implemented by the kernel
        REMAP_FILE_PAGES,
        GETDENTS64,
        SET_TID_ADDRESS,
        RESTART_SYSCALL,
        SEMTIMEDOP,
        FADVISE64,
        TIMER_CREATE, TIMER_SETTIME, TIMER_GETTIME, TIMER_GETOVERRUN, TIMER_DELETE,
        CLOCK_SETTIME, CLOCK_GETTIME, CLOCK_GETRES, CLOCK_NANOSLEEP,
        EXIT_GROUP,
        EPOLL_WAIT, EPOLL_CTL,
        TGKILL,
        UTIMES,
        VSERVER, # not implemented by the kernel
        MBIND,
        SET_MEMPOLICY, GET_MEMPOLICY,
        MQ_OPEN, MQ_UNLINK, MQ_TIMEDSEND, MQ_TIMEDRECEIVE, MQ_NOTIFY, MQ_GETSETATTR,
        KEXEC_LOAD,
        WAITID,
        ADD_KEY, REQUEST_KEY, KEYCTL,
        IOPRIO_SET, IOPRIO_GET,
        INOTIFY_INIT, INOTIFY_ADD_WATCH,INOTIFY_RM_WATCH,
        MIGRATE_PAGES,
        OPENAT, MKDIRAT, MKNODAT, FCHOWNAT, FUTIMESAT, NEW_FSTATAT, UNLINKAT, RENAMEAT, LINKAT, SYMLINKAT, READLINKAT, FCHMODAT, FACCESSAT,
        PSELECT6,
        PPOLL,
        UNSHARE,
        SET_ROBUST_LIST, GET_ROBUST_LIST,
        SPLICE,
        TEE,
        SYNC_FILE_RANGE,
        VMSPLICE,
        MOVE_PAGES,
        UTIMENSTAT,
        EPOLL_PWAIT,
        SIGNALFD,
        TIMERFD_CREATE,
        EVENTFD,
        FALLOCATE,
        TIMERFD_SETTIME, TIMERFD_GETTIME,
        ACCEPT4, SIGNALFD4, EVENTFD2, EPOLL_CREATE1, DUP3, PIPE2, INOTIFY_INIT1,
        PREADV, PWRITEV,
        RT_TGSIGQUEUEINFO,
        PERF_EVENT_OPEN,
        RECVMMSG,
        FANOTIFY_INIT, FANOTIFY_MARK,
        SYS_PRLIMIT64,
        NAME_TO_HANDLE_AT, OPEN_BY_HANDLE_AT,
        CLOCK_ADJTIME,
        SYNCFS,
        SENDMMSG,
        SETNS,
        GETCPU,
        PROCESS_VM_READV, PROCESS_VM_WRITEV,
        KCMP,
        FINIT_MODULE,
        SCHED_SETATTR, SCHED_GETATTR,
        RENAMEAT2,
        SECCOMP,
        GETRANDOM,
        MEMFD_CREATE,
        KEXEC_FILE_LOAD,
        BPF,
        EXECVEAT,
        USERFAULTFD,
        MEMBARRIER,
        MLOCK2,
        COPY_FILE_RANGE,
        PREADV2, PWRITEV2,
        PKEY_MPROTECT, PKEY_ALLOC, PKEY_FREE,
        STATX,
        IO_PGETEVENTS,
        RSEQ
    };

    namespace syscall {
        fn read(fd: i32, buf: &void, count: usize): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::READ, fd, buf, count);
            <- res;
        }

        fn write(fd: i32, buf: &const void, count: usize): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::WRITE, fd, buf, count);
            <- res;
        }

        fn open(pathname: &const char, flags: i32, mode: mode_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::OPEN, pathname, flags, mode);
            <- res;
        }

        fn close(fd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::CLOSE, fd);
            <- res;
        }

        fn stat(filename: &const char, buf: &Stat): i32
        {
            let res: i64;
            syscall_r!(res, res, Syscall::STAT, filename, buf);
            <- res;
        }

        fn fstat(fd: i32, buf: &Stat): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FSTAT, fd, buf);
            <- res;
        }

        fn lstat(path: &const char, buf: &Stat): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::LSTAT, path, buf);
            <- res;
        }
        
        fn poll(fds: &PollFd, nfds: nfds_t, timeout: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::POLL, fds, nfds, timeout);
            <- res;
        }

        fn lseek(fd: i32, offset: Offset, whence: i32): Offset
        {
            let res: Offset;
            syscall_r!(res, Syscall::LSEEK, fd, offset, whence);
            <- res;
        }

        fn mmap(addr: &void, length: usize, prot: i32, flags: i32, fd: i32, off: Offset): &void
        {
            let res: &void;
            syscall_r!(res, Syscall::MMAP, addr, length, prot, flags, fd, off);
            <- res;
        }

        fn mprotect(addr: &void, length: usize, prot: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MPROTECT, addr, length, prot);
            <- res;
        }

        fn munmap(addr: &void, length: usize): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MUNMAP, addr, length);
            <- res;
        }

        fn brk(b: u64): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::BRK, b);
            <- res;
        }

        fn rt_sigreturn(__unused: u64): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::RT_SIGRETURN, __unused);
            <- res;
        }
        
        fn ioctl(fd: i32, cmd: i32, arg: u64): i32
        {
            let res: i64;
            syscall_r!(res, res, Syscall::IOCTL, fd, cmd, arg);
            <- res;
        }
        
        fn pread64(fd: i32, buf: &void, count: usize, offset: Offset): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::PREAD64, fd, buf, count, offset);
            <- res;
        }

        fn pwrite64(fd: i32, buf: &void, count: usize, offset: Offset): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::PWRITE64, fd, buf, count, offset);
            <- res;
        }

        fn readv(fd: i32, iov: &IOVec, iovcnt: i32): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::READV, fd, iov, iovcnt);
            <- res;
        }
        
        fn writev(fd: i32, iov: &IOVec, iovcnt: i32): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::WRITEV, fd, iov, iovcnt);
            <- res;
        }

        fn access(pathname: &const char, mode: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::ACCESS, pathname, mode);
            <- res;
        }
        
        fn pipe(pipefd: &i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::PIPE, pipefd);
            <- res;
        }

        fn time(time: &TimeVal): std::TimeVal
        {
            let res: TimeVal;
            syscall_r!(res, Syscall::TIME, time);
            <- res;
        }
        
        fn shed_yield(): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SCHED_YIELD);
            <- res;
        }
        
        fn mremap(old_addr: &void, old_size: usize, new_size: usize, flags: i32): &void
        {
            let res: &void;
            syscall_r!(res, Syscall::MREMAP, old_addr, old_size, new_size, flags);
            <- res;
        }
        
        fn msync(addr: &void, length: usize, flags: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MSYNC, addr, length, flags);
            <- res;
        }
        
        fn mincore(addr: &void, length: usize, vec: &u8): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MINCORE, addr, length, vec);
            <- res;
        }
        
        fn madvise(addr: &void, length: usize, advice: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MADVISE, addr, length, advice);
            <- res;
        }
        
        fn shmget(key: key_t, size: usize, shmflg: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SHMGET, key, size, shmflg);
            <- res;
        }
        
        fn shmat(shmid: i32, shmaddr: &const void, shmflg: i32): &void
        {
            let res: &void;
            syscall_r!(res, Syscall::SHMAT, shmid, shmaddr, shmflg);
            <- res;
        }
        
        fn dup(oldfd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::DUP, oldfd);
            <- res;
        }

        fn dup2(oldfd: i32, newfd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::DUP2, oldfd, newfd);
            <- res;
        }
        
        fn pause(): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::PAUSE);
            <- res;
        }
        
        fn nanosleep(req: &const TimeSpec, rem: &TimeSpec): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::NANOSLEEP, req, rem);
            <- res;
        }
    
        fn alarm(seconds: u32): u32
        {
            let res: u32;
            syscall_r!(res, Syscall::ALARM, seconds);
            <- res;
        }
        
        fn getpid(): pid_t
        {
            let res: i64;
            syscall_r!(res, Syscall::GETPID);
            <- res;
        }

        fn sendfile(out_fd: i32, in_fd: i32, offset: &Offset, count: usize): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::SENDFILE, out_fd, in_fd, offset, count);
            <- res;
        }
        
        fn socket(domain: i32, _type: i32, protocol: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SOCKET, domain, _type, protocol);
            <- res;
        }

        fn accept(sockfd: i32, addr: &SockAddr, addrlen: &socklen_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::ACCEPT, sockfd, addr, addrlen);
            <- res;
        }

        fn sendto(sockfd: i32, buf: &const void, length: usize, flags: i32): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::SENDTO, sockfd, buf, length, flags);
            <- res;
        }

        fn recvfrom(sockfd: i32, buf: &void, length: usize, flags: i32, src_addr: &SockAddr, addrlen: &socklen_t): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::RECVFROM, sockfd, buf, length, flags, src_addr, addrlen);
            <- res;
        }

        # TODO: fn sendmsg(sockfd: i32, msg: &const msghdr, flags: i32);
        # TODO: fn recvmsg

        fn shutdown(sockfd: i32, how: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SHUTDOWN, sockfd, how);
            <- res;
        }
        
        fn bind(sockfd: i32, addr: &const SockAddr, addrlen: socklen_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::BIND, sockfd, addr, addrlen);
            <- res;
        }
        
        fn listen(sockfd: i32, backlog: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::LISTEN, sockfd, backlog);
            <- res;
        }
        
        fn getsockname(sockfd: i32, addr: &SockAddr, addrlen: &socklen_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::GETSOCKNAME, sockfd, addr, addrlen);
            <- res;
        }

        fn getpeername(sockfd: i32, addr: &SockAddr, addrlen: &socklen_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::GETPEERNAME, sockfd, addr, addrlen);
            <- res;
        }
        
        fn socketpair(domain: i32, _type: i32, protocol: i32, sv: &i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SOCKETPAIR, domain, _type, protocol, sv);
            <- res;
        }

        fn setsockopt(sockfd: i32, level: i32, optname: i32, optval: &const void, optlen: socklen_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SETSOCKOPT, sockfd, level, optname, optval, optlen);
            <- res;
        }
        
        fn getsockopt(sockfd: i32, level: i32, optname: i32, optval: &void, optlen: &socklen_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::GETSOCKOPT, sockfd, level, optname, optval, optlen);
            <- res;
        }
        
        fn clone(func: fn<i32>(&void), stack: &void, flags: i32, arg: &void): i32 # TODO: expand with multiple versions when overloading is supported
        {
            let res: i64;
            syscall_r!(res, Syscall::CLONE, func, stack, flags, arg);
            <- res;
        }
        
        fn fork(): pid_t
        {
            let res: i64;
            syscall_r!(res, Syscall::FORK);
            <- res;
        }
        
        fn vfork(): pid_t
        {
            let res: i64;
            syscall_r!(res, Syscall::VFORK);
            <- res;
        }
        
        fn execve(pathname: &const char, argv: &&const char, envp: &&const char): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::EXECVE, pathname, argv, envp);
            <- res;
        }

        fn exit(status: i32)
            syscall!(Syscall::EXIT, status);
        
        fn wait4(pid: pid_t, wstatus: &i32, options: i32, arg: i32): pid_t
        {
            let res: i64;
            syscall_r!(res, Syscall::WAIT4, pid, wstatus, options, arg);
            <- res;
        }

        fn kill(pid: pid_t, sig: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::KILL, pid, sig);
            <- res;
        }
        
        fn getppid(): pid_t
        {
            let res: i64;
            syscall_r!(res, Syscall::GETPPID);
            <- res;
        }
        
        fn uname(buf: &UTSName): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::UNAME, buf);
            <- res;
        }

        fn semget(key: key_t, nsems: i32, semflg: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SEMGET, key, nsems, semflg);
            <- res;
        }
        
        fn semop(semid: i32, sops: &sembuf, nsops: usize): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SEMOP, semid, sops, nsops);
            <- res;
        }
        
        fn semctl(semid: i32, semnum: i32, cmd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SEMCTL, semid, semnum, cmd);
            <- res;
        }
        
        fn shmdt(shmaddr: &const void): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SHMDT, shmaddr);
            <- res;
        }
        
        fn msgget(key: key_t, msgflg: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MSGGET, key, msgflg);
            <- res;
        }

        fn msgsnd(msqid: i32, msgp: &const void, msgsz: usize, msgflg: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MSGSND, msqid, msgp, msgsz, msgflg);
            <- res;
        }
        
        fn msgrcv(msqid: i32, msgp: &void, msgsz: usize, msgtyp: i64, msgflg: i32): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::MSGRCV, msqid, msgp, msgsz, msgtyp, msgflg);
            <- res;
        }
        
        # TODO: msgctl

        fn fcntl(fd: i32, cmd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FCNTL, fd, cmd);
            <- res;
        }
        
        fn fcntl2(fd: i32, cmd: i32, arg: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FCNTL, fd, cmd, arg);
            <- res;
        }

        fn flock(fd: i32, operation: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FLOCK, fd, operation);
            <- res;
        }
        
        fn fsync(fd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FSYNC, fd);
            <- res;
        }
        
        fn fdatasync(fd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FDATASYNC, fd);
            <- res;
        }
        
        fn truncate(path: &const char, length: Offset): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::TRUNCATE, path, length);
            <- res;
        }
        
        fn ftruncate(fd: i32, length: Offset): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FTRUNCATE, fd, length);
            <- res;
        }
        
        fn getdents(fd: u32, dirp: &void, count: u32): i64
        {
            let res: i64;
            syscall_r!(res, Syscall::GETDENTS, fd, dirp, count);
            <- res;
        }

        fn getcwd(buf: &char, size: usize): &char
        {
            let res: i64;
            syscall_r!(res, Syscall::GETCWD, buf, size);
            <- res;
        }
        
        fn chdir(path: &const char): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::CHDIR, path);
            <- res;
        }
        
        fn fchdir(fd: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FCHDIR, fd);
            <- res;
        }
        
        fn rename(oldpath: &const char, newpath: &const char): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::RENAME, oldpath, newpath);
            <- res;
        }
        
        fn mkdir(pathname: &const char, mode: mode_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::MKDIR, pathname, mode);
            <- res;

        }
        
        fn rmdir(pathname: &const char): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::RMDIR, pathname);
            <- res;
        }
        
        fn creat(pathname: &const char, mode: mode_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::CREAT, pathname, mode);
            <- res;
        }
        
        fn link(oldpath: &const char, newpath: &const char): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::LINK, oldpath, newpath);
            <- res;
        }
        
        fn unlink(pathname: &const char): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::UNLINK, pathname);
            <- res;
        }
        
        fn symlink(oldpath: &const char, newpath: &const char): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::SYMLINK, oldpath, newpath);
            <- res;
        }

        fn readlink(path: &const char, buf: &char, bufsiz: usize): ssize_t
        {
            let res: ssize_t;
            syscall_r!(res, Syscall::READLINK, path, buf, bufsiz);
            <- res;
        }
        
        fn chmod(path: &const char, mode: mode_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::CHMOD, path, mode);
            <- res;
        }
        
        fn fchmod(fd: i32, mode: mode_t): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::FCHMOD, fd, mode);
            <- res;
        }
        
        fn sync()
            syscall!(Syscall::SYNC);
        
        fn clock_gettime(clk_id: Clock, ts: &TimeSpec): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::CLOCK_GETTIME, clk_id, ts);
            <- res;
        }
        
        fn clock_settime(clk_id: Clock, ts: &const TimeSpec): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::CLOCK_SETTIME, clk_id, ts);
            <- res;
        }

        fn gettimeofday(ts: &TimeSpec, n: i32): i32
        {
            let res: i64;
            syscall_r!(res, Syscall::GETTIMEOFDAY, ts, n);
            <- res;
        }
    }
}