import "syscall.csp";
import "io.csp";
import "option.csp";
import "utils.csp";
import "c_str.csp";
import "error.csp";
import "string.csp";
import "fmt.csp";

namespace std {
    type File: struct {
        desc: i32,
        mode: u8,
        path: &char,
        offset: i64,
    };

    namespace file {
        const READ: u8       = 0b0001;
        const WRITE: u8      = 0b0010;
        const READ_WRITE: u8 = 0b0011;
        const CREATE: u8     = 0b0100;

        fn open(path: &const char, mode: u8): &std::File
        {
            let file: &File = memory::alloc(sizeof File);
            file.mode = mode;
            file.offset = 0;
            
            let sys_flags = 0;

            if mode & CREATE
                sys_flags |= io::O_CREAT;
            if mode & READ_WRITE
                sys_flags |= io::O_RDWR;
            else if mode & READ
                sys_flags |= io::O_RDONLY;
            else if mode & WRITE 
                sys_flags |= io::O_WRONLY;
            else {
                error::new(std::Errno::INVAL, "invalid mode for `std::file::open()`");
                <- nil;
            }

            file.desc = syscall::open(path, sys_flags, 416);
            if file.desc < 0 {
                error::new(std::Errno::IO, "could not open file");
                <- nil;
            }

            <- file;
        }

        fn fopen(fd: i32): &std::File
        {
            let file: &File = memory::alloc(sizeof File);
            file.mode = 0;
            file.offset = 0;
            file.desc = fd;
            file.path = "";
            <- file;
        }

        fn write_str(file: &File, str: &const char)
            write(file, str: &const void, c_str::strlen(str));

        fn write(file: &File, data: &const void, count: usize): i64
        {
            let written = syscall::write(file.desc, data, count);
            if written == -1 
                error::new(std::Errno::IO, "could not write to file");
            else
                file.offset += written;
            <- written;
        }

        fn writef(file: &File, fmt: &const char, args: ...): i64
        {
            <- vwritef(file, fmt, &args);
        }

        fn vwritef(file: &File, fmt: &const char, args: &VAList): i64
        {
            using std::fmt;
            let written = -1;
            with formatted = va_format(fmt, args): &void
                written = syscall::write(file.desc, formatted, c_str::strlen(formatted));
            
            if written == -1
                error::new(std::Errno::IO, "could not write to file");
            
            <- written;
        }

        fn read(file: &File, buffer: &void, count: usize): &void
        {
            let bytes_read = syscall::read(file.desc, buffer, count);
            if bytes_read == -1 
                error::new(std::Errno::IO, "could not read file");
            else
                file.offset += bytes_read;
            <- buffer;
        }

        fn readc(file: &File): char 
        {
            do {
                error::new(std::Errno::NILPTR, "`file` is nil");
                <- -1;
            } unless file;
            let c = '\0';
            if syscall::read(file.desc, &c, 1) == -1 
                error::new(std::Errno::IO, "could not read file");
            else
                file.offset++;
            <- c;
        }

        fn close(file: &File): Error
        {
            do
                <- error::new(std::Errno::NILPTR, "`file` is nil")
            unless file;
            if syscall::close(file.desc) == -1
                <- error::new(std::Errno::IO, "could not close file");
            memory::free(file);

            <- error::none();
        }
        [exit_fn("close": &std::File)]

        fn size(file: &File): i64
        {
            let stat: Stat;
            if !file || syscall::fstat(file.desc, &stat)
            {
                error::new(std::Errno::IO, "could not get statistics of file");
                <- -1;
            }

            <- stat.size;
        }

        fn read_all(file: &File): String
        {
            <- size(file) |> read(file, string::init_sized($), $);
        }

        const SEEK_SET: u8 = 0;
        const SEEK_CUR: u8 = 1; 
        const SEEK_END: u8 = 2;

        fn seek(file: &File, offset: i64, whence: u8): Error
        {
            do 
                ret error::new(std::Errno::NILPTR, "`file` argument is nil")
            unless file;

            match whence {
                SEEK_SET => file.offset = offset;
                SEEK_CUR => file.offset += offset;
                SEEK_END => file.offset = size(file) - offset;
                _ => ret error::new(std::Errno::INVAL, "value of `whence` is invalid");
            }

            syscall::lseek(file.desc, file.offset, SEEK_SET);
            <- error::none();
        }

        fn tell(file: &File): i64 
        {
            do {
                error::new(std::Errno::NILPTR, "`file` argument is nil");
                <- -1;
            } unless file;
            <- file.offset;
        } 

        fn rewind(file: &File): Error
        {
            do
                ret error::new(std::Errno::NILPTR, "`file` argument is nil")
            unless file;
            file.offset = 0;
            syscall::lseek(file.desc, 0, SEEK_SET);
            <- error::none();
        }
    }
}