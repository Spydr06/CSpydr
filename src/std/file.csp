import "syscall.csp";
import "io.csp";
import "option.csp";
import "utils.csp";
import "c_str.csp";

namespace std {
    type File: struct {
        desc: i32,
        mode: u8,
        path: &char,
    };

    namespace file {
        const READ: u8       = 0b0001;
        const WRITE: u8      = 0b0010;
        const READ_WRITE: u8 = 0b0011;
        const CREATE: u8     = 0b0100;

        fn open(path: const &char, mode: u8): &std::File
        {
            let file: &File = mem::alloc(sizeof File);
            file.mode = mode;
            
            let sys_flags = 0;

            if mode & CREATE
                sys_flags |= io::O_CREAT;
            if mode & READ_WRITE
                sys_flags |= io::O_RDWR;
            else if mode & READ
                sys_flags |= io::O_RDONLY;
            else if mode & WRITE 
                sys_flags |= io::O_WRONLY;
            else
                <- nil;

            file.desc = syscall::open(path, sys_flags, 416);
            if file.desc <= -1
                <- nil;

            <- file;
        }

        fn write_str(file: &File, str: const &char)
            write(file, str: const &void, c_str::strlen(str));

        fn write(file: &File, data: const &void, count: usize)
        {
            syscall::write(file.desc, data, count);
        }

        fn read(file: &File, buffer: &void, count: usize)
        {
            syscall::read(file.desc, buffer, count);
        }

        fn close(file: &File)
        {
            syscall::close(file.desc);
            free!(file);
        }
        [exit_fn("close": &std::File)]
    }
}