#
# file.csp - Utilities for handling file IO in CSpydr
# Part of the CSpydr standard library
#

import "libc/stdlib.csp";
import "libc/stdio.csp";
import "option.csp";

# a macro for quickly reading files from a given path
macro file(path) {
    (::std::option::unwrap_or(::std::file::read(path),
        |msg: &void| => {
            ::fprintf(::stderr, "Error reading file %s: %s\n", path, msg: &char);
            ::exit(1);        
        }
    ): &::std::File)
}

# macro for quickly saving files from a given path
macro write(f, path) {
    ::std::option::unwrap_or(::std::file::write(f, path),
        |msg: &void| => ::fprintf(::stderr, "Error writing file %s: %s\n", path, msg: &char);
    );
}

namespace std {
    type File: struct {
        length: u64,
        buff: char[]
    };

    namespace file {
        type SeekType: enum {
            CUR = 1,
            END = 2,
            SET = 0
        };

        fn read(path: const &char): ::std::Option {
            let fileptr: &::FILE = ::fopen(path, "rb");
            let file: &File = nil;

            if fileptr {
                ::fseek(fileptr, 0, SeekType::END);
                let length = ::ftell(fileptr);
                ::fseek(fileptr, 0, SeekType::SET);

                file = ::malloc(sizeof File + length + 1);
                if file {
                    ::fread(file.buff, 1, length, fileptr);
                    file.length = length;
                }
                else
                    <- err!("Failed to allocate memory");
            }
            else
                <- err!("File not found");
            
            ::fclose(fileptr);
            <- ok!(file);
        }

        fn write(file: &File, path: const &char): ::std::Option {
            let fileptr: &::FILE = ::fopen(path, "ab");
            if fileptr {
                ::fputs(file.buff, fileptr);
            }
            else
                <- err!("File not found");
            
            ::fclose(fileptr);
            <- ok!(nil);
        }

        fn free(file: &File) {
            ::free(file);
        }
    }
}