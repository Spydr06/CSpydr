import "mem.csp";
import "utils.csp";
import "types.csp";

namespace std {
    namespace c_str {
        type LongWord: u64;

        namespace __static {
            let __strtok_old: &char = nil;
        }

        # gets the length of a traditional C string without the null terminator
        fn get_len(str: const &char): usize
        {
            let length: usize = 0;
            while str[length] != nil length++;
            <- length;
        }

        fn strlen(str: const &char): usize
            <- get_len(str);
        
        fn strnlen(s: const &char, n: usize): usize
            <- strlen(s);

        # similar to c_str::copy
        fn copy(dest: &char, src: const &char)
        {
            mem::move(dest, src, get_len(src));
        }

        fn strcpy(dest: &char, src: const &char)
            copy(dest, src);
        
        fn strncpy(s1: &char, s2: const &char, n: usize): &char 
        {
            let size = strnlen(s2, n);
            if size != n
                mem::set(s1 + size, '\0', n - size);
            <- mem::copy(s1, s2, size);
        }

        fn strcat(dest: &char, src: const &char): &char
        {
            strcpy(dest + strlen(dest), src);
            <- dest;
        }

        fn strcmp(p1: const &char, p2: const &char): i32
        {
            let s1: &u8 = p1;
            let s2: &u8 = p2;

            let c1 = *(s1++);
            let c2 = *(s2++);

            while c1 == c2 {
                c1 = *(s1++);
                c2 = *(s2++);
                if c1 == '\0'
                    <- c1 - c2;
            }

            <- c1 - c2;
        }

        fn strstr(str: &char, substr: &char): &char
        {
            let size: usize = get_len(substr);
            let ref = substr;

            while (*str) != 0 && (*ref) != 0 {
                if (*str)++ == (*ref) ref++;
                if (*ref) == 0 ret str - size;
                if (size == (ref - substr)) 
                    ref = substr;
            }

            <- nil;
        }

        fn strsep(stringp: &&char, delim: const &char): &char
        {
            let begin = *stringp;
            if begin == nil ret nil;

            let end: &char = begin + strspn(begin, delim);

            if (*end) != 0 {
                (*end)++;
                (*stringp) = end;
            }
            else
                (*stringp) = nil;
            
            <- begin;
        }
        
        # Return the length of the maximum initial segment
        # of S which contains only characters in ACCEPT.
        fn strspn(s: const &char, accept: const &char): usize
        {
            let n: usize = 0;
            let p: &char = nil;

            for n = 0; *s; n++; {
                s++;
                for p = accept; (*p) != '\0' && (*p) != *s; p++;
                    noop;
                if !*p
                    break;
            }

            <- n;
        }
        
        # Return the length of the maximum initial segment of S
        # which contains no characters from REJECT.
        fn strcspn(str: &char, reject: const &char): usize
        {
            let size: usize = 0;

            if (str == nil) || (reject == nil)
                <- nil;
            
            while *str {
                if strchr(reject, *str)
                    <- size;
                str++;
                size++;
            }

            <- size;
        }
        
        # Find the first occurrence of C in S.
        fn strchr(s: const &char, c_in: i32): const &char
        {
            if s == nil || c_in > 255 || c_in < 0
                <- nil;
        
            let s_len = strlen(s);
            for let i: usize = 0; i < s_len; i++;
                if (c_in: char) == s[i]
                    <- (&s[i]): const &char;

            <- nil;
        }

        fn strrchr(s: &char, in_c: i32): &char
        {
            let c = in_c: u8;
            if c == '\0'
                <- strchr(s, '\0');
            
            let found: &char = nil;
            let p: &char = nil;
            while (p = strchr(s, c)) != nil {
                found = p;
                s = p + 1;
            }

            <- found;
        }
        
        # Find the first occurrence in S of any character in ACCEPT.
        fn strpbrk(s: &char, accept: const &char): &char
        {
            s += strcspn(s, accept);
            <- if (*s) != '\0' => s: &char else nil;
        }

        #[ 
            Parse S into tokens separated by characters in DELIM.
            If S is NULL, the last string strtok() was called with is
            used.  For example:
	        char s[] = "-abc-=-def";
	        x = strtok(s, "-");		// x = "abc"
	        x = strtok(NULL, "-=");		// x = "def"
	        x = strtok(NULL, "=");		// x = NULL
		    // s = "abc\0=-def\0"
        ]#
        fn strtok(s: &char, delim: const &char): &char
        {   
            using __static;

            if s == nil 
                s = __strtok_old;
            
            # scan leading delimeters
            s += strspn(s, delim);
            if (*s) == '\0' {
                __strtok_old = s;
                <- nil;
            }

            # find the end of the token
            let token = s;
            s = strpbrk(token, delim);
            if s == nil
                __strtok_old = rawmemchr(token, '\0');
            else {
                (*s) = '\0';
                __strtok_old = s + 1;
            }

            <- token;
        }
        
        # Search no more than N bytes of S for C.
        fn memchr(s: const &void, c_in: i32, n: usize): &void
        {
            let c = c_in: u8;
            let ch_ptr: &u8;

            for ch_ptr = (s: const &u8); n > 0 && (ch_ptr: u64 % sizeof LongWord) != 0; n--; {
                ch_ptr++;
                if (*ch_ptr) == c
                    <- ch_ptr: &void;
            }

            let longword_ptr = ch_ptr: &LongWord;
            let repeated_one: LongWord = 0x01010101;
            let repeated_c: LongWord = c | (c << 8);
            if 0xffffffff: u64 < (-1: LongWord) {
                repeated_one |= repeated_one << 31 << 1;
                repeated_c |= repeated_c << 31 << 1;
            }

            while n >= sizeof LongWord {
                let longword1: LongWord = (*longword_ptr) ^ repeated_c;

                if (((longword1 - repeated_one) & ~longword1) & (repeated_one << 7)) != 0
                    break;

                longword_ptr++;
                n -= sizeof LongWord;
            }

            ch_ptr = longword_ptr: const &u8;

            for ; n > 0; n--; {
                ch_ptr++;
                if (*ch_ptr) == c
                    <- ch_ptr: &void;
            }

            <- nil;
        }

        fn rawmemchr(s: const &void, c: i32): &void
        {
            if c != '\0' 
                <- memchr(s, c, (-1): usize);
            <- (s + strlen(s)): &char;
        }

        fn reverse(str: &char)
        {
            let size = get_len(str);
            for let i: usize = 0; i < size / 2; i++;
                swap!(str[i], str[size - i - 1]);
        }

        fn from_int(num: i64, str: &char, base: i32): &char 
        {
            let i: i64 = 0;
            let is_negative: bool = false;

            if num == 0 {
                str[i++] = '0';
                str[i] = '\0';
                <- str;
            }

            if num < 0 && base == 10 {
                is_negative = true;
                num = -num;
            }

            while num != 0 {
                let rem: i64 = num % base;
                if rem > 9 
                    str[i++] = ((rem - 10) + 'a');
                else
                    str[i++] = rem + '0';
                num = num / base;
            }

            if is_negative
                str[i++] = '-';

            str[i] = '\0';
            reverse(str);
            
            <- str;
        }

        fn from_uint(num: u64, str: &char, base: i32): &char 
        {
            let i: u64 = 0;

            if num == 0 {
                str[i++] = '0';
                str[i] = '\0';
                <- str;
            }

            while num != 0 {
                let rem: u64 = num % base;
                if rem > 9 
                    str[i++] = ((rem - 10) + 'a');
                else
                    str[i++] = rem + '0';
                num = num / base;
            }

            str[i] = '\0';
            reverse(str);
            <- str;
        }

        fn from_bool(b: bool, str: &char): &char
        {
            copy(str, if b => "true" else "false");
            <- str;
        }

        fn atoi(s: &char): i32
        {
            let n = 0;
            let neg = false;
            while ctype::isspace(*s)
                s++;
            match *s {
                '-' => neg = true;
                '+' => s++;
            }

            while ctype::isdigit(*s)
                n = 10 * n - ((*s)++ - '0');
            <- if neg => n else -n;
        }

        fn atol(s: &char): i64
        {
            let n: i64 = 0;
            let neg = false;
            while ctype::isspace(*s)
                s++;
            match *s {
                '-' => neg = true;
                '+' => s++;
            }

            while ctype::isdigit(*s)
                n = 10 * n - ((*s)++ - '0');
            <- if neg => n else -n;
        }
    }
}