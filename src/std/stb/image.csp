#[
    CSPYDR PORT OF STB_IMAGE.H

stb_image - v2.27 - public domain image loader - http: nothings.org/stb
                                  no warranty implied; use at your own risk

   QUICK NOTES:
      Primarily of interest to game developers and other people who can
          avoid problematic images and only need the trivial interface

      JPEG baseline & progressive (12 bpc/arithmetic not supported, same as stock IJG lib)
      PNG 1/2/4/8/16-bit-per-channel

      TGA (not sure what subset, if a subset)
      BMP non-1bpp, non-RLE
      PSD (composited view only, no extra channels, 8/16 bit-per-channel)

      GIF (*comp always reports as 4-channel)
      HDR (radiance rgbE format)
      PIC (Softimage PIC)
      PNM (PPM and PGM binary only)

      Animated GIF still needs a proper API, but here's one way to do it:
          http: gist.github.com/urraka/685d9a6340b26b830d49

      - decode from memory or through FILE (define STBI_NO_STDIO to remove code)
      - decode from arbitrary I/O callbacks
      - SIMD acceleration on x86/x64 (SSE2) and ARM (NEON)

   Full documentation under "DOCUMENTATION" below.


LICENSE

  See end of file for license information.

 ============================    Contributors    =========================

 Image formats                          Extensions, features
    Sean Barrett (jpeg, png, bmp)          Jetro Lauha (stbi_info)
    Nicolas Schulz (hdr, psd)              Martin "SpartanJ" Golini (stbi_info)
    Jonathan Dummer (tga)                  James "moose2000" Brown (iPhone PNG)
    Jean-Marc Lienher (gif)                Ben "Disch" Wenger (io callbacks)
    Tom Seddon (pic)                       Omar Cornut (1/2/4-bit PNG)
    Thatcher Ulrich (psd)                  Nicolas Guillemot (vertical flip)
    Ken Miller (pgm, ppm)                  Richard Mitton (16-bit PSD)
    github:urraka (animated gif)           Junggon Kim (PNM comments)
    Christopher Forseth (animated gif)     Daniel Gibson (16-bit TGA)
                                           socks-the-fox (16-bit PNG)
                                           Jeremy Sawicki (handle all ImageNet JPGs)
 Optimizations & bugfixes                  Mikhail Morozov (1-bit BMP)
    Fabian "ryg" Giesen                    Anael Seghezzi (is-16-bit query)
    Arseny Kapoulkine                      Simon Breuss (16-bit PNM)
    John-Mark Allen
    Carmelo J Fdez-Aguera

 Bug & warning fixes
    Marc LeBlanc            David Woo          Guillaume George     Martins Mozeiko
    Christpher Lloyd        Jerry Jansson      Joseph Thomson       Blazej Dariusz Roszkowski
    Phil Jordan                                Dave Moore           Roy Eltham
    Hayaki Saito            Nathan Reed        Won Chun
    Luke Graham             Johan Duparc       Nick Verigakis       the Horde3D community
    Thomas Ruf              Ronny Chevalier                         github:rlyeh
    Janez Zemva             John Bartholomew   Michal Cichon        github:romigrou
    Jonathan Blow           Ken Hamada         Tero Hanninen        github:svdijk
    Eugene Golushkov        Laurent Gomila     Cort Stratton        github:snagar
    Aruelien Pocheville     Sergio Gonzalez    Thibault Reuille     github:Zelex
    Cass Everitt            Ryamond Barbiero                        github:grim210
    Paul Du Bois            Engin Manap        Aldo Culquicondor    github:sammyhw
    Philipp Wiesemann       Dale Weiler        Oriol Ferrer Mesia   github:phprus
    Josh Tobin                                 Matthew Gregan       github:poppolopoppo
    Julian Raschke          Gregory Mullen     Christian Floisand   github:darealshinji
    Baldur Karlsson         Kevin Schmidt      JR Smith             github:Michaelangel007
                            Brad Weinberger    Matvey Cherevko      github:mosra
    Luca Sas                Alexander Veselov  Zack Middleton       [reserved]
    Ryan C. Gordon          [reserved]                              [reserved]
                     DO NOT ADD YOUR NAME HERE

                     Jacko Dirks

  To add your name to the credits, pick a random blank space in the middle and fill it.
  80% of merge conflicts on stb PRs are due to people adding their name at the end
  of the credits.

  DOCUMENTATION
 
  Limitations:
     - no 12-bit-per-channel JPEG
     - no JPEGs with arithmetic coding
     - GIF always returns *comp=4
 
  Basic usage (see HDR discussion below for HDR usage):
     int x,y,n;
     unsigned char *data = stbi_load(filename, &x, &y, &n, 0);
       ... process data if not NULL ...
       ... x = width, y = height, n = # 8-bit components per pixel ...
       ... replace '0' with '1'..'4' to force that many components per pixel
       ... but 'n' will always be the number that it would have been if you said 0
     stbi_image_free(data)
 
  Standard parameters:
     int *x                 -- outputs image width in pixels
     int *y                 -- outputs image height in pixels
     int *channels_in_file  -- outputs # of image components in image file
     int desired_channels   -- if non-zero, # of image components requested in result
 
  The return value from an image loader is an 'unsigned char *' which points
  to the pixel data, or NULL on an allocation failure or if the image is
  corrupt or invalid. The pixel data consists of *y scanlines of *x pixels,
  with each pixel consisting of N interleaved 8-bit components; the first
  pixel pointed to is top-left-most in the image. There is no padding between
  image scanlines or between pixels, regardless of format. The number of
  components N is 'desired_channels' if desired_channels is non-zero, or
  *channels_in_file otherwise. If desired_channels is non-zero,
  *channels_in_file has the number of components that _would_ have been
  output otherwise. E.g. if you set desired_channels to 4, you will always
  get RGBA output, but you can check *channels_in_file to see if it's trivially
  opaque because e.g. there were only 3 channels in the source image.
 
  An output image with N components has the following components interleaved
  in this order in each pixel:
 
      N=#comp     components
        1           grey
        2           grey, alpha
        3           red, green, blue
        4           red, green, blue, alpha
 
  If image loading fails for any reason, the return value will be NULL,
  and *x, *y, *channels_in_file will be unchanged. The function
  stbi_failure_reason() can be queried for an extremely brief, end-user
  unfriendly explanation of why the load failed. Define STBI_NO_FAILURE_STRINGS
  to avoid compiling these strings at all, and STBI_FAILURE_USERMSG to get slightly
  more user-friendly ones.
 
  Paletted PNG, BMP, GIF, and PIC images are automatically depalettized.
 
  To query the width, height and component count of an image without having to
  decode the full file, you can use the stbi_info family of functions:
 
    int x,y,n,ok;
    ok = stbi_info(filename, &x, &y, &n);
      returns ok=1 and sets x, y, n if image is a supported format,
      0 otherwise.
 
  Note that stb_image pervasively uses ints in its public API for sizes,
  including sizes of memory buffers. This is now part of the API and thus
  hard to change without causing breakage. As a result, the various image
  loaders all have certain limits on image size; these differ somewhat
  by format but generally boil down to either just under 2GB or just under
  1GB. When the decoded image would be larger than this, stb_image decoding
  will fail.
 
  Additionally, stb_image will reject image files that have any of their
  dimensions set to a larger value than the configurable STBI_MAX_DIMENSIONS,
  which defaults to 2**24 = 16777216 pixels. Due to the above memory limit,
  the only way to have an image with such dimensions load correctly
  is for it to have a rather extreme aspect ratio. Either way, the
  assumption here is that such larger images are likely to be malformed
  or malicious. If you do need to load an image with individual dimensions
  larger than that, and it still fits in the overall size limit, you can
  #define STBI_MAX_DIMENSIONS on your own to be something larger.
 
  ===========================================================================
 
  UNICODE:
 
    If compiling for Windows and you wish to use Unicode filenames, compile
    with
        #define STBI_WINDOWS_UTF8
    and pass utf8-encoded filenames. Call stbi_convert_wchar_to_utf8 to convert
    Windows wchar_t filenames to utf8.
 
  ===========================================================================
 
  Philosophy
 
  stb libraries are designed with the following priorities:
 
     1. easy to use
     2. easy to maintain
     3. good performance
 
  Sometimes I let "good performance" creep up in priority over "easy to maintain",
  and for best performance I may provide less-easy-to-use APIs that give higher
  performance, in addition to the easy-to-use ones. Nevertheless, it's important
  to keep in mind that from the standpoint of you, a client of this library,
  all you care about is #1 and #3, and stb libraries DO NOT emphasize #3 above all.
 
  Some secondary priorities arise directly from the first two, some of which
  provide more explicit reasons why performance can't be emphasized.
 
     - Portable ("ease of use")
     - Small source code footprint ("easy to maintain")
     - No dependencies ("ease of use")
 
  ===========================================================================
 
  I/O callbacks
 
  I/O callbacks allow you to read from arbitrary sources, like packaged
  files or some other source. Data read from callbacks are processed
  through a small internal buffer (currently 128 bytes) to try to reduce
  overhead.
 
  The three functions you must define are "read" (reads some bytes of data),
  "skip" (skips some bytes of data), "eof" (reports if the stream is at the end).
 
  ===========================================================================
 
  SIMD support
 
  The JPEG decoder will try to automatically use SIMD kernels on x86 when
  supported by the compiler. For ARM Neon support, you must explicitly
  request it.
 
  (The old do-it-yourself SIMD API is no longer supported in the current
  code.)
 
  On x86, SSE2 will automatically be used when available based on a run-time
  test; if not, the generic C versions are used as a fall-back. On ARM targets,
  the typical path is to have separate builds for NEON and non-NEON devices
  (at least this is true for iOS and Android). Therefore, the NEON support is
  toggled by a build flag: define STBI_NEON to get NEON loops.
 
  If for some reason you do not want to use any of SIMD code, or if
  you have issues compiling it, you can disable it entirely by
  defining STBI_NO_SIMD.
 
  ===========================================================================
 
  HDR image support   (disable by defining STBI_NO_HDR)
 
  stb_image supports loading HDR images in general, and currently the Radiance
  .HDR file format specifically. You can still load any file through the existing
  interface; if you attempt to load an HDR file, it will be automatically remapped
  to LDR, assuming gamma 2.2 and an arbitrary scale factor defaulting to 1;
  both of these constants can be reconfigured through this interface:
 
      stbi_hdr_to_ldr_gamma(2.2f);
      stbi_hdr_to_ldr_scale(1.0f);
 
  (note, do not use _inverse_ constants; stbi_image will invert them
  appropriately).
 
  Additionally, there is a new, parallel interface for loading files as
  (linear) floats to preserve the full dynamic range:
 
     float *data = stbi_loadf(filename, &x, &y, &n, 0);
 
  If you load LDR images through this interface, those images will
  be promoted to floating point values, run through the inverse of
  constants corresponding to the above:
 
      stbi_ldr_to_hdr_scale(1.0f);
      stbi_ldr_to_hdr_gamma(2.2f);
 
  Finally, given a filename (or an open file or memory block--see header
  file for details) containing image data, you can query for the "most
  appropriate" interface to use (that is, whether the image is HDR or
  not), using:
 
      stbi_is_hdr(char *filename);
 
  ===========================================================================
 
  iPhone PNG support:
 
  We optionally support converting iPhone-formatted PNGs (which store
  premultiplied BGRA) back to RGB, even though they're internally encoded
  differently. To enable this conversion, call
  stbi_convert_iphone_png_to_rgb(1).
 
  Call stbi_set_unpremultiply_on_load(1) as well to force a divide per
  pixel to remove any premultiplied alpha *only* if the image file explicitly
  says there's premultiplied data (currently only happens in iPhone images,
  and only if iPhone convert-to-rgb processing is on).
 
  ===========================================================================
]#

[cc("-c stb_image.c -DSTB_IMAGE_IMPLEMENTATION -fPIC -o stb_image.o")]
[link_obj("stb_image.o")]
[link("m")]

import "libc/stdio.csp";

namespace stb {
    namespace image {
        const default:    i32 = 0;
        const grey:       i32 = 1;
        const grey_alpha: i32 = 2;
        const rgb:        i32 = 3;
        const rgb_alpha:  i32 = 4;

        #
        # PRIMARY API - works on images of any type
        #

        type IOCallbacks: struct {
            read: const fn<i32>(&void, &char, i32),
            skip: const fn(&void, i32),
            eof:  const fn<i32>(&void)
        };

        extern "C" {
            #
            # 8-bits-per-channel interface
            #

            fn stbi_load_from_memory(buffer: &const u8, length: i32, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u8;
            fn stbi_load_from_callbacks(clbk: &const IOCallbacks, user: &void, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u8;
            fn stbi_load(filename: &const char, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u8;
            fn stbi_load_from_file(f: &libc::FILE, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u8;
            # for stbi_load_from_file, file pointer is left pointing immediately after image

            fn stbi_load_gif_from_memory(buffer: &const u8, lenght: i32, delays: &&i32, x: &i32, y: &i32, z: &i32, comp: &i32, req_comp: i32): &u8;

            #
            # 16-bits-per-channel interface
            #

            fn stbi_load_16_from_memory(buffer: &const u16, length: i32, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u16;
            fn stbi_load_16_from_callbacks(clbk: &const IOCallbacks, user: &void, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u16;
            fn stbi_load_16(filename: &const char, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u16;
            fn stbi_load_16_from_file(f: &libc::FILE, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &u16;
        
            #
            # float-per-channel interface
            #

            fn stbi_loadf_from_memory(buffer: &const f32, length: i32, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &f32;
            fn stbi_loadf_from_callbacks(clbk: &const IOCallbacks, user: &void, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &f32;
            fn stbi_loadf(filename: &const char, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &f32;
            fn stbi_loadf_from_file(f: &libc::FILE, x: &i32, y: &i32, channels_in_file: &i32, desired_channels: &i32): &f32;

            fn stbi_hdr_to_ldr_gamma(gamma: f32);
            fn stbi_hdr_to_ldr_scale(scale: f32);
            fn stbi_ldr_to_hdr_gamma(gamma: f32);
            fn stbi_ldr_to_hdr_scale(scale: f32);

            fn stbi_is_hdr_from_callbacks(clbk: &const IOCallbacks, user: &void): i32;
            fn stbi_is_hdr_from_memory(buffer: &const u8, length: i32): i32;
            fn stbi_is_hdr(filename: &const char): i32;
            fn stb_is_hdr_from_file(f: &libc::FILE): i32;

            # get a VERY brief reason for failure
            # on most compilers (and ALL modern mainstream compilers) this is threadsafe
            fn stbi_failure_reason(): &const char;

            # free the loaded image -- this is just free()
            fn stbi_image_free(retval_from_stbi_load: &void);         

            # get image dimensions & components without fully decoding
            fn stbi_info_from_memory(buffer: &const u8, length: i32, x: &i32, y: &i32, comp: &i32): i32;
            fn stbi_info_from_callbacks(clbk: &const IOCallbacks, user: &void, x: &i32, y: &i32, comp: &i32): i32;
            fn stbi_is_16_bit_from_memory(buffer: &const u8, length: i32): i32;
            fn stbi_is_16_bit_from_callbacks(clbk: &const IOCallbacks, user: &void): i32;

            fn stbi_info(filename: &const char, x: &i32, y: &i32, comp: &i32): i32;
            fn stbi_info_from_file(f: &libc::FILE, x: &i32, y: &i32, comp: &i32): i32;
            fn stbi_is_16_bit(filename: &const char): i32;
            fn stbi_is_16_bit_from_file(f: &libc::FILE): i32;

            # for image formats that explicitly notate that they have premultiplied alpha,
            # we just return the colors as stored in the file. set this flag to force
            # unpremultiplication. results are undefined if the unpremultiply overflow.
            fn stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: i32);

            # indicate whether we should process iphone images back to canonical format,
            # or just pass them through "as-is"
            fn stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: i32);

            # flip the image vertically, so the first pixel in the output array is the bottom left
            fn stbi_set_flip_vertically_on_load(flag_true_if_sould_flip: i32);

            # as above, but only applies to images loaded on the thread that calls the function
            # this function is only available if your compiler supports thread-local variables;
            # calling it will fail to link if your compiler doesn't
            fn stbi_set_unpremultiply_on_load_thread(flag_true_if_should_unpremultiply: i32);
            fn stbi_convert_iphone_png_to_rgb_thread(flag_true_if_should_convert: i32);
            fn stbi_set_flip_vertically_on_load_thread(flag_true_if_should_flip: i32);

            #
            # ZLIB client - used by PNG, available for other purposes
            #

            fn stbi_zlib_decode_malloc_guesssize(buffer: &const char, length: i32, initial_size: i32, outlen: &i32): &char;
            fn stbi_zlib_decode_malloc_guesssize_headerflag(buffer: &const char, length: i32, initial_size: i32, outlen: &i32, parse_header: i32): &char;
            fn stbi_zlib_decode_malloc(buffer: &const char, length: i32, outlen: &i32): &char;
            fn stbi_zlib_decode_buffer(obuffer: &char, olen: i32, ibuffer: &const char, ilen: i32): i32;

            fn stbi_zlib_decode_noheader_malloc(buffer: &const char, length: i32, outlen: &i32): &char;
            fn stbi_zlib_decode_noheader_buffer(obuffer: &char, olen: i32, ibuffer: &const char, ilen: i32): i32;
        }
    }
}

#[
------------------------------------------------------------------------------
This software is available under 2 licenses -- choose whichever you prefer.
------------------------------------------------------------------------------
ALTERNATIVE A - MIT License
Copyright (c) 2017 Sean Barrett
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
------------------------------------------------------------------------------
ALTERNATIVE B - Public Domain (www.unlicense.org)
This is free and unencumbered software released into the public domain.
Anyone is free to copy, modify, publish, use, compile, sell, or distribute this
software, either in source code form or as a compiled binary, for any purpose,
commercial or non-commercial, and by any means.
In jurisdictions that recognize copyright laws, the author or authors of this
software dedicate any and all copyright interest in the software to the public
domain. We make this dedication for the benefit of the public at large and to
the detriment of our heirs and successors. We intend this dedication to be an
overt act of relinquishment in perpetuity of all present and future rights to
this software under copyright law.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
------------------------------------------------------------------------------
]#
