#[ 
    utils.csp - Various utility functions, macros and structs, e.g. va_lists

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#

import "memory.csp";
import "cfg.csp";

# cast a value to a pointer type
macro ptr(x) {
    ((x): &void)
}

# cast a value to a pointer with specific type
macro ptr(x, ty) {
    ((x): &(ty))
}

# wrapper to traverse a range from lo to hi in a for loop
macro range(lo, hi) {
    let i = lo; i < hi; i++
}

# wrapper to traverse a range from lo to hi in a for loop
macro range(i, lo, hi) {
    let i = lo; i < hi; i++
}

# swaps two variables with each other without creating a third variable
macro xor_swap(a, b) {
    ((a) ^= (b) |> (b) ^= (a) |> (a) ^= (b))
}

# swaps two variables with a third buffer variable
macro swap(a, b) {
    {
        let __swap_tmp = (a);
        (a) = (b);
        (b) = __swap_tmp;
    }
}

macro either(a, b) {
    ((a) |> if $: bool => $ else (b))
}

# converts any type to a string
macro ttos(ty) {
    (type::__to_str(ty))
}

# checks if the bit of v at position p is 1
macro check_bit(v, p) {
    ((v) & ((1: u64) << (p)))
}

# toggles the bit of v at position v
macro toggle_bit(v, p) {
    ((v) ^= ((1: u64) << (p)))
}

# sets the bit of v at position p to x
macro set_bit(v, p, x) {
    ((v) ^= ((-(x)) ^ (v)) & ((1: u64) << (p)))
}

# gets an argument from a va_list
macro va_arg(ap, ty) {
    (*(::std::va::get((ap), sizeof (ty), alignof (ty), type::reg_class(ty)): &(ty)))
}

# copies the data of a va_list
macro va_copy(dest, src) {
    (::std::va::copy((dest), (src)))
}

# size of one va_element in the C backend
macro C_VA_ARGS_SIZE { 24 }

# VAList implementation for the assembly and C backend
namespace std {
    type VAList: std::va::Element;

    namespace va {
        [cfg("codegen_asm")]
        type Element: struct {
            gp_offset: u32,
            fp_offset: u32,
            overflow_arg_area: &void,
            reg_save_area: &void
        };

        [cfg("codegen_asm")]
        fn __mem(ap: &Element, size: i32, align: i32): &void
        {
            let p: &void = ap.overflow_arg_area;
            if align > 8
                p = (((p + 15) / 16 * 16): &void);
            
            ap.overflow_arg_area = ((((p + size + 7): u64) / 8 * 8): &void);
            <- p;
        }

        [cfg("codegen_asm")]
        fn __gp(ap: &Element, size: i32, align: i32): &void
        {
            if ap.gp_offset >= 48
                <- __mem(ap, size, align);
    
            let r: &void = ap.reg_save_area + (ap.gp_offset: u64);
            ap.gp_offset += 8;
            <- r;
        }

        [cfg("codegen_asm")]
        fn __fp(ap: &Element, size: i32, align: i32): &void
        {
            if ap.fp_offset >= 112
                <- __mem(ap, size, align);
    
            let r: &void = ap.reg_save_area + (ap.fp_offset: u64);
            ap.fp_offset += 8;
            <- r;
        }

        [cfg("codegen_asm")]
        fn copy(dest: &Element, src: &Element)
        {
            (*dest) = *src;
        }

        [cfg("codegen_asm")]
        fn get(ap: &Element, size: i32, align: i32, reg_class: i32): &void
        {
            match reg_class {
                0 => ret __gp(ap, size, align);
                1 => ret __fp(ap, size, align);
                _ => ret __mem(ap, size, align);
            }
        }
    }

    namespace va {
        [cfg("codegen_c")]
        type Element: struct {
            __data: u8[C_VA_ARGS_SIZE!]
        };

        [cfg("codegen_c")]
        namespace __static {
            let integer64: u64 = 0;
            let float32: f32 = 0;
            let float64: f64 = 0;
            let float80: f80 = 0;
        }

        [cfg("codegen_c")]
        fn __gp(_ap: &Element, size: i32): &void
        {
            if size <= 4 {
                extern "C"(
                    "__csp_std_va___static_integer64 = va_arg(*(va_list*)__csp__ap, int);"
                );
            }
            else {
                extern "C"(
                    "__csp_std_va___static_integer64 = va_arg(*(va_list*)__csp__ap, long);"
                );
            }

            <- &__static::integer64;
        }

        [cfg("codegen_c")]
        fn __fp(_ap: &Element, size: i32): &void
        {
            match size {
                sizeof f32 => {
                    extern "C"(
                        "__csp_std_va___static_float32 = (float) va_arg(*(va_list*)__csp__ap, double);"
                    );
                    <- &__static::float32;
                }
                sizeof f64 => {
                    extern "C"(
                        "__csp_std_va___static_float64 = va_arg(*(va_list*)__csp__ap, double);"
                    );
                    <- &__static::float64;
                }
                sizeof f80 => {
                    extern "C"(
                        "__csp_std_va___static_float80 = va_arg(*(va_list*)__csp__ap, long double);"
                    );
                    <- &__static::float80;
                }
                _ => ret nil;
            }
        }

        [cfg("codegen_c")]
        fn __mem(_ap: &Element, _size: i32): &void
        {
            <- nil;
        }

        [cfg("codegen_c")]
        fn get(ap: &Element, size: i32, _align: i32, reg_class: i32): &void
        {
            match reg_class {
                0 => ret __gp(ap, size);
                1 => ret __fp(ap, size);
                _ => ret __mem(ap, size);
            }
        }

        [cfg("codegen_c")]
        fn copy(dest: &Element, src: &Element)
        {
            (*dest) = *src;
        }
    }
}