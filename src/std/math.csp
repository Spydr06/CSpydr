#[ 
    math.csp - CSpydr's math library

    THIS FILE IS PART OF THE STANDARD LIBRARY FOR THE CSPYDR PROGRAMMING LANGUAGE.

    Copyright (c) 2021 - 2022 Spydr06
    CSpydr is distributed under the MIT license.
    This is free software; see the source for copying conditions;
    you may redistribute it under the terms of the MIT license.
    This program has absolutely no warranty.
]#

import "types.csp";

macro max(a, b) {
    (if (a) > (b) => (a) else (b))
}

macro min(a, b) {
    (if (a) < (b) => (a) else (b))
}

namespace std {
    type Division: struct {
        quot: i32,
        rem: i32
    };

    type Division64: struct {
        quot: i64,
        rem: i64
    };

    namespace math {
        const PI: f64 = 3.141592653589793;

        namespace __static {

        }

        fn nan(): f32 
        {
            let n = 0x7fc00000;
            <- *((&n): &f32);
        }
        
        fn inf(): f32 
        {
            let i = 0x7f800000;
            <- *((&i): &f32);
        }

        fn pow(a: i32, b: i32): i64 
        {
            match b {
                0 => ret 0;
                1 => ret a;
                2 => ret a²;
                3 => ret a³;
                _ => {
                    let c: i64 = 1;

                    for let i = 0; i < b; i++;
                        c *= a;

                    <- c;
                }
            }
        }

        fn div(num: i32, den: i32): std::Division
            <- Division :: {
                num / den,
                num % den
            };
        
        fn div64(num: i64, den: i64): std::Division64
            <- Division64 :: {
                num / den,
                num % den
            };

        # mathematically correct modulo; the % operator only works properly with positive integers.
        fn mod(num: i64, den: i64): i64
        {
            let result = num % den;
            while result < 0
                result += den;
            <- result;
        }

        fn sqrt(n: f64): f64 
        {
            let r: f64 = 0.0;
            asm "fldl " n ";" 
                "fsqrt;"
                "fstpl " r;
            
            <- r;
        }

        fn abs(a: i32): i32
            <- if a > 0 => a else -a;
        
        fn abs64(a: i64): i64
            <- if a > 0 => a else -a;
    }
}