import "str.csp";

namespace std {
    type ErrorType: enum {
        GENERIC,
        NONE,
        INVAL,
        IO,
        NILPTR
    };

    type Error: struct {
        kind: ErrorType,
        msg: &char
    };

    namespace error {
        namespace __static {
            let __error: Error;
        }

        fn new(kind: ErrorType, msg: &char): Error {
            __static::__error.kind = kind;
            __static::__error.msg = msg;
            <- __static::__error;
        }

        fn none(): Error {
            __static::__error.kind = ErrorType::NONE;
            __static::__error.msg = "";
            <- __static::__error;
        }

        fn current(): Error {
            do
                __static::__error = none()
            unless __static::__error;
            <- __static::__error;
        }

        fn str(err: ErrorType): &const char {
            match err {
                ErrorType::NONE => ret "none";
                ErrorType::GENERIC => ret "generic";
                ErrorType::INVAL => ret "invalid";
                ErrorType::IO => ret "input/output";
                ErrorType::NILPTR => ret "nil pointer";
                _ => ret "<unknown>";
            }
        }
    }
}