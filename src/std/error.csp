import "string.csp";

namespace std {
    type Errno: enum {
        NONE = 0,
        PERM = 1,
        NOENT,
        SRCH,
        INTR,
        IO,
        NXIO,
        TOOBIG,
        NOEXEC,
        BADF,
        CHILD,
        AGAIN,
        NOMEM,
        ACCESS,
        EFAULT,
        NOTBLK,
        BUSY,
        EXIST,
        XDEV,
        NODEV,
        NOTDIR,
        ISDIR,
        INVAL,
        NFILE,
        MFILE,
        NOTTY,
        TXTBSY,
        FBIG,
        NOSPC,
        SPIPE,
        ROFS,
        MLINK,
        PIPE,
        DOM,
        RANGE,
        DEADLK,
        NAMETOOLONG,
        NOLCK,
        NOSYS,
        NOTEMPTY,
        LOOP,
        WOULDBLOCK = 11,
        NOMSG = 42,
        IDRM,
        CHRNG,
        L2NSYNC,
        L3HLT,
        L3RST,
        LNRNG,
        UNATCH,
        NOCSI,
        L2HLT,
        BADE,
        BADR,
        XFULL,
        NOANO,
        BADRQC,
        BADSLT,
        DEADLOCK = 35,
        BFONT = 59,
        NOSTR,
        NODATA,
        TME,
        NOSR,
        NONET,
        NOPKG,
        REMOTE,
        NOLINK,
        ADV,
        SRMNT,
        COMM,
        PROTO,
        MULTIHOP,
        DOTDOT,
        BADMSG,
        OVERFLOW,
        NOTUNIQ,
        BADFD,
        REMCHG,
        LIBACC,
        LIBBAD,
        LIBSCN,
        LIBMAX,
        LIBEXEC,
        ILSEQ,
        RESTART,
        STRPIPE,
        USERS,
        NOTSOCK,
        DESTADDRREQ,
        MSGSIZE,
        PROTOTYPE,
        NOPROTOOPT,
        PROTONOSUPPORT,
        SOCKTNOSUPPORT,
        OPNOTSUPP,
        NOTSUP = 95,
        PFNOSUPPORT,
        AFNOSUPPORT,
        ADDRINUSE,
        ADDRNOTAVAIL,
        NETDOWN,
        NETUNREACH,
        NETRESET,
        CONNABORTED,
        CONNRESET,
        NOBUFS,
        ISCONN,
        NOTCONN,
        SHUTDOWN,
        TOOMANYREFS,
        TIMEDOUT,
        CONNREFUSED,
        HOSTDOWN,
        HOSTUNREACH,
        ALREADY,
        INPROGRESS,
        STALE,
        UCLEAN,
        NOTNAM,
        NAVAIL,
        INAM,
        REMOTEIO,
        DQUOT,
        NOMEDIUM,
        MEDIUMTYPE,
        CANCELED,
        NOKEY,
        KEYEXPIRED,
        KEYREVOKED,
        KEYREJECTED,
        OWNERDEAD,
        NOTRECOVERABLE,
        RFKIL,
        HWPOISON,

        # custom error codes for CSpydr
        NILPTR,
        INDEXOUTOFBOUNDS,
        ASSERT,

        __LAST
    };

    type Error: struct {
        kind: Errno,
        msg: &char
    };

    namespace error {
        namespace __static {
            let __error: Error;
        }

        fn new(kind: Errno, msg: &const char): Error {
            using __static;

            __error.kind = kind;
            __error.msg = msg;
            <- __error;
        }

        fn set(err: Error): Error {
            using __static;

            __error.kind = err.kind;
            __error.msg = err.msg;
            <- __error;
        }

        fn none(): Error {
            using __static;

            __error.kind = Errno::NONE;
            __error.msg = nil;
            <- __error;
        }

        fn current(): Error {
            using __static;
            do
                __error = none()
            unless __error;
            <- __error;
        }

        fn clear(): Error {
            using __static;

            let last = __error;
            __error.kind = Errno::NONE;
            __error.msg = nil;
            <- last;
        }

        fn str(err: Errno): &const char {
            if err < 0
                err = -err; # for -INVAL, etc.

            match err {
                Errno::NONE => ret "none";
                Errno::INVAL => ret "invalid";
                Errno::IO => ret "input/output";
                Errno::NILPTR => ret "nil pointer";
                Errno::BADF => ret "bad file descriptor";
                Errno::NOTDIR => ret "not a directory";
                Errno::INDEXOUTOFBOUNDS => ret "index out of bounds";
                Errno::ASSERT => ret "failed assertion";
                Errno::CHILD => ret "child";
                _ => ret "<unknown>";
            }
        }

        fn is_some(): bool {
            using __static;
            <- __error.kind == Errno::NONE;
        }
    }
}