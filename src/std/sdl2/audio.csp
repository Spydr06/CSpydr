#[
  Simple DirectMedia Layer
  Copyright (C) 1997-2022 Sam Lantinga <slouken@libsdl.org>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
]#

import "rwops.csp";

namespace sdl {
    type SDL_AudioFormat: u32;
}

macro SDL_AUDIO_MASK_BITSIZE { (0xff) }
macro SDL_AUDIO_MASK_DATATYPE { (1 << 8) }
macro SDL_AUDIO_MASK_ENDIAN { (1 << 12) }
macro SDL_AUDIO_MASK_SIGNED { (1 << 15) }
macro SDL_AUDIO_BITSIZE(x) { (x & SDL_AUDIO_MASK_BITSIZE!) }
macro SDL_AUDIO_ISFLOAT(x) { (x & SDL_AUDIO_MASK_DATATYPE!) }
macro SDL_AUDIO_ISBIGENDIAN(x) { (x & SDL_AUDIO_MASK_ENDIAN!) }
macro SDL_AUDIO_ISSIGNED(x) { (x & SDL_AUDIO_MASK_SIGNED!) }
macro SDL_AUDIO_ISINT(x) { (!SDL_AUDIO_ISFLOAT!(x)) }
macro SDL_AUDIO_ISLITTLEENDIAN(x) { (!SDL_AUDIO_ISBIGENDIAN!(x)) }
macro SDL_AUDIO_ISUNSIGNED(x) { (!SLD_AUDIO_ISSIGNED!(x)) }

macro SDL_AUDIO_U8 { 0x0008 } # Unsigned 8-bit samples 
macro SDL_AUDIO_S8 { 0x8008 } # Signed 8-bit samples
macro SDL_AUDIO_U16LSB { 0x0010 } # Unsigned 16-bit samples
macro SDL_AUDIO_S16LSB { 0x8010 } # Signed 16-bit samples
macro SDL_AUDIO_U16MSB { 0x1010 } # As above, but big-endian byte order
macro SDL_AUDIO_S16MSB { 0x9010 } # As above, but big-endian byte order
macro SDL_AUDIO_U16 { SDL_AUDIO_U16LSB! }
macro SDL_AUDIO_S16 { SDL_AUDIO_S16LSB! }

macro SDL_AUDIO_S32LSB { 0x8020 } # 32-bit integer samples
macro SDL_AUDIO_S32MSB { 0x9020 } # As above, but big-endian byte order
macro SDL_AUDIO_S32 { AUDIO_S32LSB! }

macro SDL_AUDIO_F32LSB { 0x8120 } # 32-bit floating point samples
macro SDL_AUDIO_F32MSB { 0x9120 } # As above, but big-endian byte order
macro SDL_AUDIO_F32 { SDL_AUDIO_F32LSB! }

# TODO: add big-endian support when preprocessor logic is implemented
macro SDL_AUDIO_U16SYS { SDL_AUDIO_U16LSB! }
macro SDL_AUDIO_S16SYS { SDL_AUDIO_S16LSB! }
macro SDL_AUDIO_S32SYS { SDL_AUDIO_S32LSB! }
macro SDL_AUDIO_F32SYS { SDL_AUDIO_F32LSB! }

macro SDL_AUDIO_ALLOW_FREQUENCY_CHANGE { 0x00000001 }
macro SDL_AUDIO_ALLOW_FORMAT_CHANGE    { 0x00000002 }
macro SDL_AUDIO_ALLOW_CHANNELS_CHANGE  { 0x00000004 }
macro SDL_AUDIO_ALLOW_SAMPLES_CHANGE   { 0x00000008 }
macro SDL_AUDIO_ALLOW_ANY_CHANGE {
    (
        SDL_AUDIO_ALLOW_FREQUENCY_CHANGE! | 
        SDL_AUDIO_ALLOW_FORMAT_CHANGE!    | 
        SDL_AUDIO_ALLOW_CHANNELS_CHANGE!  | 
        SDL_AUDIO_ALLOW_SAMPLES_CHANGE!
    )
}

namespace sdl {
    type SDL_AudioCallback: fn(&void, &u8, i32);

    type SDL_AudioSpec: struct {
        freq: i32,
        format: SDL_AudioFormat,
        channels: u8,
        silence: u8,
        samples: u16,
        padding: u16,
        size: u32,
        callback: SDL_AudioCallback,
        userdata: &void
    };

    type SDL_AudioFilter: fn(&SDL_AudioCVT, SDL_AudioFormat);

macro SDL_AUDIOCVT_MAX_FILTERS { 9 }

    type SDL_AudioCVT: struct {
        needed: i32,
        src_format: SDL_AudioFormat,
        dst_format: SDL_AudioFormat,
        rate_incr: f64,
        buf: &u8,
        length: i32,
        len_cvt: u32,
        len_mult: i32,
        len_ratio: f64,
        filters: SDL_AudioFilter[SDL_AUDIOCVT_MAX_FILTERS! + 1],
        filter_index: i32
    };

    extern "C" {
        fn SDL_GetNumAudioDrivers(): i32;
        fn SDL_GetAudioDriver(index: i32): &const char;
        fn SDL_AudioInit(driver_name: &const char): i32;
        fn SDL_AudioQuit();
        fn SDL_GetCurrentAudioDriver(): &const char;
        fn SDL_OpenAudio(desired: &SDL_AudioSpec, obtained: &SDL_AudioSpec): i32;
    }

    type SDL_AudioDeviceID: u32;

    extern "C" {
        fn SDL_GetNumAudioDevices(iscapture: i32): i32;
        fn SDL_GetAudioDeviceName(index: i32, iscapture: i32): &const char;
        fn SDL_GetAudioDeviceSpec(index: i32, iscapture: i32, spec: &SDL_AudioSpec): i32;
        fn SDL_OpenAudioDevice(device: &const char, iscapture: i32, desired: &const SDL_AudioSpec, obtained: &SDL_AudioSpec, allowed_changes: i32): SDL_AudioDeviceID;
    }

    type SDL_AudioStatus: enum {
        STOPPED,
        PLAYING,
        PAUSED
    };

    extern "C" {
        fn SDL_GetAudioStatus(): SDL_AudioStatus;
        fn SDL_GetAudioDeviceStatus(dev: SDL_AudioDeviceID): SDL_AudioStatus;
        fn SDL_PauseAudio(pause_on: i32);
        fn SDL_PauseAudioDevice(dev: SDL_AudioDeviceID, pause_on: i32);
        
        fn SDL_LoadWAV_RW(src: &SDL_RWops, freesrc: i32, spec: &SDL_AudioSpec, audio_buf: &&u8, audio_len: &u32): &SDL_AudioSpec;
    }

    fn SDL_LoadWAV(file: &const char, spec: &SDL_AudioSpec, audio_buf: &&u8, audio_len: &u32): &SDL_AudioSpec {
        <- SDL_LoadWAV_RW(SDL_RWFromFile(file, "rb"), 1, spec, audio_buf, audio_len);
    }

    extern "C" {
        fn SDL_FreeWAV(audio_buf: &u8);

        fn SDL_BuildAudioCVT(cvt: &SDL_AudioCVT, 
                            src_format: SDL_AudioFormat, 
                            src_cannels: u8, 
                            src_rate: i32, 
                            dst_format: SDL_AudioFormat, 
                            dst_cannels: u8, 
                            dst_rate: i32
            ): i32;
        fn SDL_ConvertAudio(cvt: &SDL_AudioCVT): i32;
    }

    type SDL_AudioStream: void;

    extern "C" {
        fn SDL_NewAudioStream(src_format: const SDL_AudioFormat,
                              src_cannels: const u8,
                              src_rate: const i32,
                              dst_format: const SDL_AudioFormat,
                              dst_cannels: const u8,
                              dst_rate: const i32
            ): &SDL_AudioStream;
        
        fn SDL_AudioStreamPut(stream: &SDL_AudioStream, buf: &const void, len_: i32): i32;
        fn SDL_AudioStreamGet(stream: &SDL_AudioStream, buf: &void, len_: i32): i32;
        fn SDL_AudioStreamAvailable(stream: &SDL_AudioStream): i32;
        fn SDL_AudioStreamFlush(stream: &SDL_AudioStream): i32;
        fn SDL_AudioStreamClear(stream: &SDL_AudioStream);
        fn SDL_FreeAudioStream(stream: &SDL_AudioStream);

macro SDL_MIX_MAXVOLUME { 128 }

        fn SDL_MixAudio(dst: &u8, src: &const u8, len_: u32, volume: i32);
        fn SDL_MixAudioFormat(dst: &u8, src: &const u8, format: SDL_AudioFormat, len_: u32, volume: i32);
        fn SDL_DequeueAudio(dev: SDL_AudioDeviceID, data: &void, len_: u32): u32;
        fn SDL_GetQueuedAudioSize(dev: &SDL_AudioDeviceID): u32;
        fn SDL_ClearQueuedAudio(dev: &SDL_AudioDeviceID);

        fn SDL_LockAudio();
        fn SDL_LockAudioDevice(dev: SDL_AudioDeviceID);
        fn SDL_UnlockAudio();
        fn SDL_UnlockAudioDevice(dev: SDL_AudioDeviceID);

        fn SDL_CloseAudio();
        fn SDL_CloseAudioDevice(dev: SDL_AudioDeviceID);
    }
}