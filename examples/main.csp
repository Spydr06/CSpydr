# a basic test program used for developing this programming language 

##
@derive(compile_type, transpile)
@derive(include_dirs, {
    "./examples",
    "std"
})
##

import "string.csp";
import "vec.csp";
import "memory.csp";
import "stdlib.csp";
import "stdio.csp";

macro message() |: init_str("Hello World") :|

fn main(argc: i32, argv: &&char): i32 {   
    let string: str = message!;
    str_append(string, '!');

    puts(str_lit(string));

    atexit(| | => {
        puts("exiting...");
    });

    <- 0;
}

# Some plans for generics:
##fn generic_test<T>() {
    let x: T = 0;
    printf("typeof t: %s\n", typeof T);
}

type Pair: struct<K, V> {
    key: K,
    val: V
};

fn new_pair<K, V>(key: K, val: V): Pair {
    let pair: Pair<K, V> = malloc(sizeof(Pair<K, V>));
    pair.key = key;
    pair.val = val;

    return pair;
}

##

# Idea for macro argument implementation:
##
macro x(a, b) |: printf("-> $a is %d\n-> $b is %d", $a, $b) :|
##