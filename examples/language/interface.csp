import "std.csp";

type Foo: interface {
    fn foo(): i32,
    fn bar(self: &Foo)
};

type Bar: struct {
    x: i32
};

[impl("Bar", "Foo")]
fn foo(): i32 {
    <- 69;
}

[impl("Foo", "Bar")]
fn bar(self: &Bar) {

}

# how to implement Foo for Bar?

fn main(): i32 {
    let bar = Bar::{0};
    bar(&bar);

    <- 0;
}

fn do_sth(value: &Foo): i32 {
    Foo::bar(value);
    <- Foo::foo();
}
