# An implementation of a string type

# --- the str_s struct and str typedef ---
type str_s: struct {
    data:  *char,
    len: u64,
    alloc: u64
};
type str: *str_s;
# ----------------------------------------

# --- a default `nil` type for strings ---
let str_nil: str = &{"\0", 0, 1}: str_s;
# ----------------------------------------

# the initializer function
fn init_str(string: *char): str {
    let s: str = malloc(sizeof(str_s));

    if string != nil {
        let len: u64 = strlen(string);
        s.alloc = len + 1;
        s.data = malloc(s.alloc);
        memcpy(s.data, string, len);
        s.len = len;
    }
    else {
        s.alloc = 1;
        s.data = malloc(s.alloc);
        s.data[0] = 0;

        s.len = 0;
    }

    <- s;
}

fn free_str(s: str) {
    s = s;
    free(s.data);
    free(s);
}

fn str_lit(s: str): *char {
    <- s.data;
}

fn str_len(s: str): u64 {
    <- s.len;
}

fn str_eq(a: str, b: str): bool {
    <- strcmp(str_lit(a), str_lit(b)) == 0;  
}

fn str_append(s: str, c: char) {
    s.alloc++;
    s.data = realloc(s.data, s.alloc);

    s.data[s.len++] = c;
}

fn str_cpy(s: str): str {
    <- init_str(s.data);
}