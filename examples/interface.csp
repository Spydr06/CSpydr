import "std.csp";

# TODO:
# - asm backend support
# - typechecking

type ToString: interface {
    fn to_string(self: &ToString): &const char
};

type Foo: struct {
};

namespace foo {
    dyn(ToString) fn to_string(self: &Foo): &const char {
        <- "Foo::{}";
    }
}

type Bar: struct {
    a: i32
};

namespace bar {
    dyn(ToString) fn to_string(self: &Bar): &const char {
        <- "Bar::{}";
    }
}

fn main(): i32 {
#    let foo = Foo::{};
    let bar = Bar::{69};
    std::io::printf("%p\n", &bar);

#    print(&foo);
    print(&bar);

    <- 0;
}

fn print(a: dyn ToString) {
#    std::io::puts(a.to_string());
#    a.to_string();
    
    let x: union {
        a: dyn ToString,
        b: struct {
            data: &Bar,
            vtable: &void
        }
    };
    x.a = a;

#    let b = a: &ToString;
#    let c = b: &Bar;

    std::io::printf("%p\n", x.b.data);
}
