import "stdlib.csp";

macro message(arg1, arg2) { "Hello, World!\n" }
macro print_ln(str) { printf("%s\n", str) }

macro bar(s) { s }
macro foo() { bar!("f") }

#[
    new multiline comments!
]#

namespace utils {
    fn add(a: i32, b: i32): i32 ret a + b;

    fn putstr(str: &char) {
        ::puts(str); # don't use utils::puts, use the puts function in the global scope
    }

    fn puts(str: &char, x: i32) {

    }

    const zero = 0;

    type binary: enum {
        B0 = 0,
        B1 = 1,
    };
}

type data: struct {
    msg: &char,
    exit: i8,
};

let program_data: data;

fn va_test(x: i32, y: ...) {
    let z = va_arg y: i32;

    printf("%d\n", x `utils::add` z);
}

fn delay(seconds: i32)
{
    let start: time_t;
    let current: time_t;

    time(&start);
    time(&current);
    while (current-start) < seconds
        time(&current);
}

fn main(argc: i32, argv: &&char): i32 {
    program_data = data :: {
        "xxxxHello " "World!xxxx", 
        0x00
    };

    va_test(3, 4 + true: u8);

    utils::putstr(std::string::substr(program_data.msg, 4, 16));

    for let i = utils::zero; i < 10; i++;
        match i % 2 {
            utils::binary::B0 => printf("%d is even\n", i);
            utils::binary::B1 => printf("%d is odd\n", i);
        }

    match type i32 {
        i32 => puts("Ok");
        _ => puts("Huh?");
    }

    printf("%s at %d\n", __file__!, __line__!);
    printf("cspc version: %s\n", __version__!);
    printf("compile time: %s\n", __time__!);
    printf("compile date: %s\n", __date__!);
    printf("os: %s\n", __system__!);
    printf("arch: %s\n", __architecture__!);
    printf("%s was compiled using %s\n", __main_file__!, __compile_type__!);
    printf("%s\n", foo!);

    std::assert::disable();
    assert_eq!(7, 5, "TEST");

    let int = 0; # naming variables after C keywords works now

    <- int;
}