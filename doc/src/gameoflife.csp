
import "libc/stdio.csp";
import "libc/stdlib.csp";

macro MAXROWS { 40  }
macro MAXCOLS { 120 }

let board: i32[MAXROWS!][MAXCOLS!] = [ 0 ];

fn main(): i32 {
    let option: char[64];

    puts("Starting Game!\nChoose a board:\n 1. Random board\n 2. Glider board");

    while (atoi(option) != 1) && (atoi(option) != 2)
        fgets(option, 64, stdin);
    
    if atoi(option) == 1
        initializeBoard();
    else
        setUpGlider();

    loop {
        system("clear");
        printBoardCurrentState();
        setBoardNextState();
    }

    <- 0;
}

fn initializeBoard() {
    for let i = 0; i < MAXROWS!; i++;
        for let j = 0; j < MAXROWS!; j++;
            board[i][j] = rand() & 1;
}

fn setUpGlider() {
    board[0][1] = 1;
    board[1][2] = 1;
    board[2][0] = 1;
    board[2][1] = 1;
    board[2][2] = 1;
}

fn printBoardCurrentState() {
    for let i = 0; i < MAXROWS!; i++; {
        for let j = 0; j < MAXROWS!; j++; {
            if board[i][j]
                printf("â–ˆ");
            else 
                printf(" ");
        }
        printf("\n");
    }
}

fn setBoardNextState() {
    for let i = 0; i < MAXROWS!; i++;
        for let j = 0; j < MAXROWS!; j++; {
            let neighbours = aliveNeighbours(i, j);

            if (currentBoard[i][j] && neighbors == 2) || (neighbors == 3)
                nextBoard[i][j] = 1; 
            else
                nextBoard[i][j] = 0;
        }
    
    for let i = 0; i < MAXROWS!; i++;
        for let j = 0; j < MAXROWS!; j++;
            board[i][j] = nextBoard[i][j];
}

fn aliveNeighbours(row: i32, col: i32): i32 {
    let testRow = 0;

    if row == 0
        testRow = MAXROWS! - 1;
    else
        testRow = row - 1;
    
    
}