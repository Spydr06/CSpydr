# ------------------------#
# unit tests for math.csp #
# ------------------------#

fn math_test_pow(t: &std::Testing) {
    using std::testing, std::math;
    assert(t, pow(3, 2) == 9, "pow(3, 2) != 9");
    assert(t, pow(10, 4) == 10000, "pow(10, 4) != 10000");
}

fn math_test_div(t: &std::Testing) {
    using std::testing, std::math;
    let d = 10 `div` 3;
    assert(t, d.quot == 3, "d.quot != 3");
    assert(t, d.rem == 1, "d.rem != 1");
}

fn math_test_ldiv(t: &std::Testing) {
    using std::testing, std::math;
    let d = 10 `ldiv` 3;
    assert(t, d.quot == 3, "d.quot != 3");
    assert(t, d.rem == 1, "d.rem != 1");
}

fn math_test_mod(t: &std::Testing) {
    using std::testing, std::math;
    let a = 10 `mod` 3;
    assert(t, a == 1, "a != 1");

    let b = -10 `mod` 3;
    assert(t, b == 2, "b != 1");
}

fn math_test_sqrt(t: &std::Testing) {
    using std::testing, std::math;
    
    assert(t, sqrt(4): i32 == 2, "sqrt(4) != 2");
    assert(t, sqrt(256): i32 == 16, "sqrt(256) != 16");
}

fn math_test_abs(t: &std::Testing) {
    using std::testing, std::math;
    assert(t, abs(1234) == 1234, "abs(1234) != 1234");
    assert(t, abs(-1234) == 1234, "abs(-1234) != 1234");
}

fn math_test_labs(t: &std::Testing) {
    using std::testing, std::math;
    assert(t, labs(1234) == 1234, "labs(1234) != 1234");
    assert(t, labs(-1234) == 1234, "labs(-1234) != 1234");
}