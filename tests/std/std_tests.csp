import "std.csp";

fn main(): i32 {
    using std::testing;

    let tests = [
        # array.csp
        Test::{array_test_last, "array.csp last!()"},
        Test::{array_test_first, "array.csp first!()"},

        # assert.csp
        Test::{assert_test_disable, "assert.csp std::assert::disable()"},

        # c_str.csp
        Test::{c_str_test_strlen, "c_str.csp std::c_str::strlen()"},
        Test::{c_str_test_strnlen, "c_str.csp std::c_str::strnlen()"},
        Test::{c_str_test_strcpy, "c_str.csp std::c_str::strcpy()"},
        Test::{c_str_test_strncpy, "c_str.csp std::c_str::strncpy()"},
        Test::{c_str_test_strcat, "c_str.csp std::c_str::strcat()"},
        Test::{c_str_test_strncat, "c_str.csp std::c_str::strncat()"},
        Test::{c_str_test_strcmp, "c_str.csp std::c_str::strcmp()"},
        Test::{c_str_test_strncmp, "c_str.csp std::c_str::strncmp()"},
        Test::{c_str_test_strstr, "c_str.csp std::c_str::strstr()"},
        Test::{c_str_test_strsep, "c_str.csp std::c_str::strsep()"},
        Test::{c_str_test_strspn, "c_str.csp std::c_str::strspn()"},
        Test::{c_str_test_strcspn, "c_str.csp std::c_str::strcspn()"},
        Test::{c_str_test_strchr, "c_str.csp std::c_str::strchr()"},
        Test::{c_str_test_strrchr, "c_str.csp std::c_str::strrchr()"},
        Test::{c_str_test_strpbrk, "c_str.csp std::c_str::strpbrk()"},
        Test::{c_str_test_strtok, "c_str.csp std::c_str::strtok()"},
        Test::{c_str_test_memchr, "c_str.csp std::c_str::memchr()"},
        Test::{c_str_test_rawmemchr, "c_str.csp std::c_str::rawmemchr()"},
        Test::{c_str_test_reverse, "c_str.csp std::c_str::reverse()"},
        Test::{c_str_test_from_int, "c_str.csp std::c_str::from_int()"},
        Test::{c_str_test_from_uint, "c_str.csp std::c_str::from_uint()"},
        Test::{c_str_test_from_bool, "c_str.csp std::c_str::from_bool()"},
        Test::{c_str_test_atoi, "c_str.csp std::c_str::to_i32()"},
        Test::{c_str_test_atol, "c_str.csp std::c_str::to_i64()"},

        # math.csp
        Test::{math_test_pow, "math.csp std::math::pow()"},
        Test::{math_test_div, "math.csp std::math::div()"},
        Test::{math_test_div64, "math.csp std::math::div64()"},
        Test::{math_test_mod, "math.csp std::math::mod()"},
        Test::{math_test_sqrt, "math.csp std::math::sqrt()"},
        Test::{math_test_abs, "math.csp std::math::abs()"},
        Test::{math_test_abs64, "math.csp std::math::abs64()"},

        # memory.csp
        Test::{mem_test_alloc, "memory.csp std::memory::alloc()"},
        Test::{mem_test_free, "memory.csp std::memory::free()"},
        Test::{mem_test_calloc, "memory.csp std::memory::calloc()"},
        Test::{mem_test_realloc, "memory.csp std::memory::realloc()"},
        Test::{mem_test_copy, "memory.csp std::memory::copy()"},
        Test::{mem_test_eq, "memory.csp std::memory::eq()"},
        Test::{mem_test_set, "memory.csp std::memory::set()"},
        Test::{mem_test_zero, "memory.csp std::memory::zero()"},
        Test::{mem_test_ptr_overlap, "memory.csp std::memory::ptr_overlap()"},
        Test::{mem_test_is_zero, "memory.csp std::memory::is_zero()"},

        # regex.csp
        Test::{test_regex, "regex.csp"},
    ];

    let t = new(tests);
    run_all(&t);

    <- 0;
}

# --------------------
# array.csp
# --------------------

fn array_test_last(t: &std::Testing) {
    using std::testing;
    let x = [1, 2, 3];
    assert(t, last!(x) == 3, "last!(x) != 3");
    assert(t, last!([1, 2, 3, 4, 5]) == 5, "last!([1, 2, 3, 4, 5]) != 5");
}

fn array_test_first(t: &std::Testing) {
    using std::testing;
    let x = [1, 2, 3];
    assert(t, first!(x) == 1, "first!(x) != 1");
    assert(t, first!([1, 2, 3, 4, 5]) == 1, "first!([1, 2, 3, 4, 5]) != 1");
}

# --------------------
# assert.csp
# --------------------

fn assert_test_disable(t: &std::Testing) {
    using std::testing;
    assert(t, std::assert::status() == true, "std::assert::status() != true");
    std::assert::disable();
    assert(t, std::assert::status() == false, "std::assert::status() != false");
    std::assert::enable();
    assert(t, std::assert::status() == true, "std::assert::status() != true");
}

import "c_str_tests.csp";
import "math_tests.csp";
import "mem_tests.csp";
import "regex_tests.csp";