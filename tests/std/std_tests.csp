import "std.csp";

fn main(): i32 {
    using std::testing;

    let tests = [
        Test::{
            const |t: &std::Testing| => array_test_last(t),
            "array.csp last!()"
        },
        Test::{
            const |t: &std::Testing| => array_test_first(t), 
            "array.csp first!()"
        },
        Test::{
            const |t: &std::Testing| => assert_test_disable(t),
            "assert.csp std::assert::disable()"
        },
        Test::{
            const |t: &std::Testing| => c_str_test_strlen(t),
            "c_str.csp std::c_str::strlen()"
        },
        Test::{
            const |t: &std::Testing| => c_str_test_strnlen(t),
            "c_str.csp std::c_str::strnlen()"
        },
        Test::{
            const |t: &std::Testing| => c_str_test_strcpy(t),
            "c_str.csp std::c_str::strcpy()"
        },
        Test::{
            const |t: &std::Testing| => c_str_test_strncpy(t),
            "c_str.csp std::c_str::strncpy()"
        },
    ];

    let t = new(tests);
    run_all(&t);

    <- 0;
}

# --------------------
# array.csp
# --------------------

fn array_test_last(t: &std::Testing) {
    using std::testing;
    let x = [1, 2, 3];
    assert(t, last!(x) == 3, "last!(x) != 3");
    assert(t, last!([1, 2, 3, 4, 5]) == 5, "last!([1, 2, 3, 4, 5]) != 5");
}

fn array_test_first(t: &std::Testing) {
    using std::testing;
    let x = [1, 2, 3];
    assert(t, first!(x) == 1, "first!(x) != 1");
    assert(t, first!([1, 2, 3, 4, 5]) == 1, "first!([1, 2, 3, 4, 5]) != 1");
}

# --------------------
# assert.csp
# --------------------

fn assert_test_disable(t: &std::Testing) {
    using std::testing;
    assert(t, std::assert::status() == true, "std::assert::status() != true");
    std::assert::disable();
    assert(t, std::assert::status() == false, "std::assert::status() != false");
    std::assert::enable();
    assert(t, std::assert::status() == true, "std::assert::status() != true");
}

# --------------------
# c_str.csp
# --------------------

fn c_str_test_strlen(t: &std::Testing) {
    using std::testing;
    let x = "hello";
    assert(t, std::c_str::strlen(x) == 5, "std::c_str::strlen(x) != 5");
    assert(t, std::c_str::strlen("cspydr") == 6, "std::c_str::strlen('cspydr') != 6");
}

fn c_str_test_strnlen(t: &std::Testing) {
    using std::testing;
    let x = "hello";
    assert(t, std::c_str::strnlen(x, 5) == 5, "std::c_str::strnlen(x, 5) != 5");
    assert(t, std::c_str::strnlen("cspydr", 6) == 6, "std::c_str::strnlen('cspydr', 6) != 6");
}

fn c_str_test_strcpy(t: &std::Testing) {
    using std::testing;
    let src = "hello";
    let dest: char 'c[6];
    std::c_str::strcpy(dest, src);
    assert(t, src[0] == dest[0], "src[0] != dest[0]");
    assert(t, src[1] == dest[1], "src[1] != dest[1]");
    assert(t, src[2] == dest[2], "src[2] != dest[2]");
    assert(t, src[3] == dest[3], "src[3] != dest[3]");
    assert(t, src[4] == dest[4], "src[4] != dest[4]");
}

fn c_str_test_strncpy(t: &std::Testing) {
    using std::testing;
    skip();

    let src = "hello";
    let dest: char 'c[6];
    std::c_str::strncpy(dest, src, 4);
    assert(t, src[0] == dest[0], "src[0] != dest[0]");
    assert(t, src[1] == dest[1], "src[1] != dest[1]");
    assert(t, src[2] == dest[2], "src[2] != dest[2]");
    assert(t, src[3] == dest[3], "src[3] != dest[3]");
    assert(t, src[4] == dest[4], "src[4] != dest[4]");
}